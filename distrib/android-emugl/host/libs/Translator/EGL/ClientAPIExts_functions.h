// Auto-generated with: android/scripts/gen-entries.py --mode=funcargs distrib/android-emugl/host/libs/Translator/EGL/ClientAPIExts.entries --output=distrib/android-emugl/host/libs/Translator/EGL/ClientAPIExts_functions.h
// DO NOT EDIT THIS FILE

#ifndef CLIENTAPI_EXTENSIONS_FUNCTIONS_H
#define CLIENTAPI_EXTENSIONS_FUNCTIONS_H

#include <EGL/egl.h>
#include <EGL/eglext.h>
#include <GLES2/gl2.h>
#include <GLES2/gl2ext.h>
#define LIST_CLIENTAPI_EXTENSIONS_FUNCTIONS(X) \
  X(void, glEGLImageTargetTexture2DOES, (GLenum target, GLeglImageOES image), (target, image)) \
  X(void, glEGLImageTargetRenderbufferStorageOES, (GLenum target, GLeglImageOES image), (target, image)) \
  X(void, glBlendEquationSeparateOES, (GLenum modeRGB, GLenum modeAlpha), (modeRGB, modeAlpha)) \
  X(void, glBlendFuncSeparateOES, (GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha), (srcRGB, dstRGB, srcAlpha, dstAlpha)) \
  X(void, glBlendEquationOES, (GLenum mode), (mode)) \
  X(void, glCurrentPaletteMatrixOES, (GLuint matrixpaletteindex), (matrixpaletteindex)) \
  X(void, glLoadPaletteFromModelViewMatrixOES, (), ()) \
  X(void, glMatrixIndexPointerOES, (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer), (size, type, stride, pointer)) \
  X(void, glWeightPointerOES, (GLint size, GLenum type, GLsizei stride, const GLvoid * pointer), (size, type, stride, pointer)) \
  X(void, glDepthRangefOES, (GLclampf zNear, GLclampf zFar), (zNear, zFar)) \
  X(void, glFrustumfOES, (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar), (left, right, bottom, top, zNear, zFar)) \
  X(void, glOrthofOES, (GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar), (left, right, bottom, top, zNear, zFar)) \
  X(void, glClipPlanefOES, (GLenum plane, const GLfloat * equation), (plane, equation)) \
  X(void, glGetClipPlanefOES, (GLenum pname, GLfloat * eqn), (pname, eqn)) \
  X(void, glClearDepthfOES, (GLclampf depth), (depth)) \
  X(void, glPointSizePointerOES, (GLenum type, GLsizei stride, const GLvoid * pointer), (type, stride, pointer)) \
  X(void, glTexGenfOES, (GLenum coord, GLenum pname, GLfloat param), (coord, pname, param)) \
  X(void, glTexGenfvOES, (GLenum coord, GLenum pname, const GLfloat * params), (coord, pname, params)) \
  X(void, glTexGeniOES, (GLenum coord, GLenum pname, GLint param), (coord, pname, param)) \
  X(void, glTexGenivOES, (GLenum coord, GLenum pname, const GLint * params), (coord, pname, params)) \
  X(void, glTexGenxOES, (GLenum coord, GLenum pname, GLfixed param), (coord, pname, param)) \
  X(void, glTexGenxvOES, (GLenum coord, GLenum pname, const GLfixed * params), (coord, pname, params)) \
  X(void, glGetTexGenfvOES, (GLenum coord, GLenum pname, GLfloat * params), (coord, pname, params)) \
  X(void, glGetTexGenivOES, (GLenum coord, GLenum pname, GLint * params), (coord, pname, params)) \
  X(void, glGetTexGenxvOES, (GLenum coord, GLenum pname, GLfixed * params), (coord, pname, params)) \
  X(GLboolean, glIsRenderbufferOES, (GLuint renderbuffer), (renderbuffer)) \
  X(void, glBindRenderbufferOES, (GLenum target, GLuint renderbuffer), (target, renderbuffer)) \
  X(void, glDeleteRenderbuffersOES, (GLsizei n, const GLuint* renderbuffers), (n, renderbuffers)) \
  X(void, glGenRenderbuffersOES, (GLsizei n, GLuint* renderbuffers), (n, renderbuffers)) \
  X(void, glRenderbufferStorageOES, (GLenum target, GLenum internalformat, GLsizei width, GLsizei height), (target, internalformat, width, height)) \
  X(void, glGetRenderbufferParameterivOES, (GLenum target, GLenum pname, GLint* params), (target, pname, params)) \
  X(GLboolean, glIsFramebufferOES, (GLuint framebuffer), (framebuffer)) \
  X(void, glBindFramebufferOES, (GLenum target, GLuint framebuffer), (target, framebuffer)) \
  X(void, glDeleteFramebuffersOES, (GLsizei n, const GLuint* framebuffers), (n, framebuffers)) \
  X(void, glGenFramebuffersOES, (GLsizei n, GLuint* framebuffers), (n, framebuffers)) \
  X(GLenum, glCheckFramebufferStatusOES, (GLenum target), (target)) \
  X(void, glFramebufferTexture2DOES, (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level), (target, attachment, textarget, texture, level)) \
  X(void, glFramebufferRenderbufferOES, (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer), (target, attachment, renderbuffertarget, renderbuffer)) \
  X(void, glGetFramebufferAttachmentParameterivOES, (GLenum target, GLenum attachment, GLenum pname, GLint* params), (target, attachment, pname, params)) \
  X(void, glGenerateMipmapOES, (GLenum target), (target)) \
  X(void, glDrawTexsOES, (GLshort x, GLshort y, GLshort z, GLshort width, GLshort height), (x, y, z, width, height)) \
  X(void, glDrawTexiOES, (GLint x, GLint y, GLint z, GLint width, GLint height), (x, y, z, width, height)) \
  X(void, glDrawTexfOES, (GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height), (x, y, z, width, height)) \
  X(void, glDrawTexxOES, (GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height), (x, y, z, width, height)) \
  X(void, glDrawTexsvOES, (const GLshort * coords), (coords)) \
  X(void, glDrawTexivOES, (const GLint * coords), (coords)) \
  X(void, glDrawTexfvOES, (const GLfloat * coords), (coords)) \
  X(void, glDrawTexxvOES, (const GLfixed * coords), (coords)) \


#endif  // CLIENTAPI_EXTENSIONS_FUNCTIONS_H
