# A list of common GLES 1.x and 2.0 extension functions that must be resolved
# differently at runtime by EGL's eglGetProcAddress() function, depending on
# the thread's current context.
#
# The main idea is that the eglGetProcAddress() will return the address of a
# special wrapper function that will access the current thread's context,
# and thus GLES API version, to then call the real extension function.
# See ClientAPIExts.cpp for implementation details.

!ClientAPI_extensions
%#include <EGL/egl.h>
%#include <EGL/eglext.h>
%#include <GLES2/gl2.h>
%#include <GLES2/gl2ext.h>

void glEGLImageTargetTexture2DOES(GLenum target, GLeglImageOES image);
void glEGLImageTargetRenderbufferStorageOES(GLenum target, GLeglImageOES image);
void glBlendEquationSeparateOES(GLenum modeRGB, GLenum modeAlpha);
void glBlendFuncSeparateOES(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
void glBlendEquationOES(GLenum mode);
void glCurrentPaletteMatrixOES(GLuint matrixpaletteindex);
void glLoadPaletteFromModelViewMatrixOES(void);
void glMatrixIndexPointerOES(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void glWeightPointerOES(GLint size, GLenum type, GLsizei stride, const GLvoid * pointer);
void glDepthRangefOES(GLclampf zNear, GLclampf zFar);
void glFrustumfOES(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void glOrthofOES(GLfloat left, GLfloat right, GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar);
void glClipPlanefOES(GLenum plane, const GLfloat *equation);
void glGetClipPlanefOES(GLenum pname, GLfloat * eqn);
void glClearDepthfOES(GLclampf depth);
void glPointSizePointerOES(GLenum type, GLsizei stride, const GLvoid *pointer);
void glTexGenfOES(GLenum coord, GLenum pname, GLfloat param);
void glTexGenfvOES(GLenum coord, GLenum pname, const GLfloat *params);
void glTexGeniOES(GLenum coord, GLenum pname, GLint param);
void glTexGenivOES(GLenum coord, GLenum pname, const GLint *params);
void glTexGenxOES(GLenum coord, GLenum pname, GLfixed param);
void glTexGenxvOES(GLenum coord, GLenum pname, const GLfixed *params);
void glGetTexGenfvOES(GLenum coord, GLenum pname, GLfloat *params);
void glGetTexGenivOES(GLenum coord, GLenum pname, GLint *params);
void glGetTexGenxvOES(GLenum coord, GLenum pname, GLfixed *params);
GLboolean glIsRenderbufferOES(GLuint renderbuffer);
void glBindRenderbufferOES(GLenum target, GLuint renderbuffer);
void glDeleteRenderbuffersOES(GLsizei n, const GLuint* renderbuffers);
void glGenRenderbuffersOES(GLsizei n, GLuint* renderbuffers);
void glRenderbufferStorageOES(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
void glGetRenderbufferParameterivOES(GLenum target, GLenum pname, GLint* params);
GLboolean glIsFramebufferOES(GLuint framebuffer);
void glBindFramebufferOES(GLenum target, GLuint framebuffer);
void glDeleteFramebuffersOES(GLsizei n, const GLuint* framebuffers);
void glGenFramebuffersOES(GLsizei n, GLuint* framebuffers);
GLenum glCheckFramebufferStatusOES(GLenum target);
void glFramebufferTexture2DOES(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
void glFramebufferRenderbufferOES(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
void glGetFramebufferAttachmentParameterivOES(GLenum target, GLenum attachment, GLenum pname, GLint* params);
void glGenerateMipmapOES(GLenum target);
void glDrawTexsOES(GLshort x, GLshort y, GLshort z, GLshort width, GLshort height);
void glDrawTexiOES(GLint x, GLint y, GLint z, GLint width, GLint height);
void glDrawTexfOES(GLfloat x, GLfloat y, GLfloat z, GLfloat width, GLfloat height);
void glDrawTexxOES(GLfixed x, GLfixed y, GLfixed z, GLfixed width, GLfixed height);
void glDrawTexsvOES(const GLshort *coords);
void glDrawTexivOES(const GLint *coords);
void glDrawTexfvOES(const GLfloat *coords);
void glDrawTexxvOES(const GLfixed *coords);
