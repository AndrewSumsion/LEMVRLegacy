/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_LINUX_USER_GENERATED_TRACERS_H
#define TRACE_LINUX_USER_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_USER_SETUP_FRAME_EVENT;
extern TraceEvent _TRACE_USER_SETUP_RT_FRAME_EVENT;
extern TraceEvent _TRACE_USER_DO_RT_SIGRETURN_EVENT;
extern TraceEvent _TRACE_USER_DO_SIGRETURN_EVENT;
extern TraceEvent _TRACE_USER_FORCE_SIG_EVENT;
extern TraceEvent _TRACE_USER_HANDLE_SIGNAL_EVENT;
extern TraceEvent _TRACE_USER_HOST_SIGNAL_EVENT;
extern TraceEvent _TRACE_USER_QUEUE_SIGNAL_EVENT;
extern TraceEvent _TRACE_USER_S390X_RESTORE_SIGREGS_EVENT;
extern uint16_t _TRACE_USER_SETUP_FRAME_DSTATE;
extern uint16_t _TRACE_USER_SETUP_RT_FRAME_DSTATE;
extern uint16_t _TRACE_USER_DO_RT_SIGRETURN_DSTATE;
extern uint16_t _TRACE_USER_DO_SIGRETURN_DSTATE;
extern uint16_t _TRACE_USER_FORCE_SIG_DSTATE;
extern uint16_t _TRACE_USER_HANDLE_SIGNAL_DSTATE;
extern uint16_t _TRACE_USER_HOST_SIGNAL_DSTATE;
extern uint16_t _TRACE_USER_QUEUE_SIGNAL_DSTATE;
extern uint16_t _TRACE_USER_S390X_RESTORE_SIGREGS_DSTATE;
#define TRACE_USER_SETUP_FRAME_ENABLED 1
#define TRACE_USER_SETUP_RT_FRAME_ENABLED 1
#define TRACE_USER_DO_RT_SIGRETURN_ENABLED 1
#define TRACE_USER_DO_SIGRETURN_ENABLED 1
#define TRACE_USER_FORCE_SIG_ENABLED 1
#define TRACE_USER_HANDLE_SIGNAL_ENABLED 1
#define TRACE_USER_HOST_SIGNAL_ENABLED 1
#define TRACE_USER_QUEUE_SIGNAL_ENABLED 1
#define TRACE_USER_S390X_RESTORE_SIGREGS_ENABLED 1

#define TRACE_USER_SETUP_FRAME_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_setup_frame(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_setup_frame(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_setup_frame(env, frame_addr);
    }
}

#define TRACE_USER_SETUP_RT_FRAME_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_setup_rt_frame(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_setup_rt_frame(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_setup_rt_frame(env, frame_addr);
    }
}

#define TRACE_USER_DO_RT_SIGRETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_do_rt_sigreturn(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_do_rt_sigreturn(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_do_rt_sigreturn(env, frame_addr);
    }
}

#define TRACE_USER_DO_SIGRETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_do_sigreturn(void * env, uint64_t frame_addr)
{
}

static inline void trace_user_do_sigreturn(void * env, uint64_t frame_addr)
{
    if (true) {
        _nocheck__trace_user_do_sigreturn(env, frame_addr);
    }
}

#define TRACE_USER_FORCE_SIG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_force_sig(void * env, int target_sig, int host_sig)
{
}

static inline void trace_user_force_sig(void * env, int target_sig, int host_sig)
{
    if (true) {
        _nocheck__trace_user_force_sig(env, target_sig, host_sig);
    }
}

#define TRACE_USER_HANDLE_SIGNAL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_handle_signal(void * env, int target_sig)
{
}

static inline void trace_user_handle_signal(void * env, int target_sig)
{
    if (true) {
        _nocheck__trace_user_handle_signal(env, target_sig);
    }
}

#define TRACE_USER_HOST_SIGNAL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_host_signal(void * env, int host_sig, int target_sig)
{
}

static inline void trace_user_host_signal(void * env, int host_sig, int target_sig)
{
    if (true) {
        _nocheck__trace_user_host_signal(env, host_sig, target_sig);
    }
}

#define TRACE_USER_QUEUE_SIGNAL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_queue_signal(void * env, int target_sig)
{
}

static inline void trace_user_queue_signal(void * env, int target_sig)
{
    if (true) {
        _nocheck__trace_user_queue_signal(env, target_sig);
    }
}

#define TRACE_USER_S390X_RESTORE_SIGREGS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_user_s390x_restore_sigregs(void * env, uint64_t sc_psw_addr, uint64_t env_psw_addr)
{
}

static inline void trace_user_s390x_restore_sigregs(void * env, uint64_t sc_psw_addr, uint64_t env_psw_addr)
{
    if (true) {
        _nocheck__trace_user_s390x_restore_sigregs(env, sc_psw_addr, env_psw_addr);
    }
}
#endif /* TRACE_LINUX_USER_GENERATED_TRACERS_H */
