/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_MIGRATION_GENERATED_TRACERS_H
#define TRACE_MIGRATION_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_POST_MAIN_EVENT;
extern TraceEvent _TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_EVENT;
extern TraceEvent _TRACE_QEMU_CHECK_SECTION_FOOTER_EVENT;
extern TraceEvent _TRACE_SAVE_SECTION_FOOTER_EVENT;
extern TraceEvent _TRACE_QEMU_SAVEVM_SEND_PACKAGED_EVENT;
extern TraceEvent _TRACE_LOADVM_STATE_SETUP_EVENT;
extern TraceEvent _TRACE_LOADVM_STATE_CLEANUP_EVENT;
extern TraceEvent _TRACE_LOADVM_HANDLE_CMD_PACKAGED_EVENT;
extern TraceEvent _TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_EVENT;
extern TraceEvent _TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_CPU_SYNC_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_VMSTART_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_EVENT;
extern TraceEvent _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_EVENT;
extern TraceEvent _TRACE_LOADVM_PROCESS_COMMAND_EVENT;
extern TraceEvent _TRACE_LOADVM_PROCESS_COMMAND_PING_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_EVENT;
extern TraceEvent _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_EVENT;
extern TraceEvent _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_EVENT;
extern TraceEvent _TRACE_SAVEVM_COMMAND_SEND_EVENT;
extern TraceEvent _TRACE_SAVEVM_SECTION_START_EVENT;
extern TraceEvent _TRACE_SAVEVM_SECTION_END_EVENT;
extern TraceEvent _TRACE_SAVEVM_SECTION_SKIP_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_PING_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_EVENT;
extern TraceEvent _TRACE_SAVEVM_SEND_POSTCOPY_RUN_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_SETUP_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_HEADER_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_ITERATE_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_CLEANUP_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_EVENT;
extern TraceEvent _TRACE_SAVEVM_STATE_HANDLER_INSERT_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_STATE_LOOP_EVENT;
extern TraceEvent _TRACE_VMSTATE_SAVE_STATE_TOP_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_SAVE_TOP_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_EVENT;
extern TraceEvent _TRACE_QEMU_ANNOUNCE_SELF_ITER_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_FIELD_ERROR_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_STATE_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_STATE_END_EVENT;
extern TraceEvent _TRACE_VMSTATE_LOAD_STATE_FIELD_EVENT;
extern TraceEvent _TRACE_VMSTATE_N_ELEMS_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_LOAD_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_LOAD_BAD_EVENT;
extern TraceEvent _TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_EVENT;
extern TraceEvent _TRACE_GET_QTAILQ_EVENT;
extern TraceEvent _TRACE_GET_QTAILQ_END_EVENT;
extern TraceEvent _TRACE_PUT_QTAILQ_EVENT;
extern TraceEvent _TRACE_PUT_QTAILQ_END_EVENT;
extern TraceEvent _TRACE_QEMU_FILE_FCLOSE_EVENT;
extern TraceEvent _TRACE_GET_QUEUED_PAGE_EVENT;
extern TraceEvent _TRACE_GET_QUEUED_PAGE_NOT_DIRTY_EVENT;
extern TraceEvent _TRACE_MIGRATION_BITMAP_SYNC_START_EVENT;
extern TraceEvent _TRACE_MIGRATION_BITMAP_SYNC_END_EVENT;
extern TraceEvent _TRACE_MIGRATION_THROTTLE_EVENT;
extern TraceEvent _TRACE_RAM_DISCARD_RANGE_EVENT;
extern TraceEvent _TRACE_RAM_LOAD_LOOP_EVENT;
extern TraceEvent _TRACE_RAM_LOAD_POSTCOPY_LOOP_EVENT;
extern TraceEvent _TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_EVENT;
extern TraceEvent _TRACE_RAM_SAVE_PAGE_EVENT;
extern TraceEvent _TRACE_RAM_SAVE_QUEUE_PAGES_EVENT;
extern TraceEvent _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_EVENT;
extern TraceEvent _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_EVENT;
extern TraceEvent _TRACE_MIGRATE_SET_STATE_EVENT;
extern TraceEvent _TRACE_MIGRATE_FD_CLEANUP_EVENT;
extern TraceEvent _TRACE_MIGRATE_FD_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATE_FD_CANCEL_EVENT;
extern TraceEvent _TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_EVENT;
extern TraceEvent _TRACE_MIGRATE_PENDING_EVENT;
extern TraceEvent _TRACE_MIGRATE_SEND_RP_MESSAGE_EVENT;
extern TraceEvent _TRACE_MIGRATION_COMPLETION_FILE_ERR_EVENT;
extern TraceEvent _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_EVENT;
extern TraceEvent _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_EVENT;
extern TraceEvent _TRACE_MIGRATION_RETURN_PATH_END_BEFORE_EVENT;
extern TraceEvent _TRACE_MIGRATION_RETURN_PATH_END_AFTER_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_AFTER_LOOP_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_FILE_ERR_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_SETUP_COMPLETE_EVENT;
extern TraceEvent _TRACE_OPEN_RETURN_PATH_ON_SOURCE_EVENT;
extern TraceEvent _TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_START_EVENT;
extern TraceEvent _TRACE_POSTCOPY_START_SET_RUN_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_END_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_PONG_EVENT;
extern TraceEvent _TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_EVENT;
extern TraceEvent _TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_EVENT;
extern TraceEvent _TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_EVENT;
extern TraceEvent _TRACE_MIGRATION_THREAD_LOW_PENDING_EVENT;
extern TraceEvent _TRACE_MIGRATE_STATE_TOO_BIG_EVENT;
extern TraceEvent _TRACE_MIGRATE_TRANSFERRED_EVENT;
extern TraceEvent _TRACE_PROCESS_INCOMING_MIGRATION_CO_END_EVENT;
extern TraceEvent _TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_EVENT;
extern TraceEvent _TRACE_MIGRATION_SET_INCOMING_CHANNEL_EVENT;
extern TraceEvent _TRACE_MIGRATION_SET_OUTGOING_CHANNEL_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CLEANUP_WAITING_FOR_DISCONNECT_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CLOSE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_DEST_INIT_TRYING_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_DUMP_GID_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_FILL_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POLL_RECV_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POLL_WRITE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POLL_OTHER_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_POST_SEND_CONTROL_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_START_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_STOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_FLUSH_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_POST_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_TOP_EVENT;
extern TraceEvent _TRACE_QEMU_RDMA_WRITE_ONE_ZERO_EVENT;
extern TraceEvent _TRACE_RDMA_ADD_BLOCK_EVENT;
extern TraceEvent _TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_EVENT;
extern TraceEvent _TRACE_RDMA_DELETE_BLOCK_EVENT;
extern TraceEvent _TRACE_RDMA_START_INCOMING_MIGRATION_EVENT;
extern TraceEvent _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_EVENT;
extern TraceEvent _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_EVENT;
extern TraceEvent _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_EVENT;
extern TraceEvent _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_DISCARD_SEND_FINISH_EVENT;
extern TraceEvent _TRACE_POSTCOPY_DISCARD_SEND_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_CLEANUP_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_INIT_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_NHP_RANGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PLACE_PAGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_PLACE_PAGE_ZERO_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_EVENT;
extern TraceEvent _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_EVENT;
extern TraceEvent _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_EVENT;
extern TraceEvent _TRACE_POSTCOPY_WAKE_SHARED_EVENT;
extern TraceEvent _TRACE_SAVE_XBZRLE_PAGE_SKIPPING_EVENT;
extern TraceEvent _TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_EVENT;
extern TraceEvent _TRACE_RAM_SAVE_ITERATE_BIG_WAIT_EVENT;
extern TraceEvent _TRACE_RAM_LOAD_COMPLETE_EVENT;
extern TraceEvent _TRACE_MIGRATION_EXEC_OUTGOING_EVENT;
extern TraceEvent _TRACE_MIGRATION_EXEC_INCOMING_EVENT;
extern TraceEvent _TRACE_MIGRATION_FD_OUTGOING_EVENT;
extern TraceEvent _TRACE_MIGRATION_FD_INCOMING_EVENT;
extern TraceEvent _TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_EVENT;
extern TraceEvent _TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_EVENT;
extern TraceEvent _TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_EVENT;
extern TraceEvent _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_COLO_VM_STATE_CHANGE_EVENT;
extern TraceEvent _TRACE_COLO_SEND_MESSAGE_EVENT;
extern TraceEvent _TRACE_COLO_RECEIVE_MESSAGE_EVENT;
extern TraceEvent _TRACE_COLO_FAILOVER_SET_STATE_EVENT;
extern TraceEvent _TRACE_SEND_BITMAP_HEADER_ENTER_EVENT;
extern TraceEvent _TRACE_SEND_BITMAP_BITS_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_ITERATE_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_SAVE_PENDING_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_COMPLETE_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_HEADER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_ENTER_EVENT;
extern TraceEvent _TRACE_DIRTY_BITMAP_LOAD_SUCCESS_EVENT;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_POST_MAIN_DSTATE;
extern uint16_t _TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_DSTATE;
extern uint16_t _TRACE_QEMU_CHECK_SECTION_FOOTER_DSTATE;
extern uint16_t _TRACE_SAVE_SECTION_FOOTER_DSTATE;
extern uint16_t _TRACE_QEMU_SAVEVM_SEND_PACKAGED_DSTATE;
extern uint16_t _TRACE_LOADVM_STATE_SETUP_DSTATE;
extern uint16_t _TRACE_LOADVM_STATE_CLEANUP_DSTATE;
extern uint16_t _TRACE_LOADVM_HANDLE_CMD_PACKAGED_DSTATE;
extern uint16_t _TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_DSTATE;
extern uint16_t _TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_CPU_SYNC_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_HANDLE_RUN_VMSTART_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_DSTATE;
extern uint16_t _TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_DSTATE;
extern uint16_t _TRACE_LOADVM_PROCESS_COMMAND_DSTATE;
extern uint16_t _TRACE_LOADVM_PROCESS_COMMAND_PING_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_DSTATE;
extern uint16_t _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_DSTATE;
extern uint16_t _TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_DSTATE;
extern uint16_t _TRACE_SAVEVM_COMMAND_SEND_DSTATE;
extern uint16_t _TRACE_SAVEVM_SECTION_START_DSTATE;
extern uint16_t _TRACE_SAVEVM_SECTION_END_DSTATE;
extern uint16_t _TRACE_SAVEVM_SECTION_SKIP_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_PING_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_DSTATE;
extern uint16_t _TRACE_SAVEVM_SEND_POSTCOPY_RUN_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_SETUP_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_HEADER_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_ITERATE_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_CLEANUP_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_DSTATE;
extern uint16_t _TRACE_SAVEVM_STATE_HANDLER_INSERT_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_STATE_LOOP_DSTATE;
extern uint16_t _TRACE_VMSTATE_SAVE_STATE_TOP_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_SAVE_TOP_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_DSTATE;
extern uint16_t _TRACE_QEMU_ANNOUNCE_SELF_ITER_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_FIELD_ERROR_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_STATE_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_STATE_END_DSTATE;
extern uint16_t _TRACE_VMSTATE_LOAD_STATE_FIELD_DSTATE;
extern uint16_t _TRACE_VMSTATE_N_ELEMS_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_LOAD_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_LOAD_BAD_DSTATE;
extern uint16_t _TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_DSTATE;
extern uint16_t _TRACE_GET_QTAILQ_DSTATE;
extern uint16_t _TRACE_GET_QTAILQ_END_DSTATE;
extern uint16_t _TRACE_PUT_QTAILQ_DSTATE;
extern uint16_t _TRACE_PUT_QTAILQ_END_DSTATE;
extern uint16_t _TRACE_QEMU_FILE_FCLOSE_DSTATE;
extern uint16_t _TRACE_GET_QUEUED_PAGE_DSTATE;
extern uint16_t _TRACE_GET_QUEUED_PAGE_NOT_DIRTY_DSTATE;
extern uint16_t _TRACE_MIGRATION_BITMAP_SYNC_START_DSTATE;
extern uint16_t _TRACE_MIGRATION_BITMAP_SYNC_END_DSTATE;
extern uint16_t _TRACE_MIGRATION_THROTTLE_DSTATE;
extern uint16_t _TRACE_RAM_DISCARD_RANGE_DSTATE;
extern uint16_t _TRACE_RAM_LOAD_LOOP_DSTATE;
extern uint16_t _TRACE_RAM_LOAD_POSTCOPY_LOOP_DSTATE;
extern uint16_t _TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_DSTATE;
extern uint16_t _TRACE_RAM_SAVE_PAGE_DSTATE;
extern uint16_t _TRACE_RAM_SAVE_QUEUE_PAGES_DSTATE;
extern uint16_t _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_DSTATE;
extern uint16_t _TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_DSTATE;
extern uint16_t _TRACE_MIGRATE_SET_STATE_DSTATE;
extern uint16_t _TRACE_MIGRATE_FD_CLEANUP_DSTATE;
extern uint16_t _TRACE_MIGRATE_FD_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATE_FD_CANCEL_DSTATE;
extern uint16_t _TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_DSTATE;
extern uint16_t _TRACE_MIGRATE_PENDING_DSTATE;
extern uint16_t _TRACE_MIGRATE_SEND_RP_MESSAGE_DSTATE;
extern uint16_t _TRACE_MIGRATION_COMPLETION_FILE_ERR_DSTATE;
extern uint16_t _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_DSTATE;
extern uint16_t _TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_DSTATE;
extern uint16_t _TRACE_MIGRATION_RETURN_PATH_END_BEFORE_DSTATE;
extern uint16_t _TRACE_MIGRATION_RETURN_PATH_END_AFTER_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_AFTER_LOOP_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_FILE_ERR_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_SETUP_COMPLETE_DSTATE;
extern uint16_t _TRACE_OPEN_RETURN_PATH_ON_SOURCE_DSTATE;
extern uint16_t _TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_START_DSTATE;
extern uint16_t _TRACE_POSTCOPY_START_SET_RUN_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_END_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_PONG_DSTATE;
extern uint16_t _TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_DSTATE;
extern uint16_t _TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_DSTATE;
extern uint16_t _TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_DSTATE;
extern uint16_t _TRACE_MIGRATION_THREAD_LOW_PENDING_DSTATE;
extern uint16_t _TRACE_MIGRATE_STATE_TOO_BIG_DSTATE;
extern uint16_t _TRACE_MIGRATE_TRANSFERRED_DSTATE;
extern uint16_t _TRACE_PROCESS_INCOMING_MIGRATION_CO_END_DSTATE;
extern uint16_t _TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_DSTATE;
extern uint16_t _TRACE_MIGRATION_SET_INCOMING_CHANNEL_DSTATE;
extern uint16_t _TRACE_MIGRATION_SET_OUTGOING_CHANNEL_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CLEANUP_WAITING_FOR_DISCONNECT_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CLOSE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_DEST_INIT_TRYING_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_DUMP_GID_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_FILL_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POLL_RECV_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POLL_WRITE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POLL_OTHER_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_POST_SEND_CONTROL_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_START_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_STOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_FLUSH_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_POST_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_TOP_DSTATE;
extern uint16_t _TRACE_QEMU_RDMA_WRITE_ONE_ZERO_DSTATE;
extern uint16_t _TRACE_RDMA_ADD_BLOCK_DSTATE;
extern uint16_t _TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_DSTATE;
extern uint16_t _TRACE_RDMA_DELETE_BLOCK_DSTATE;
extern uint16_t _TRACE_RDMA_START_INCOMING_MIGRATION_DSTATE;
extern uint16_t _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_DSTATE;
extern uint16_t _TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_DSTATE;
extern uint16_t _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_DSTATE;
extern uint16_t _TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_DISCARD_SEND_FINISH_DSTATE;
extern uint16_t _TRACE_POSTCOPY_DISCARD_SEND_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_CLEANUP_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_INIT_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_NHP_RANGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PLACE_PAGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_PLACE_PAGE_ZERO_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_DSTATE;
extern uint16_t _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_DSTATE;
extern uint16_t _TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_DSTATE;
extern uint16_t _TRACE_POSTCOPY_WAKE_SHARED_DSTATE;
extern uint16_t _TRACE_SAVE_XBZRLE_PAGE_SKIPPING_DSTATE;
extern uint16_t _TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_DSTATE;
extern uint16_t _TRACE_RAM_SAVE_ITERATE_BIG_WAIT_DSTATE;
extern uint16_t _TRACE_RAM_LOAD_COMPLETE_DSTATE;
extern uint16_t _TRACE_MIGRATION_EXEC_OUTGOING_DSTATE;
extern uint16_t _TRACE_MIGRATION_EXEC_INCOMING_DSTATE;
extern uint16_t _TRACE_MIGRATION_FD_OUTGOING_DSTATE;
extern uint16_t _TRACE_MIGRATION_FD_INCOMING_DSTATE;
extern uint16_t _TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_DSTATE;
extern uint16_t _TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_DSTATE;
extern uint16_t _TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_DSTATE;
extern uint16_t _TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_COLO_VM_STATE_CHANGE_DSTATE;
extern uint16_t _TRACE_COLO_SEND_MESSAGE_DSTATE;
extern uint16_t _TRACE_COLO_RECEIVE_MESSAGE_DSTATE;
extern uint16_t _TRACE_COLO_FAILOVER_SET_STATE_DSTATE;
extern uint16_t _TRACE_SEND_BITMAP_HEADER_ENTER_DSTATE;
extern uint16_t _TRACE_SEND_BITMAP_BITS_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_ITERATE_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_SAVE_PENDING_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_COMPLETE_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_HEADER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_ENTER_DSTATE;
extern uint16_t _TRACE_DIRTY_BITMAP_LOAD_SUCCESS_DSTATE;
#define TRACE_QEMU_LOADVM_STATE_SECTION_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_POST_MAIN_ENABLED 1
#define TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_ENABLED 1
#define TRACE_QEMU_CHECK_SECTION_FOOTER_ENABLED 1
#define TRACE_SAVE_SECTION_FOOTER_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_PACKAGED_ENABLED 1
#define TRACE_LOADVM_STATE_SETUP_ENABLED 1
#define TRACE_LOADVM_STATE_CLEANUP_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_ENABLED 1
#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_CPU_SYNC_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_VMSTART_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_ENABLED 1
#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_ENABLED 1
#define TRACE_LOADVM_PROCESS_COMMAND_ENABLED 1
#define TRACE_LOADVM_PROCESS_COMMAND_PING_ENABLED 1
#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_ENABLED 1
#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_ENABLED 1
#define TRACE_SAVEVM_COMMAND_SEND_ENABLED 1
#define TRACE_SAVEVM_SECTION_START_ENABLED 1
#define TRACE_SAVEVM_SECTION_END_ENABLED 1
#define TRACE_SAVEVM_SECTION_SKIP_ENABLED 1
#define TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_ENABLED 1
#define TRACE_SAVEVM_SEND_PING_ENABLED 1
#define TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_ENABLED 1
#define TRACE_SAVEVM_SEND_POSTCOPY_RUN_ENABLED 1
#define TRACE_SAVEVM_STATE_SETUP_ENABLED 1
#define TRACE_SAVEVM_STATE_HEADER_ENABLED 1
#define TRACE_SAVEVM_STATE_ITERATE_ENABLED 1
#define TRACE_SAVEVM_STATE_CLEANUP_ENABLED 1
#define TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_ENABLED 1
#define TRACE_SAVEVM_STATE_HANDLER_INSERT_ENABLED 1
#define TRACE_VMSTATE_SAVE_ENABLED 1
#define TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_ENABLED 1
#define TRACE_VMSTATE_SAVE_STATE_LOOP_ENABLED 1
#define TRACE_VMSTATE_SAVE_STATE_TOP_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_SAVE_TOP_ENABLED 1
#define TRACE_VMSTATE_LOAD_ENABLED 1
#define TRACE_QEMU_ANNOUNCE_SELF_ITER_ENABLED 1
#define TRACE_VMSTATE_LOAD_FIELD_ERROR_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_END_ENABLED 1
#define TRACE_VMSTATE_LOAD_STATE_FIELD_ENABLED 1
#define TRACE_VMSTATE_N_ELEMS_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_BAD_ENABLED 1
#define TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_ENABLED 1
#define TRACE_GET_QTAILQ_ENABLED 1
#define TRACE_GET_QTAILQ_END_ENABLED 1
#define TRACE_PUT_QTAILQ_ENABLED 1
#define TRACE_PUT_QTAILQ_END_ENABLED 1
#define TRACE_QEMU_FILE_FCLOSE_ENABLED 1
#define TRACE_GET_QUEUED_PAGE_ENABLED 1
#define TRACE_GET_QUEUED_PAGE_NOT_DIRTY_ENABLED 1
#define TRACE_MIGRATION_BITMAP_SYNC_START_ENABLED 1
#define TRACE_MIGRATION_BITMAP_SYNC_END_ENABLED 1
#define TRACE_MIGRATION_THROTTLE_ENABLED 1
#define TRACE_RAM_DISCARD_RANGE_ENABLED 1
#define TRACE_RAM_LOAD_LOOP_ENABLED 1
#define TRACE_RAM_LOAD_POSTCOPY_LOOP_ENABLED 1
#define TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_ENABLED 1
#define TRACE_RAM_SAVE_PAGE_ENABLED 1
#define TRACE_RAM_SAVE_QUEUE_PAGES_ENABLED 1
#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_ENABLED 1
#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_ENABLED 1
#define TRACE_MIGRATE_SET_STATE_ENABLED 1
#define TRACE_MIGRATE_FD_CLEANUP_ENABLED 1
#define TRACE_MIGRATE_FD_ERROR_ENABLED 1
#define TRACE_MIGRATE_FD_CANCEL_ENABLED 1
#define TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_ENABLED 1
#define TRACE_MIGRATE_PENDING_ENABLED 1
#define TRACE_MIGRATE_SEND_RP_MESSAGE_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_FILE_ERR_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_ENABLED 1
#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_ENABLED 1
#define TRACE_MIGRATION_RETURN_PATH_END_BEFORE_ENABLED 1
#define TRACE_MIGRATION_RETURN_PATH_END_AFTER_ENABLED 1
#define TRACE_MIGRATION_THREAD_AFTER_LOOP_ENABLED 1
#define TRACE_MIGRATION_THREAD_FILE_ERR_ENABLED 1
#define TRACE_MIGRATION_THREAD_SETUP_COMPLETE_ENABLED 1
#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_ENABLED 1
#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_ENABLED 1
#define TRACE_POSTCOPY_START_ENABLED 1
#define TRACE_POSTCOPY_START_SET_RUN_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_END_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_PONG_ENABLED 1
#define TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_ENABLED 1
#define TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_ENABLED 1
#define TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_ENABLED 1
#define TRACE_MIGRATION_THREAD_LOW_PENDING_ENABLED 1
#define TRACE_MIGRATE_STATE_TOO_BIG_ENABLED 1
#define TRACE_MIGRATE_TRANSFERRED_ENABLED 1
#define TRACE_PROCESS_INCOMING_MIGRATION_CO_END_ENABLED 1
#define TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_ENABLED 1
#define TRACE_MIGRATION_SET_INCOMING_CHANNEL_ENABLED 1
#define TRACE_MIGRATION_SET_OUTGOING_CHANNEL_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_ENABLED 1
#define TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_ENABLED 1
#define TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_ENABLED 1
#define TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_ENABLED 1
#define TRACE_QEMU_RDMA_CLEANUP_WAITING_FOR_DISCONNECT_ENABLED 1
#define TRACE_QEMU_RDMA_CLOSE_ENABLED 1
#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_ENABLED 1
#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_ENABLED 1
#define TRACE_QEMU_RDMA_DEST_INIT_TRYING_ENABLED 1
#define TRACE_QEMU_RDMA_DUMP_GID_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_ENABLED 1
#define TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_ENABLED 1
#define TRACE_QEMU_RDMA_FILL_ENABLED 1
#define TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_RECV_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_WRITE_ENABLED 1
#define TRACE_QEMU_RDMA_POLL_OTHER_ENABLED 1
#define TRACE_QEMU_RDMA_POST_SEND_CONTROL_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_START_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_STOP_ENABLED 1
#define TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_ENABLED 1
#define TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_ENABLED 1
#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_ENABLED 1
#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_ENABLED 1
#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_FLUSH_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_POST_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_TOP_ENABLED 1
#define TRACE_QEMU_RDMA_WRITE_ONE_ZERO_ENABLED 1
#define TRACE_RDMA_ADD_BLOCK_ENABLED 1
#define TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_ENABLED 1
#define TRACE_RDMA_DELETE_BLOCK_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_ENABLED 1
#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_ENABLED 1
#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_ENABLED 1
#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_ENABLED 1
#define TRACE_POSTCOPY_DISCARD_SEND_FINISH_ENABLED 1
#define TRACE_POSTCOPY_DISCARD_SEND_RANGE_ENABLED 1
#define TRACE_POSTCOPY_CLEANUP_RANGE_ENABLED 1
#define TRACE_POSTCOPY_INIT_RANGE_ENABLED 1
#define TRACE_POSTCOPY_NHP_RANGE_ENABLED 1
#define TRACE_POSTCOPY_PLACE_PAGE_ENABLED 1
#define TRACE_POSTCOPY_PLACE_PAGE_ZERO_ENABLED 1
#define TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_ENABLED 1
#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_ENABLED 1
#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_ENABLED 1
#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_ENABLED 1
#define TRACE_POSTCOPY_WAKE_SHARED_ENABLED 1
#define TRACE_SAVE_XBZRLE_PAGE_SKIPPING_ENABLED 1
#define TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_ENABLED 1
#define TRACE_RAM_SAVE_ITERATE_BIG_WAIT_ENABLED 1
#define TRACE_RAM_LOAD_COMPLETE_ENABLED 1
#define TRACE_MIGRATION_EXEC_OUTGOING_ENABLED 1
#define TRACE_MIGRATION_EXEC_INCOMING_ENABLED 1
#define TRACE_MIGRATION_FD_OUTGOING_ENABLED 1
#define TRACE_MIGRATION_FD_INCOMING_ENABLED 1
#define TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_ENABLED 1
#define TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_ENABLED 1
#define TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_ENABLED 1
#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_ENABLED 1
#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_ENABLED 1
#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_ENABLED 1
#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_ENABLED 1
#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_COLO_VM_STATE_CHANGE_ENABLED 1
#define TRACE_COLO_SEND_MESSAGE_ENABLED 1
#define TRACE_COLO_RECEIVE_MESSAGE_ENABLED 1
#define TRACE_COLO_FAILOVER_SET_STATE_ENABLED 1
#define TRACE_SEND_BITMAP_HEADER_ENTER_ENABLED 1
#define TRACE_SEND_BITMAP_BITS_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_ITERATE_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_ENABLED 1
#define TRACE_DIRTY_BITMAP_SAVE_PENDING_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_COMPLETE_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_HEADER_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_ENTER_ENABLED 1
#define TRACE_DIRTY_BITMAP_LOAD_SUCCESS_ENABLED 1

#define TRACE_QEMU_LOADVM_STATE_SECTION_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section(unsigned int section_type)
{
}

static inline void trace_qemu_loadvm_state_section(unsigned int section_type)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section(section_type);
    }
}

#define TRACE_QEMU_LOADVM_STATE_SECTION_COMMAND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section_command(int ret)
{
}

static inline void trace_qemu_loadvm_state_section_command(int ret)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section_command(ret);
    }
}

#define TRACE_QEMU_LOADVM_STATE_SECTION_PARTEND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section_partend(uint32_t section_id)
{
}

static inline void trace_qemu_loadvm_state_section_partend(uint32_t section_id)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section_partend(section_id);
    }
}

#define TRACE_QEMU_LOADVM_STATE_POST_MAIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_post_main(int ret)
{
}

static inline void trace_qemu_loadvm_state_post_main(int ret)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_post_main(ret);
    }
}

#define TRACE_QEMU_LOADVM_STATE_SECTION_STARTFULL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_loadvm_state_section_startfull(uint32_t section_id, const char * idstr, uint32_t instance_id, uint32_t version_id)
{
}

static inline void trace_qemu_loadvm_state_section_startfull(uint32_t section_id, const char * idstr, uint32_t instance_id, uint32_t version_id)
{
    if (true) {
        _nocheck__trace_qemu_loadvm_state_section_startfull(section_id, idstr, instance_id, version_id);
    }
}

#define TRACE_QEMU_CHECK_SECTION_FOOTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_check_section_footer(uint32_t section_id, const char * idstr, uint32_t expect, const char* err)
{
}

static inline void trace_qemu_check_section_footer(uint32_t section_id, const char * idstr, uint32_t expect, const char* err)
{
    if (true) {
        _nocheck__trace_qemu_check_section_footer(section_id, idstr, expect, err);
    }
}

#define TRACE_SAVE_SECTION_FOOTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_save_section_footer(uint32_t section_id, const char * idstr, int save)
{
}

static inline void trace_save_section_footer(uint32_t section_id, const char * idstr, int save)
{
    if (true) {
        _nocheck__trace_save_section_footer(section_id, idstr, save);
    }
}

#define TRACE_QEMU_SAVEVM_SEND_PACKAGED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_savevm_send_packaged(void)
{
}

static inline void trace_qemu_savevm_send_packaged(void)
{
    if (true) {
        _nocheck__trace_qemu_savevm_send_packaged();
    }
}

#define TRACE_LOADVM_STATE_SETUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_state_setup(void)
{
}

static inline void trace_loadvm_state_setup(void)
{
    if (true) {
        _nocheck__trace_loadvm_state_setup();
    }
}

#define TRACE_LOADVM_STATE_CLEANUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_state_cleanup(void)
{
}

static inline void trace_loadvm_state_cleanup(void)
{
    if (true) {
        _nocheck__trace_loadvm_state_cleanup();
    }
}

#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_handle_cmd_packaged(unsigned int length)
{
}

static inline void trace_loadvm_handle_cmd_packaged(unsigned int length)
{
    if (true) {
        _nocheck__trace_loadvm_handle_cmd_packaged(length);
    }
}

#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_MAIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_handle_cmd_packaged_main(int ret)
{
}

static inline void trace_loadvm_handle_cmd_packaged_main(int ret)
{
    if (true) {
        _nocheck__trace_loadvm_handle_cmd_packaged_main(ret);
    }
}

#define TRACE_LOADVM_HANDLE_CMD_PACKAGED_RECEIVED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_handle_cmd_packaged_received(int ret)
{
}

static inline void trace_loadvm_handle_cmd_packaged_received(int ret)
{
    if (true) {
        _nocheck__trace_loadvm_handle_cmd_packaged_received(ret);
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_ADVISE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_advise(void)
{
}

static inline void trace_loadvm_postcopy_handle_advise(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_advise();
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_LISTEN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_listen(void)
{
}

static inline void trace_loadvm_postcopy_handle_listen(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_listen();
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_run(void)
{
}

static inline void trace_loadvm_postcopy_handle_run(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_run();
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_CPU_SYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_run_cpu_sync(void)
{
}

static inline void trace_loadvm_postcopy_handle_run_cpu_sync(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_run_cpu_sync();
    }
}

#define TRACE_LOADVM_POSTCOPY_HANDLE_RUN_VMSTART_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_handle_run_vmstart(void)
{
}

static inline void trace_loadvm_postcopy_handle_run_vmstart(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_handle_run_vmstart();
    }
}

#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_ram_handle_discard(void)
{
}

static inline void trace_loadvm_postcopy_ram_handle_discard(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_ram_handle_discard();
    }
}

#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_ram_handle_discard_end(void)
{
}

static inline void trace_loadvm_postcopy_ram_handle_discard_end(void)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_ram_handle_discard_end();
    }
}

#define TRACE_LOADVM_POSTCOPY_RAM_HANDLE_DISCARD_HEADER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_postcopy_ram_handle_discard_header(const char * ramid, uint16_t len)
{
}

static inline void trace_loadvm_postcopy_ram_handle_discard_header(const char * ramid, uint16_t len)
{
    if (true) {
        _nocheck__trace_loadvm_postcopy_ram_handle_discard_header(ramid, len);
    }
}

#define TRACE_LOADVM_PROCESS_COMMAND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_process_command(uint16_t com, uint16_t len)
{
}

static inline void trace_loadvm_process_command(uint16_t com, uint16_t len)
{
    if (true) {
        _nocheck__trace_loadvm_process_command(com, len);
    }
}

#define TRACE_LOADVM_PROCESS_COMMAND_PING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_loadvm_process_command_ping(uint32_t val)
{
}

static inline void trace_loadvm_process_command_ping(uint32_t val)
{
    if (true) {
        _nocheck__trace_loadvm_process_command_ping(val);
    }
}

#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_EXIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_listen_thread_exit(void)
{
}

static inline void trace_postcopy_ram_listen_thread_exit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_listen_thread_exit();
    }
}

#define TRACE_POSTCOPY_RAM_LISTEN_THREAD_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_listen_thread_start(void)
{
}

static inline void trace_postcopy_ram_listen_thread_start(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_listen_thread_start();
    }
}

#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_ADVISE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_savevm_send_postcopy_advise(void)
{
}

static inline void trace_qemu_savevm_send_postcopy_advise(void)
{
    if (true) {
        _nocheck__trace_qemu_savevm_send_postcopy_advise();
    }
}

#define TRACE_QEMU_SAVEVM_SEND_POSTCOPY_RAM_DISCARD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_savevm_send_postcopy_ram_discard(const char * id, uint16_t len)
{
}

static inline void trace_qemu_savevm_send_postcopy_ram_discard(const char * id, uint16_t len)
{
    if (true) {
        _nocheck__trace_qemu_savevm_send_postcopy_ram_discard(id, len);
    }
}

#define TRACE_SAVEVM_COMMAND_SEND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_command_send(uint16_t command, uint16_t len)
{
}

static inline void trace_savevm_command_send(uint16_t command, uint16_t len)
{
    if (true) {
        _nocheck__trace_savevm_command_send(command, len);
    }
}

#define TRACE_SAVEVM_SECTION_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_section_start(const char * id, unsigned int section_id)
{
}

static inline void trace_savevm_section_start(const char * id, unsigned int section_id)
{
    if (true) {
        _nocheck__trace_savevm_section_start(id, section_id);
    }
}

#define TRACE_SAVEVM_SECTION_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_section_end(const char * id, unsigned int section_id, int ret)
{
}

static inline void trace_savevm_section_end(const char * id, unsigned int section_id, int ret)
{
    if (true) {
        _nocheck__trace_savevm_section_end(id, section_id, ret);
    }
}

#define TRACE_SAVEVM_SECTION_SKIP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_section_skip(const char * id, unsigned int section_id)
{
}

static inline void trace_savevm_section_skip(const char * id, unsigned int section_id)
{
    if (true) {
        _nocheck__trace_savevm_section_skip(id, section_id);
    }
}

#define TRACE_SAVEVM_SEND_OPEN_RETURN_PATH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_send_open_return_path(void)
{
}

static inline void trace_savevm_send_open_return_path(void)
{
    if (true) {
        _nocheck__trace_savevm_send_open_return_path();
    }
}

#define TRACE_SAVEVM_SEND_PING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_send_ping(uint32_t val)
{
}

static inline void trace_savevm_send_ping(uint32_t val)
{
    if (true) {
        _nocheck__trace_savevm_send_ping(val);
    }
}

#define TRACE_SAVEVM_SEND_POSTCOPY_LISTEN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_send_postcopy_listen(void)
{
}

static inline void trace_savevm_send_postcopy_listen(void)
{
    if (true) {
        _nocheck__trace_savevm_send_postcopy_listen();
    }
}

#define TRACE_SAVEVM_SEND_POSTCOPY_RUN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_send_postcopy_run(void)
{
}

static inline void trace_savevm_send_postcopy_run(void)
{
    if (true) {
        _nocheck__trace_savevm_send_postcopy_run();
    }
}

#define TRACE_SAVEVM_STATE_SETUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_state_setup(void)
{
}

static inline void trace_savevm_state_setup(void)
{
    if (true) {
        _nocheck__trace_savevm_state_setup();
    }
}

#define TRACE_SAVEVM_STATE_HEADER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_state_header(void)
{
}

static inline void trace_savevm_state_header(void)
{
    if (true) {
        _nocheck__trace_savevm_state_header();
    }
}

#define TRACE_SAVEVM_STATE_ITERATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_state_iterate(void)
{
}

static inline void trace_savevm_state_iterate(void)
{
    if (true) {
        _nocheck__trace_savevm_state_iterate();
    }
}

#define TRACE_SAVEVM_STATE_CLEANUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_state_cleanup(void)
{
}

static inline void trace_savevm_state_cleanup(void)
{
    if (true) {
        _nocheck__trace_savevm_state_cleanup();
    }
}

#define TRACE_SAVEVM_STATE_COMPLETE_PRECOPY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_state_complete_precopy(void)
{
}

static inline void trace_savevm_state_complete_precopy(void)
{
    if (true) {
        _nocheck__trace_savevm_state_complete_precopy();
    }
}

#define TRACE_SAVEVM_STATE_HANDLER_INSERT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_savevm_state_handler_insert(const char * idstr, int instance_id, const char * vmname)
{
}

static inline void trace_savevm_state_handler_insert(const char * idstr, int instance_id, const char * vmname)
{
    if (true) {
        _nocheck__trace_savevm_state_handler_insert(idstr, instance_id, vmname);
    }
}

#define TRACE_VMSTATE_SAVE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_save(const char * idstr, const char * vmsd_name)
{
}

static inline void trace_vmstate_save(const char * idstr, const char * vmsd_name)
{
    if (true) {
        _nocheck__trace_vmstate_save(idstr, vmsd_name);
    }
}

#define TRACE_VMSTATE_SAVE_STATE_PRE_SAVE_RES_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_save_state_pre_save_res(const char * name, int res)
{
}

static inline void trace_vmstate_save_state_pre_save_res(const char * name, int res)
{
    if (true) {
        _nocheck__trace_vmstate_save_state_pre_save_res(name, res);
    }
}

#define TRACE_VMSTATE_SAVE_STATE_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_save_state_loop(const char * name, const char * field, int n_elems)
{
}

static inline void trace_vmstate_save_state_loop(const char * name, const char * field, int n_elems)
{
    if (true) {
        _nocheck__trace_vmstate_save_state_loop(name, field, n_elems);
    }
}

#define TRACE_VMSTATE_SAVE_STATE_TOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_save_state_top(const char * idstr)
{
}

static inline void trace_vmstate_save_state_top(const char * idstr)
{
    if (true) {
        _nocheck__trace_vmstate_save_state_top(idstr);
    }
}

#define TRACE_VMSTATE_SUBSECTION_SAVE_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_subsection_save_loop(const char * name, const char * sub)
{
}

static inline void trace_vmstate_subsection_save_loop(const char * name, const char * sub)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_save_loop(name, sub);
    }
}

#define TRACE_VMSTATE_SUBSECTION_SAVE_TOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_subsection_save_top(const char * idstr)
{
}

static inline void trace_vmstate_subsection_save_top(const char * idstr)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_save_top(idstr);
    }
}

#define TRACE_VMSTATE_LOAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_load(const char * idstr, const char * vmsd_name)
{
}

static inline void trace_vmstate_load(const char * idstr, const char * vmsd_name)
{
    if (true) {
        _nocheck__trace_vmstate_load(idstr, vmsd_name);
    }
}

#define TRACE_QEMU_ANNOUNCE_SELF_ITER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_announce_self_iter(const char * mac)
{
}

static inline void trace_qemu_announce_self_iter(const char * mac)
{
    if (true) {
        _nocheck__trace_qemu_announce_self_iter(mac);
    }
}

#define TRACE_VMSTATE_LOAD_FIELD_ERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_load_field_error(const char * field, int ret)
{
}

static inline void trace_vmstate_load_field_error(const char * field, int ret)
{
    if (true) {
        _nocheck__trace_vmstate_load_field_error(field, ret);
    }
}

#define TRACE_VMSTATE_LOAD_STATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_load_state(const char * name, int version_id)
{
}

static inline void trace_vmstate_load_state(const char * name, int version_id)
{
    if (true) {
        _nocheck__trace_vmstate_load_state(name, version_id);
    }
}

#define TRACE_VMSTATE_LOAD_STATE_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_load_state_end(const char * name, const char * reason, int val)
{
}

static inline void trace_vmstate_load_state_end(const char * name, const char * reason, int val)
{
    if (true) {
        _nocheck__trace_vmstate_load_state_end(name, reason, val);
    }
}

#define TRACE_VMSTATE_LOAD_STATE_FIELD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_load_state_field(const char * name, const char * field)
{
}

static inline void trace_vmstate_load_state_field(const char * name, const char * field)
{
    if (true) {
        _nocheck__trace_vmstate_load_state_field(name, field);
    }
}

#define TRACE_VMSTATE_N_ELEMS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_n_elems(const char * name, int n_elems)
{
}

static inline void trace_vmstate_n_elems(const char * name, int n_elems)
{
    if (true) {
        _nocheck__trace_vmstate_n_elems(name, n_elems);
    }
}

#define TRACE_VMSTATE_SUBSECTION_LOAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_subsection_load(const char * parent)
{
}

static inline void trace_vmstate_subsection_load(const char * parent)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_load(parent);
    }
}

#define TRACE_VMSTATE_SUBSECTION_LOAD_BAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_subsection_load_bad(const char * parent, const char * sub, const char * sub2)
{
}

static inline void trace_vmstate_subsection_load_bad(const char * parent, const char * sub, const char * sub2)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_load_bad(parent, sub, sub2);
    }
}

#define TRACE_VMSTATE_SUBSECTION_LOAD_GOOD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_vmstate_subsection_load_good(const char * parent)
{
}

static inline void trace_vmstate_subsection_load_good(const char * parent)
{
    if (true) {
        _nocheck__trace_vmstate_subsection_load_good(parent);
    }
}

#define TRACE_GET_QTAILQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_get_qtailq(const char * name, int version_id)
{
}

static inline void trace_get_qtailq(const char * name, int version_id)
{
    if (true) {
        _nocheck__trace_get_qtailq(name, version_id);
    }
}

#define TRACE_GET_QTAILQ_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_get_qtailq_end(const char * name, const char * reason, int val)
{
}

static inline void trace_get_qtailq_end(const char * name, const char * reason, int val)
{
    if (true) {
        _nocheck__trace_get_qtailq_end(name, reason, val);
    }
}

#define TRACE_PUT_QTAILQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_put_qtailq(const char * name, int version_id)
{
}

static inline void trace_put_qtailq(const char * name, int version_id)
{
    if (true) {
        _nocheck__trace_put_qtailq(name, version_id);
    }
}

#define TRACE_PUT_QTAILQ_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_put_qtailq_end(const char * name, const char * reason)
{
}

static inline void trace_put_qtailq_end(const char * name, const char * reason)
{
    if (true) {
        _nocheck__trace_put_qtailq_end(name, reason);
    }
}

#define TRACE_QEMU_FILE_FCLOSE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_file_fclose(void)
{
}

static inline void trace_qemu_file_fclose(void)
{
    if (true) {
        _nocheck__trace_qemu_file_fclose();
    }
}

#define TRACE_GET_QUEUED_PAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_get_queued_page(const char * block_name, uint64_t tmp_offset, unsigned long page_abs)
{
}

static inline void trace_get_queued_page(const char * block_name, uint64_t tmp_offset, unsigned long page_abs)
{
    if (true) {
        _nocheck__trace_get_queued_page(block_name, tmp_offset, page_abs);
    }
}

#define TRACE_GET_QUEUED_PAGE_NOT_DIRTY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_get_queued_page_not_dirty(const char * block_name, uint64_t tmp_offset, unsigned long page_abs, int sent)
{
}

static inline void trace_get_queued_page_not_dirty(const char * block_name, uint64_t tmp_offset, unsigned long page_abs, int sent)
{
    if (true) {
        _nocheck__trace_get_queued_page_not_dirty(block_name, tmp_offset, page_abs, sent);
    }
}

#define TRACE_MIGRATION_BITMAP_SYNC_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_bitmap_sync_start(void)
{
}

static inline void trace_migration_bitmap_sync_start(void)
{
    if (true) {
        _nocheck__trace_migration_bitmap_sync_start();
    }
}

#define TRACE_MIGRATION_BITMAP_SYNC_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_bitmap_sync_end(uint64_t dirty_pages)
{
}

static inline void trace_migration_bitmap_sync_end(uint64_t dirty_pages)
{
    if (true) {
        _nocheck__trace_migration_bitmap_sync_end(dirty_pages);
    }
}

#define TRACE_MIGRATION_THROTTLE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_throttle(void)
{
}

static inline void trace_migration_throttle(void)
{
    if (true) {
        _nocheck__trace_migration_throttle();
    }
}

#define TRACE_RAM_DISCARD_RANGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_discard_range(const char * rbname, uint64_t start, size_t len)
{
}

static inline void trace_ram_discard_range(const char * rbname, uint64_t start, size_t len)
{
    if (true) {
        _nocheck__trace_ram_discard_range(rbname, start, len);
    }
}

#define TRACE_RAM_LOAD_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_load_loop(const char * rbname, uint64_t addr, int flags, void * host)
{
}

static inline void trace_ram_load_loop(const char * rbname, uint64_t addr, int flags, void * host)
{
    if (true) {
        _nocheck__trace_ram_load_loop(rbname, addr, flags, host);
    }
}

#define TRACE_RAM_LOAD_POSTCOPY_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_load_postcopy_loop(uint64_t addr, int flags)
{
}

static inline void trace_ram_load_postcopy_loop(uint64_t addr, int flags)
{
    if (true) {
        _nocheck__trace_ram_load_postcopy_loop(addr, flags);
    }
}

#define TRACE_RAM_POSTCOPY_SEND_DISCARD_BITMAP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_postcopy_send_discard_bitmap(void)
{
}

static inline void trace_ram_postcopy_send_discard_bitmap(void)
{
    if (true) {
        _nocheck__trace_ram_postcopy_send_discard_bitmap();
    }
}

#define TRACE_RAM_SAVE_PAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_save_page(const char * rbname, uint64_t offset, void * host)
{
}

static inline void trace_ram_save_page(const char * rbname, uint64_t offset, void * host)
{
    if (true) {
        _nocheck__trace_ram_save_page(rbname, offset, host);
    }
}

#define TRACE_RAM_SAVE_QUEUE_PAGES_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_save_queue_pages(const char * rbname, size_t start, size_t len)
{
}

static inline void trace_ram_save_queue_pages(const char * rbname, size_t start, size_t len)
{
    if (true) {
        _nocheck__trace_ram_save_queue_pages(rbname, start, len);
    }
}

#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_CLOSE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_await_return_path_close_on_source_close(void)
{
}

static inline void trace_await_return_path_close_on_source_close(void)
{
    if (true) {
        _nocheck__trace_await_return_path_close_on_source_close();
    }
}

#define TRACE_AWAIT_RETURN_PATH_CLOSE_ON_SOURCE_JOINING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_await_return_path_close_on_source_joining(void)
{
}

static inline void trace_await_return_path_close_on_source_joining(void)
{
    if (true) {
        _nocheck__trace_await_return_path_close_on_source_joining();
    }
}

#define TRACE_MIGRATE_SET_STATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_set_state(const char * new_state)
{
}

static inline void trace_migrate_set_state(const char * new_state)
{
    if (true) {
        _nocheck__trace_migrate_set_state(new_state);
    }
}

#define TRACE_MIGRATE_FD_CLEANUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_fd_cleanup(void)
{
}

static inline void trace_migrate_fd_cleanup(void)
{
    if (true) {
        _nocheck__trace_migrate_fd_cleanup();
    }
}

#define TRACE_MIGRATE_FD_ERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_fd_error(const char * error_desc)
{
}

static inline void trace_migrate_fd_error(const char * error_desc)
{
    if (true) {
        _nocheck__trace_migrate_fd_error(error_desc);
    }
}

#define TRACE_MIGRATE_FD_CANCEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_fd_cancel(void)
{
}

static inline void trace_migrate_fd_cancel(void)
{
    if (true) {
        _nocheck__trace_migrate_fd_cancel();
    }
}

#define TRACE_MIGRATE_HANDLE_RP_REQ_PAGES_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_handle_rp_req_pages(const char * rbname, size_t start, size_t len)
{
}

static inline void trace_migrate_handle_rp_req_pages(const char * rbname, size_t start, size_t len)
{
    if (true) {
        _nocheck__trace_migrate_handle_rp_req_pages(rbname, start, len);
    }
}

#define TRACE_MIGRATE_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_pending(uint64_t size, uint64_t max, uint64_t pre, uint64_t compat, uint64_t post)
{
}

static inline void trace_migrate_pending(uint64_t size, uint64_t max, uint64_t pre, uint64_t compat, uint64_t post)
{
    if (true) {
        _nocheck__trace_migrate_pending(size, max, pre, compat, post);
    }
}

#define TRACE_MIGRATE_SEND_RP_MESSAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_send_rp_message(int msg_type, uint16_t len)
{
}

static inline void trace_migrate_send_rp_message(int msg_type, uint16_t len)
{
    if (true) {
        _nocheck__trace_migrate_send_rp_message(msg_type, len);
    }
}

#define TRACE_MIGRATION_COMPLETION_FILE_ERR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_completion_file_err(void)
{
}

static inline void trace_migration_completion_file_err(void)
{
    if (true) {
        _nocheck__trace_migration_completion_file_err();
    }
}

#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_completion_postcopy_end(void)
{
}

static inline void trace_migration_completion_postcopy_end(void)
{
    if (true) {
        _nocheck__trace_migration_completion_postcopy_end();
    }
}

#define TRACE_MIGRATION_COMPLETION_POSTCOPY_END_AFTER_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_completion_postcopy_end_after_complete(void)
{
}

static inline void trace_migration_completion_postcopy_end_after_complete(void)
{
    if (true) {
        _nocheck__trace_migration_completion_postcopy_end_after_complete();
    }
}

#define TRACE_MIGRATION_RETURN_PATH_END_BEFORE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_return_path_end_before(void)
{
}

static inline void trace_migration_return_path_end_before(void)
{
    if (true) {
        _nocheck__trace_migration_return_path_end_before();
    }
}

#define TRACE_MIGRATION_RETURN_PATH_END_AFTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_return_path_end_after(int rp_error)
{
}

static inline void trace_migration_return_path_end_after(int rp_error)
{
    if (true) {
        _nocheck__trace_migration_return_path_end_after(rp_error);
    }
}

#define TRACE_MIGRATION_THREAD_AFTER_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_thread_after_loop(void)
{
}

static inline void trace_migration_thread_after_loop(void)
{
    if (true) {
        _nocheck__trace_migration_thread_after_loop();
    }
}

#define TRACE_MIGRATION_THREAD_FILE_ERR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_thread_file_err(void)
{
}

static inline void trace_migration_thread_file_err(void)
{
    if (true) {
        _nocheck__trace_migration_thread_file_err();
    }
}

#define TRACE_MIGRATION_THREAD_SETUP_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_thread_setup_complete(void)
{
}

static inline void trace_migration_thread_setup_complete(void)
{
    if (true) {
        _nocheck__trace_migration_thread_setup_complete();
    }
}

#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_open_return_path_on_source(void)
{
}

static inline void trace_open_return_path_on_source(void)
{
    if (true) {
        _nocheck__trace_open_return_path_on_source();
    }
}

#define TRACE_OPEN_RETURN_PATH_ON_SOURCE_CONTINUE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_open_return_path_on_source_continue(void)
{
}

static inline void trace_open_return_path_on_source_continue(void)
{
    if (true) {
        _nocheck__trace_open_return_path_on_source_continue();
    }
}

#define TRACE_POSTCOPY_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_start(void)
{
}

static inline void trace_postcopy_start(void)
{
    if (true) {
        _nocheck__trace_postcopy_start();
    }
}

#define TRACE_POSTCOPY_START_SET_RUN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_start_set_run(void)
{
}

static inline void trace_postcopy_start_set_run(void)
{
    if (true) {
        _nocheck__trace_postcopy_start_set_run();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_BAD_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_source_return_path_thread_bad_end(void)
{
}

static inline void trace_source_return_path_thread_bad_end(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_bad_end();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_source_return_path_thread_end(void)
{
}

static inline void trace_source_return_path_thread_end(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_end();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_ENTRY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_source_return_path_thread_entry(void)
{
}

static inline void trace_source_return_path_thread_entry(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_entry();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_LOOP_TOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_source_return_path_thread_loop_top(void)
{
}

static inline void trace_source_return_path_thread_loop_top(void)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_loop_top();
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_PONG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_source_return_path_thread_pong(uint32_t val)
{
}

static inline void trace_source_return_path_thread_pong(uint32_t val)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_pong(val);
    }
}

#define TRACE_SOURCE_RETURN_PATH_THREAD_SHUT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_source_return_path_thread_shut(uint32_t val)
{
}

static inline void trace_source_return_path_thread_shut(uint32_t val)
{
    if (true) {
        _nocheck__trace_source_return_path_thread_shut(val);
    }
}

#define TRACE_MIGRATE_GLOBAL_STATE_POST_LOAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_global_state_post_load(const char * state)
{
}

static inline void trace_migrate_global_state_post_load(const char * state)
{
    if (true) {
        _nocheck__trace_migrate_global_state_post_load(state);
    }
}

#define TRACE_MIGRATE_GLOBAL_STATE_PRE_SAVE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_global_state_pre_save(const char * state)
{
}

static inline void trace_migrate_global_state_pre_save(const char * state)
{
    if (true) {
        _nocheck__trace_migrate_global_state_pre_save(state);
    }
}

#define TRACE_MIGRATION_THREAD_LOW_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_thread_low_pending(uint64_t pending)
{
}

static inline void trace_migration_thread_low_pending(uint64_t pending)
{
    if (true) {
        _nocheck__trace_migration_thread_low_pending(pending);
    }
}

#define TRACE_MIGRATE_STATE_TOO_BIG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_state_too_big(void)
{
}

static inline void trace_migrate_state_too_big(void)
{
    if (true) {
        _nocheck__trace_migrate_state_too_big();
    }
}

#define TRACE_MIGRATE_TRANSFERRED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migrate_transferred(uint64_t tranferred, uint64_t time_spent, double bandwidth, uint64_t size)
{
}

static inline void trace_migrate_transferred(uint64_t tranferred, uint64_t time_spent, double bandwidth, uint64_t size)
{
    if (true) {
        _nocheck__trace_migrate_transferred(tranferred, time_spent, bandwidth, size);
    }
}

#define TRACE_PROCESS_INCOMING_MIGRATION_CO_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_incoming_migration_co_end(int ret, int ps)
{
}

static inline void trace_process_incoming_migration_co_end(int ret, int ps)
{
    if (true) {
        _nocheck__trace_process_incoming_migration_co_end(ret, ps);
    }
}

#define TRACE_PROCESS_INCOMING_MIGRATION_CO_POSTCOPY_END_MAIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_incoming_migration_co_postcopy_end_main(void)
{
}

static inline void trace_process_incoming_migration_co_postcopy_end_main(void)
{
    if (true) {
        _nocheck__trace_process_incoming_migration_co_postcopy_end_main();
    }
}

#define TRACE_MIGRATION_SET_INCOMING_CHANNEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_set_incoming_channel(void * ioc, const char * ioctype)
{
}

static inline void trace_migration_set_incoming_channel(void * ioc, const char * ioctype)
{
    if (true) {
        _nocheck__trace_migration_set_incoming_channel(ioc, ioctype);
    }
}

#define TRACE_MIGRATION_SET_OUTGOING_CHANNEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_set_outgoing_channel(void * ioc, const char * ioctype, const char * hostname, void * err)
{
}

static inline void trace_migration_set_outgoing_channel(void * ioc, const char * ioctype, const char * hostname, void * err)
{
    if (true) {
        _nocheck__trace_migration_set_outgoing_channel(ioc, ioctype, hostname, err);
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_incoming_migration(void)
{
}

static inline void trace_qemu_rdma_accept_incoming_migration(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_incoming_migration();
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_INCOMING_MIGRATION_ACCEPTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_incoming_migration_accepted(void)
{
}

static inline void trace_qemu_rdma_accept_incoming_migration_accepted(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_incoming_migration_accepted();
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_PIN_STATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_pin_state(bool pin)
{
}

static inline void trace_qemu_rdma_accept_pin_state(bool pin)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_pin_state(pin);
    }
}

#define TRACE_QEMU_RDMA_ACCEPT_PIN_VERBSC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_accept_pin_verbsc(void * verbs)
{
}

static inline void trace_qemu_rdma_accept_pin_verbsc(void * verbs)
{
    if (true) {
        _nocheck__trace_qemu_rdma_accept_pin_verbsc(verbs);
    }
}

#define TRACE_QEMU_RDMA_BLOCK_FOR_WRID_MISS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_block_for_wrid_miss(const char * wcompstr, int wcomp, const char * gcompstr, uint64_t req)
{
}

static inline void trace_qemu_rdma_block_for_wrid_miss(const char * wcompstr, int wcomp, const char * gcompstr, uint64_t req)
{
    if (true) {
        _nocheck__trace_qemu_rdma_block_for_wrid_miss(wcompstr, wcomp, gcompstr, req);
    }
}

#define TRACE_QEMU_RDMA_CLEANUP_DISCONNECT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_cleanup_disconnect(void)
{
}

static inline void trace_qemu_rdma_cleanup_disconnect(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_cleanup_disconnect();
    }
}

#define TRACE_QEMU_RDMA_CLEANUP_WAITING_FOR_DISCONNECT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_cleanup_waiting_for_disconnect(void)
{
}

static inline void trace_qemu_rdma_cleanup_waiting_for_disconnect(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_cleanup_waiting_for_disconnect();
    }
}

#define TRACE_QEMU_RDMA_CLOSE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_close(void)
{
}

static inline void trace_qemu_rdma_close(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_close();
    }
}

#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_REQUESTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_connect_pin_all_requested(void)
{
}

static inline void trace_qemu_rdma_connect_pin_all_requested(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_connect_pin_all_requested();
    }
}

#define TRACE_QEMU_RDMA_CONNECT_PIN_ALL_OUTCOME_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_connect_pin_all_outcome(bool pin)
{
}

static inline void trace_qemu_rdma_connect_pin_all_outcome(bool pin)
{
    if (true) {
        _nocheck__trace_qemu_rdma_connect_pin_all_outcome(pin);
    }
}

#define TRACE_QEMU_RDMA_DEST_INIT_TRYING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_dest_init_trying(const char * host, const char * ip)
{
}

static inline void trace_qemu_rdma_dest_init_trying(const char * host, const char * ip)
{
    if (true) {
        _nocheck__trace_qemu_rdma_dest_init_trying(host, ip);
    }
}

#define TRACE_QEMU_RDMA_DUMP_GID_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_dump_gid(const char * who, const char * src, const char * dst)
{
}

static inline void trace_qemu_rdma_dump_gid(const char * who, const char * src, const char * dst)
{
    if (true) {
        _nocheck__trace_qemu_rdma_dump_gid(who, src, dst);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_get_response_start(const char * desc)
{
}

static inline void trace_qemu_rdma_exchange_get_response_start(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_get_response_start(desc);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_GET_RESPONSE_NONE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_get_response_none(const char * desc, int type)
{
}

static inline void trace_qemu_rdma_exchange_get_response_none(const char * desc, int type)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_get_response_none(desc, type);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_SEND_ISSUE_CALLBACK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_send_issue_callback(void)
{
}

static inline void trace_qemu_rdma_exchange_send_issue_callback(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_send_issue_callback();
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_SEND_WAITING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_send_waiting(const char * desc)
{
}

static inline void trace_qemu_rdma_exchange_send_waiting(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_send_waiting(desc);
    }
}

#define TRACE_QEMU_RDMA_EXCHANGE_SEND_RECEIVED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_exchange_send_received(const char * desc)
{
}

static inline void trace_qemu_rdma_exchange_send_received(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_exchange_send_received(desc);
    }
}

#define TRACE_QEMU_RDMA_FILL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_fill(size_t control_len, size_t size)
{
}

static inline void trace_qemu_rdma_fill(size_t control_len, size_t size)
{
    if (true) {
        _nocheck__trace_qemu_rdma_fill(control_len, size);
    }
}

#define TRACE_QEMU_RDMA_INIT_RAM_BLOCKS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_init_ram_blocks(int blocks)
{
}

static inline void trace_qemu_rdma_init_ram_blocks(int blocks)
{
    if (true) {
        _nocheck__trace_qemu_rdma_init_ram_blocks(blocks);
    }
}

#define TRACE_QEMU_RDMA_POLL_RECV_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_poll_recv(const char * compstr, int64_t comp, int64_t id, int sent)
{
}

static inline void trace_qemu_rdma_poll_recv(const char * compstr, int64_t comp, int64_t id, int sent)
{
    if (true) {
        _nocheck__trace_qemu_rdma_poll_recv(compstr, comp, id, sent);
    }
}

#define TRACE_QEMU_RDMA_POLL_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_poll_write(const char * compstr, int64_t comp, int left, uint64_t block, uint64_t chunk, void * local, void * remote)
{
}

static inline void trace_qemu_rdma_poll_write(const char * compstr, int64_t comp, int left, uint64_t block, uint64_t chunk, void * local, void * remote)
{
    if (true) {
        _nocheck__trace_qemu_rdma_poll_write(compstr, comp, left, block, chunk, local, remote);
    }
}

#define TRACE_QEMU_RDMA_POLL_OTHER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_poll_other(const char * compstr, int64_t comp, int left)
{
}

static inline void trace_qemu_rdma_poll_other(const char * compstr, int64_t comp, int left)
{
    if (true) {
        _nocheck__trace_qemu_rdma_poll_other(compstr, comp, left);
    }
}

#define TRACE_QEMU_RDMA_POST_SEND_CONTROL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_post_send_control(const char * desc)
{
}

static inline void trace_qemu_rdma_post_send_control(const char * desc)
{
    if (true) {
        _nocheck__trace_qemu_rdma_post_send_control(desc);
    }
}

#define TRACE_QEMU_RDMA_REGISTER_AND_GET_KEYS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_register_and_get_keys(uint64_t len, void * start)
{
}

static inline void trace_qemu_rdma_register_and_get_keys(uint64_t len, void * start)
{
    if (true) {
        _nocheck__trace_qemu_rdma_register_and_get_keys(len, start);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_COMPRESS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_compress(int64_t length, int index, int64_t offset)
{
}

static inline void trace_qemu_rdma_registration_handle_compress(int64_t length, int index, int64_t offset)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_compress(length, index, offset);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_FINISHED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_finished(void)
{
}

static inline void trace_qemu_rdma_registration_handle_finished(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_finished();
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_ram_blocks(void)
{
}

static inline void trace_qemu_rdma_registration_handle_ram_blocks(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_ram_blocks();
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_RAM_BLOCKS_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_ram_blocks_loop(const char * name, uint64_t offset, uint64_t length, void * local_host_addr, unsigned int src_index)
{
}

static inline void trace_qemu_rdma_registration_handle_ram_blocks_loop(const char * name, uint64_t offset, uint64_t length, void * local_host_addr, unsigned int src_index)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_ram_blocks_loop(name, offset, length, local_host_addr, src_index);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_register(int requests)
{
}

static inline void trace_qemu_rdma_registration_handle_register(int requests)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_register(requests);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_register_loop(int req, int index, uint64_t addr, uint64_t chunks)
{
}

static inline void trace_qemu_rdma_registration_handle_register_loop(int req, int index, uint64_t addr, uint64_t chunks)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_register_loop(req, index, addr, chunks);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_REGISTER_RKEY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_register_rkey(int rkey)
{
}

static inline void trace_qemu_rdma_registration_handle_register_rkey(int rkey)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_register_rkey(rkey);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_unregister(int requests)
{
}

static inline void trace_qemu_rdma_registration_handle_unregister(int requests)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_unregister(requests);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_unregister_loop(int count, int index, uint64_t chunk)
{
}

static inline void trace_qemu_rdma_registration_handle_unregister_loop(int count, int index, uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_unregister_loop(count, index, chunk);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_UNREGISTER_SUCCESS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_unregister_success(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_registration_handle_unregister_success(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_unregister_success(chunk);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_HANDLE_WAIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_handle_wait(void)
{
}

static inline void trace_qemu_rdma_registration_handle_wait(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_handle_wait();
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_start(uint64_t flags)
{
}

static inline void trace_qemu_rdma_registration_start(uint64_t flags)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_start(flags);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_STOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_stop(uint64_t flags)
{
}

static inline void trace_qemu_rdma_registration_stop(uint64_t flags)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_stop(flags);
    }
}

#define TRACE_QEMU_RDMA_REGISTRATION_STOP_RAM_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_registration_stop_ram(void)
{
}

static inline void trace_qemu_rdma_registration_stop_ram(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_registration_stop_ram();
    }
}

#define TRACE_QEMU_RDMA_RESOLVE_HOST_TRYING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_resolve_host_trying(const char * host, const char * ip)
{
}

static inline void trace_qemu_rdma_resolve_host_trying(const char * host, const char * ip)
{
    if (true) {
        _nocheck__trace_qemu_rdma_resolve_host_trying(host, ip);
    }
}

#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_APPEND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_signal_unregister_append(uint64_t chunk, int pos)
{
}

static inline void trace_qemu_rdma_signal_unregister_append(uint64_t chunk, int pos)
{
    if (true) {
        _nocheck__trace_qemu_rdma_signal_unregister_append(chunk, pos);
    }
}

#define TRACE_QEMU_RDMA_SIGNAL_UNREGISTER_ALREADY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_signal_unregister_already(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_signal_unregister_already(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_signal_unregister_already(chunk);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_INFLIGHT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_inflight(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_unregister_waiting_inflight(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_inflight(chunk);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_PROC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_proc(uint64_t chunk, int pos)
{
}

static inline void trace_qemu_rdma_unregister_waiting_proc(uint64_t chunk, int pos)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_proc(chunk, pos);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_SEND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_send(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_unregister_waiting_send(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_send(chunk);
    }
}

#define TRACE_QEMU_RDMA_UNREGISTER_WAITING_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_unregister_waiting_complete(uint64_t chunk)
{
}

static inline void trace_qemu_rdma_unregister_waiting_complete(uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_unregister_waiting_complete(chunk);
    }
}

#define TRACE_QEMU_RDMA_WRITE_FLUSH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_flush(int sent)
{
}

static inline void trace_qemu_rdma_write_flush(int sent)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_flush(sent);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_BLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_block(int count, int block, uint64_t chunk, uint64_t current, uint64_t len, int nb_sent, int nb_chunks)
{
}

static inline void trace_qemu_rdma_write_one_block(int count, int block, uint64_t chunk, uint64_t current, uint64_t len, int nb_sent, int nb_chunks)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_block(count, block, chunk, current, len, nb_sent, nb_chunks);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_POST_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_post(uint64_t chunk, long addr, long remote, uint32_t len)
{
}

static inline void trace_qemu_rdma_write_one_post(uint64_t chunk, long addr, long remote, uint32_t len)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_post(chunk, addr, remote, len);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_QUEUE_FULL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_queue_full(void)
{
}

static inline void trace_qemu_rdma_write_one_queue_full(void)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_queue_full();
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_RECVREGRES_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_recvregres(int mykey, int theirkey, uint64_t chunk)
{
}

static inline void trace_qemu_rdma_write_one_recvregres(int mykey, int theirkey, uint64_t chunk)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_recvregres(mykey, theirkey, chunk);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_SENDREG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_sendreg(uint64_t chunk, int len, int index, int64_t offset)
{
}

static inline void trace_qemu_rdma_write_one_sendreg(uint64_t chunk, int len, int index, int64_t offset)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_sendreg(chunk, len, index, offset);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_TOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_top(uint64_t chunks, uint64_t size)
{
}

static inline void trace_qemu_rdma_write_one_top(uint64_t chunks, uint64_t size)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_top(chunks, size);
    }
}

#define TRACE_QEMU_RDMA_WRITE_ONE_ZERO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_rdma_write_one_zero(uint64_t chunk, int len, int index, int64_t offset)
{
}

static inline void trace_qemu_rdma_write_one_zero(uint64_t chunk, int len, int index, int64_t offset)
{
    if (true) {
        _nocheck__trace_qemu_rdma_write_one_zero(chunk, len, index, offset);
    }
}

#define TRACE_RDMA_ADD_BLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_add_block(const char * block_name, int block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
}

static inline void trace_rdma_add_block(const char * block_name, int block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
    if (true) {
        _nocheck__trace_rdma_add_block(block_name, block, addr, offset, len, end, bits, chunks);
    }
}

#define TRACE_RDMA_BLOCK_NOTIFICATION_HANDLE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_block_notification_handle(const char * name, int index)
{
}

static inline void trace_rdma_block_notification_handle(const char * name, int index)
{
    if (true) {
        _nocheck__trace_rdma_block_notification_handle(name, index);
    }
}

#define TRACE_RDMA_DELETE_BLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_delete_block(void * block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
}

static inline void trace_rdma_delete_block(void * block, uint64_t addr, uint64_t offset, uint64_t len, uint64_t end, uint64_t bits, int chunks)
{
    if (true) {
        _nocheck__trace_rdma_delete_block(block, addr, offset, len, end, bits, chunks);
    }
}

#define TRACE_RDMA_START_INCOMING_MIGRATION_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_start_incoming_migration(void)
{
}

static inline void trace_rdma_start_incoming_migration(void)
{
    if (true) {
        _nocheck__trace_rdma_start_incoming_migration();
    }
}

#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_DEST_INIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_start_incoming_migration_after_dest_init(void)
{
}

static inline void trace_rdma_start_incoming_migration_after_dest_init(void)
{
    if (true) {
        _nocheck__trace_rdma_start_incoming_migration_after_dest_init();
    }
}

#define TRACE_RDMA_START_INCOMING_MIGRATION_AFTER_RDMA_LISTEN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_start_incoming_migration_after_rdma_listen(void)
{
}

static inline void trace_rdma_start_incoming_migration_after_rdma_listen(void)
{
    if (true) {
        _nocheck__trace_rdma_start_incoming_migration_after_rdma_listen();
    }
}

#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_CONNECT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_start_outgoing_migration_after_rdma_connect(void)
{
}

static inline void trace_rdma_start_outgoing_migration_after_rdma_connect(void)
{
    if (true) {
        _nocheck__trace_rdma_start_outgoing_migration_after_rdma_connect();
    }
}

#define TRACE_RDMA_START_OUTGOING_MIGRATION_AFTER_RDMA_SOURCE_INIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rdma_start_outgoing_migration_after_rdma_source_init(void)
{
}

static inline void trace_rdma_start_outgoing_migration_after_rdma_source_init(void)
{
    if (true) {
        _nocheck__trace_rdma_start_outgoing_migration_after_rdma_source_init();
    }
}

#define TRACE_POSTCOPY_DISCARD_SEND_FINISH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_discard_send_finish(const char * ramblock, int nwords, int ncmds)
{
}

static inline void trace_postcopy_discard_send_finish(const char * ramblock, int nwords, int ncmds)
{
    if (true) {
        _nocheck__trace_postcopy_discard_send_finish(ramblock, nwords, ncmds);
    }
}

#define TRACE_POSTCOPY_DISCARD_SEND_RANGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_discard_send_range(const char * ramblock, unsigned long start, unsigned long length)
{
}

static inline void trace_postcopy_discard_send_range(const char * ramblock, unsigned long start, unsigned long length)
{
    if (true) {
        _nocheck__trace_postcopy_discard_send_range(ramblock, start, length);
    }
}

#define TRACE_POSTCOPY_CLEANUP_RANGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_cleanup_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
}

static inline void trace_postcopy_cleanup_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (true) {
        _nocheck__trace_postcopy_cleanup_range(ramblock, host_addr, offset, length);
    }
}

#define TRACE_POSTCOPY_INIT_RANGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_init_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
}

static inline void trace_postcopy_init_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (true) {
        _nocheck__trace_postcopy_init_range(ramblock, host_addr, offset, length);
    }
}

#define TRACE_POSTCOPY_NHP_RANGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_nhp_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
}

static inline void trace_postcopy_nhp_range(const char * ramblock, void * host_addr, size_t offset, size_t length)
{
    if (true) {
        _nocheck__trace_postcopy_nhp_range(ramblock, host_addr, offset, length);
    }
}

#define TRACE_POSTCOPY_PLACE_PAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_place_page(void * host_addr)
{
}

static inline void trace_postcopy_place_page(void * host_addr)
{
    if (true) {
        _nocheck__trace_postcopy_place_page(host_addr);
    }
}

#define TRACE_POSTCOPY_PLACE_PAGE_ZERO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_place_page_zero(void * host_addr)
{
}

static inline void trace_postcopy_place_page_zero(void * host_addr)
{
    if (true) {
        _nocheck__trace_postcopy_place_page_zero(host_addr);
    }
}

#define TRACE_POSTCOPY_RAM_ENABLE_NOTIFY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_enable_notify(void)
{
}

static inline void trace_postcopy_ram_enable_notify(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_enable_notify();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_ENTRY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_entry(void)
{
}

static inline void trace_postcopy_ram_fault_thread_entry(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_entry();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_EXIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_exit(void)
{
}

static inline void trace_postcopy_ram_fault_thread_exit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_exit();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_CORE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_fds_core(int baseufd, int quitfd)
{
}

static inline void trace_postcopy_ram_fault_thread_fds_core(int baseufd, int quitfd)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_fds_core(baseufd, quitfd);
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_FDS_EXTRA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_fds_extra(size_t index, const char * name, int fd)
{
}

static inline void trace_postcopy_ram_fault_thread_fds_extra(size_t index, const char * name, int fd)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_fds_extra(index, name, fd);
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_QUIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_quit(void)
{
}

static inline void trace_postcopy_ram_fault_thread_quit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_quit();
    }
}

#define TRACE_POSTCOPY_RAM_FAULT_THREAD_REQUEST_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_fault_thread_request(uint64_t hostaddr, const char * ramblock, size_t offset)
{
}

static inline void trace_postcopy_ram_fault_thread_request(uint64_t hostaddr, const char * ramblock, size_t offset)
{
    if (true) {
        _nocheck__trace_postcopy_ram_fault_thread_request(hostaddr, ramblock, offset);
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_CLOSEUF_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_closeuf(void)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_closeuf(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_closeuf();
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_ENTRY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_entry(void)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_entry(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_entry();
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_EXIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_exit(void)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_exit(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_exit();
    }
}

#define TRACE_POSTCOPY_RAM_INCOMING_CLEANUP_JOIN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_ram_incoming_cleanup_join(void)
{
}

static inline void trace_postcopy_ram_incoming_cleanup_join(void)
{
    if (true) {
        _nocheck__trace_postcopy_ram_incoming_cleanup_join();
    }
}

#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_request_shared_page(const char * sharer, const char * rb, uint64_t rb_offset)
{
}

static inline void trace_postcopy_request_shared_page(const char * sharer, const char * rb, uint64_t rb_offset)
{
    if (true) {
        _nocheck__trace_postcopy_request_shared_page(sharer, rb, rb_offset);
    }
}

#define TRACE_POSTCOPY_REQUEST_SHARED_PAGE_PRESENT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_request_shared_page_present(const char * sharer, const char * rb, uint64_t rb_offset)
{
}

static inline void trace_postcopy_request_shared_page_present(const char * sharer, const char * rb, uint64_t rb_offset)
{
    if (true) {
        _nocheck__trace_postcopy_request_shared_page_present(sharer, rb, rb_offset);
    }
}

#define TRACE_POSTCOPY_WAKE_SHARED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_postcopy_wake_shared(uint64_t client_addr, const char * rb)
{
}

static inline void trace_postcopy_wake_shared(uint64_t client_addr, const char * rb)
{
    if (true) {
        _nocheck__trace_postcopy_wake_shared(client_addr, rb);
    }
}

#define TRACE_SAVE_XBZRLE_PAGE_SKIPPING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_save_xbzrle_page_skipping(void)
{
}

static inline void trace_save_xbzrle_page_skipping(void)
{
    if (true) {
        _nocheck__trace_save_xbzrle_page_skipping();
    }
}

#define TRACE_SAVE_XBZRLE_PAGE_OVERFLOW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_save_xbzrle_page_overflow(void)
{
}

static inline void trace_save_xbzrle_page_overflow(void)
{
    if (true) {
        _nocheck__trace_save_xbzrle_page_overflow();
    }
}

#define TRACE_RAM_SAVE_ITERATE_BIG_WAIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_save_iterate_big_wait(uint64_t milliconds, int iterations)
{
}

static inline void trace_ram_save_iterate_big_wait(uint64_t milliconds, int iterations)
{
    if (true) {
        _nocheck__trace_ram_save_iterate_big_wait(milliconds, iterations);
    }
}

#define TRACE_RAM_LOAD_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ram_load_complete(int ret, uint64_t seq_iter)
{
}

static inline void trace_ram_load_complete(int ret, uint64_t seq_iter)
{
    if (true) {
        _nocheck__trace_ram_load_complete(ret, seq_iter);
    }
}

#define TRACE_MIGRATION_EXEC_OUTGOING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_exec_outgoing(const char * cmd)
{
}

static inline void trace_migration_exec_outgoing(const char * cmd)
{
    if (true) {
        _nocheck__trace_migration_exec_outgoing(cmd);
    }
}

#define TRACE_MIGRATION_EXEC_INCOMING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_exec_incoming(const char * cmd)
{
}

static inline void trace_migration_exec_incoming(const char * cmd)
{
    if (true) {
        _nocheck__trace_migration_exec_incoming(cmd);
    }
}

#define TRACE_MIGRATION_FD_OUTGOING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_fd_outgoing(int fd)
{
}

static inline void trace_migration_fd_outgoing(int fd)
{
    if (true) {
        _nocheck__trace_migration_fd_outgoing(fd);
    }
}

#define TRACE_MIGRATION_FD_INCOMING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_fd_incoming(int fd)
{
}

static inline void trace_migration_fd_incoming(int fd)
{
    if (true) {
        _nocheck__trace_migration_fd_incoming(fd);
    }
}

#define TRACE_MIGRATION_SOCKET_INCOMING_ACCEPTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_socket_incoming_accepted(void)
{
}

static inline void trace_migration_socket_incoming_accepted(void)
{
    if (true) {
        _nocheck__trace_migration_socket_incoming_accepted();
    }
}

#define TRACE_MIGRATION_SOCKET_OUTGOING_CONNECTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_socket_outgoing_connected(const char * hostname)
{
}

static inline void trace_migration_socket_outgoing_connected(const char * hostname)
{
    if (true) {
        _nocheck__trace_migration_socket_outgoing_connected(hostname);
    }
}

#define TRACE_MIGRATION_SOCKET_OUTGOING_ERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_socket_outgoing_error(const char * err)
{
}

static inline void trace_migration_socket_outgoing_error(const char * err)
{
    if (true) {
        _nocheck__trace_migration_socket_outgoing_error(err);
    }
}

#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_tls_outgoing_handshake_start(const char * hostname)
{
}

static inline void trace_migration_tls_outgoing_handshake_start(const char * hostname)
{
    if (true) {
        _nocheck__trace_migration_tls_outgoing_handshake_start(hostname);
    }
}

#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_ERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_tls_outgoing_handshake_error(const char * err)
{
}

static inline void trace_migration_tls_outgoing_handshake_error(const char * err)
{
    if (true) {
        _nocheck__trace_migration_tls_outgoing_handshake_error(err);
    }
}

#define TRACE_MIGRATION_TLS_OUTGOING_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_tls_outgoing_handshake_complete(void)
{
}

static inline void trace_migration_tls_outgoing_handshake_complete(void)
{
    if (true) {
        _nocheck__trace_migration_tls_outgoing_handshake_complete();
    }
}

#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_tls_incoming_handshake_start(void)
{
}

static inline void trace_migration_tls_incoming_handshake_start(void)
{
    if (true) {
        _nocheck__trace_migration_tls_incoming_handshake_start();
    }
}

#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_ERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_tls_incoming_handshake_error(const char * err)
{
}

static inline void trace_migration_tls_incoming_handshake_error(const char * err)
{
    if (true) {
        _nocheck__trace_migration_tls_incoming_handshake_error(err);
    }
}

#define TRACE_MIGRATION_TLS_INCOMING_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_migration_tls_incoming_handshake_complete(void)
{
}

static inline void trace_migration_tls_incoming_handshake_complete(void)
{
    if (true) {
        _nocheck__trace_migration_tls_incoming_handshake_complete();
    }
}

#define TRACE_COLO_VM_STATE_CHANGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_colo_vm_state_change(const char * old, const char * new)
{
}

static inline void trace_colo_vm_state_change(const char * old, const char * new)
{
    if (true) {
        _nocheck__trace_colo_vm_state_change(old, new);
    }
}

#define TRACE_COLO_SEND_MESSAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_colo_send_message(const char * msg)
{
}

static inline void trace_colo_send_message(const char * msg)
{
    if (true) {
        _nocheck__trace_colo_send_message(msg);
    }
}

#define TRACE_COLO_RECEIVE_MESSAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_colo_receive_message(const char * msg)
{
}

static inline void trace_colo_receive_message(const char * msg)
{
    if (true) {
        _nocheck__trace_colo_receive_message(msg);
    }
}

#define TRACE_COLO_FAILOVER_SET_STATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_colo_failover_set_state(const char * new_state)
{
}

static inline void trace_colo_failover_set_state(const char * new_state)
{
    if (true) {
        _nocheck__trace_colo_failover_set_state(new_state);
    }
}

#define TRACE_SEND_BITMAP_HEADER_ENTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_send_bitmap_header_enter(void)
{
}

static inline void trace_send_bitmap_header_enter(void)
{
    if (true) {
        _nocheck__trace_send_bitmap_header_enter();
    }
}

#define TRACE_SEND_BITMAP_BITS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_send_bitmap_bits(uint32_t flags, uint64_t start_sector, uint32_t nr_sectors, uint64_t data_size)
{
}

static inline void trace_send_bitmap_bits(uint32_t flags, uint64_t start_sector, uint32_t nr_sectors, uint64_t data_size)
{
    if (true) {
        _nocheck__trace_send_bitmap_bits(flags, start_sector, nr_sectors, data_size);
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_ITERATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_iterate(int in_postcopy)
{
}

static inline void trace_dirty_bitmap_save_iterate(int in_postcopy)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_iterate(in_postcopy);
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_ENTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_complete_enter(void)
{
}

static inline void trace_dirty_bitmap_save_complete_enter(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_complete_enter();
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_COMPLETE_FINISH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_complete_finish(void)
{
}

static inline void trace_dirty_bitmap_save_complete_finish(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_complete_finish();
    }
}

#define TRACE_DIRTY_BITMAP_SAVE_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_save_pending(uint64_t pending, uint64_t max_size)
{
}

static inline void trace_dirty_bitmap_save_pending(uint64_t pending, uint64_t max_size)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_save_pending(pending, max_size);
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_complete(void)
{
}

static inline void trace_dirty_bitmap_load_complete(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_complete();
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_BITS_ENTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_bits_enter(uint64_t first_sector, uint32_t nr_sectors)
{
}

static inline void trace_dirty_bitmap_load_bits_enter(uint64_t first_sector, uint32_t nr_sectors)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_bits_enter(first_sector, nr_sectors);
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_BITS_ZEROES_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_bits_zeroes(void)
{
}

static inline void trace_dirty_bitmap_load_bits_zeroes(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_bits_zeroes();
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_HEADER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_header(uint32_t flags)
{
}

static inline void trace_dirty_bitmap_load_header(uint32_t flags)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_header(flags);
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_ENTER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_enter(void)
{
}

static inline void trace_dirty_bitmap_load_enter(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_enter();
    }
}

#define TRACE_DIRTY_BITMAP_LOAD_SUCCESS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_dirty_bitmap_load_success(void)
{
}

static inline void trace_dirty_bitmap_load_success(void)
{
    if (true) {
        _nocheck__trace_dirty_bitmap_load_success();
    }
}
#endif /* TRACE_MIGRATION_GENERATED_TRACERS_H */
