/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_TARGET_ARM_GENERATED_TRACERS_H
#define TRACE_TARGET_ARM_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_ARM_GT_RECALC_EVENT;
extern TraceEvent _TRACE_ARM_GT_RECALC_DISABLED_EVENT;
extern TraceEvent _TRACE_ARM_GT_CVAL_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_TVAL_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_CTL_WRITE_EVENT;
extern TraceEvent _TRACE_ARM_GT_IMASK_TOGGLE_EVENT;
extern TraceEvent _TRACE_ARM_GT_CNTVOFF_WRITE_EVENT;
extern uint16_t _TRACE_ARM_GT_RECALC_DSTATE;
extern uint16_t _TRACE_ARM_GT_RECALC_DISABLED_DSTATE;
extern uint16_t _TRACE_ARM_GT_CVAL_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_TVAL_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_CTL_WRITE_DSTATE;
extern uint16_t _TRACE_ARM_GT_IMASK_TOGGLE_DSTATE;
extern uint16_t _TRACE_ARM_GT_CNTVOFF_WRITE_DSTATE;
#define TRACE_ARM_GT_RECALC_ENABLED 1
#define TRACE_ARM_GT_RECALC_DISABLED_ENABLED 1
#define TRACE_ARM_GT_CVAL_WRITE_ENABLED 1
#define TRACE_ARM_GT_TVAL_WRITE_ENABLED 1
#define TRACE_ARM_GT_CTL_WRITE_ENABLED 1
#define TRACE_ARM_GT_IMASK_TOGGLE_ENABLED 1
#define TRACE_ARM_GT_CNTVOFF_WRITE_ENABLED 1

#define TRACE_ARM_GT_RECALC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_arm_gt_recalc(int timer, int irqstate, uint64_t nexttick)
{
}

static inline void trace_arm_gt_recalc(int timer, int irqstate, uint64_t nexttick)
{
    if (true) {
        _nocheck__trace_arm_gt_recalc(timer, irqstate, nexttick);
    }
}

#define TRACE_ARM_GT_RECALC_DISABLED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_arm_gt_recalc_disabled(int timer)
{
}

static inline void trace_arm_gt_recalc_disabled(int timer)
{
    if (true) {
        _nocheck__trace_arm_gt_recalc_disabled(timer);
    }
}

#define TRACE_ARM_GT_CVAL_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_arm_gt_cval_write(int timer, uint64_t value)
{
}

static inline void trace_arm_gt_cval_write(int timer, uint64_t value)
{
    if (true) {
        _nocheck__trace_arm_gt_cval_write(timer, value);
    }
}

#define TRACE_ARM_GT_TVAL_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_arm_gt_tval_write(int timer, uint64_t value)
{
}

static inline void trace_arm_gt_tval_write(int timer, uint64_t value)
{
    if (true) {
        _nocheck__trace_arm_gt_tval_write(timer, value);
    }
}

#define TRACE_ARM_GT_CTL_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_arm_gt_ctl_write(int timer, uint64_t value)
{
}

static inline void trace_arm_gt_ctl_write(int timer, uint64_t value)
{
    if (true) {
        _nocheck__trace_arm_gt_ctl_write(timer, value);
    }
}

#define TRACE_ARM_GT_IMASK_TOGGLE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_arm_gt_imask_toggle(int timer, int irqstate)
{
}

static inline void trace_arm_gt_imask_toggle(int timer, int irqstate)
{
    if (true) {
        _nocheck__trace_arm_gt_imask_toggle(timer, irqstate);
    }
}

#define TRACE_ARM_GT_CNTVOFF_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_arm_gt_cntvoff_write(uint64_t value)
{
}

static inline void trace_arm_gt_cntvoff_write(uint64_t value)
{
    if (true) {
        _nocheck__trace_arm_gt_cntvoff_write(value);
    }
}
#endif /* TRACE_TARGET_ARM_GENERATED_TRACERS_H */
