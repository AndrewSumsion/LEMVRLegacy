/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_INPUT_GENERATED_TRACERS_H
#define TRACE_HW_INPUT_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_ADB_KBD_NO_KEY_EVENT;
extern TraceEvent _TRACE_ADB_KBD_WRITEREG_EVENT;
extern TraceEvent _TRACE_ADB_KBD_READREG_EVENT;
extern TraceEvent _TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_EVENT;
extern TraceEvent _TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_AND_HANDLER_EVENT;
extern TraceEvent _TRACE_ADB_MOUSE_FLUSH_EVENT;
extern TraceEvent _TRACE_ADB_MOUSE_WRITEREG_EVENT;
extern TraceEvent _TRACE_ADB_MOUSE_READREG_EVENT;
extern TraceEvent _TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_EVENT;
extern TraceEvent _TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_AND_HANDLER_EVENT;
extern TraceEvent _TRACE_PS2_PUT_KEYCODE_EVENT;
extern TraceEvent _TRACE_PS2_KEYBOARD_EVENT_EVENT;
extern TraceEvent _TRACE_PS2_READ_DATA_EVENT;
extern TraceEvent _TRACE_PS2_SET_LEDSTATE_EVENT;
extern TraceEvent _TRACE_PS2_RESET_KEYBOARD_EVENT;
extern TraceEvent _TRACE_PS2_WRITE_KEYBOARD_EVENT;
extern TraceEvent _TRACE_PS2_KEYBOARD_SET_TRANSLATION_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_SEND_PACKET_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_FAKE_EVENT_EVENT;
extern TraceEvent _TRACE_PS2_WRITE_MOUSE_EVENT;
extern TraceEvent _TRACE_PS2_KBD_RESET_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_RESET_EVENT;
extern TraceEvent _TRACE_PS2_KBD_INIT_EVENT;
extern TraceEvent _TRACE_PS2_MOUSE_INIT_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_MEVT_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_KEVT_EVENT;
extern TraceEvent _TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_EVENT;
extern TraceEvent _TRACE_HID_KBD_QUEUE_FULL_EVENT;
extern TraceEvent _TRACE_HID_KBD_QUEUE_EMPTY_EVENT;
extern TraceEvent _TRACE_VIRTIO_INPUT_QUEUE_FULL_EVENT;
extern uint16_t _TRACE_ADB_KBD_NO_KEY_DSTATE;
extern uint16_t _TRACE_ADB_KBD_WRITEREG_DSTATE;
extern uint16_t _TRACE_ADB_KBD_READREG_DSTATE;
extern uint16_t _TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_DSTATE;
extern uint16_t _TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_AND_HANDLER_DSTATE;
extern uint16_t _TRACE_ADB_MOUSE_FLUSH_DSTATE;
extern uint16_t _TRACE_ADB_MOUSE_WRITEREG_DSTATE;
extern uint16_t _TRACE_ADB_MOUSE_READREG_DSTATE;
extern uint16_t _TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_DSTATE;
extern uint16_t _TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_AND_HANDLER_DSTATE;
extern uint16_t _TRACE_PS2_PUT_KEYCODE_DSTATE;
extern uint16_t _TRACE_PS2_KEYBOARD_EVENT_DSTATE;
extern uint16_t _TRACE_PS2_READ_DATA_DSTATE;
extern uint16_t _TRACE_PS2_SET_LEDSTATE_DSTATE;
extern uint16_t _TRACE_PS2_RESET_KEYBOARD_DSTATE;
extern uint16_t _TRACE_PS2_WRITE_KEYBOARD_DSTATE;
extern uint16_t _TRACE_PS2_KEYBOARD_SET_TRANSLATION_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_SEND_PACKET_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_FAKE_EVENT_DSTATE;
extern uint16_t _TRACE_PS2_WRITE_MOUSE_DSTATE;
extern uint16_t _TRACE_PS2_KBD_RESET_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_RESET_DSTATE;
extern uint16_t _TRACE_PS2_KBD_INIT_DSTATE;
extern uint16_t _TRACE_PS2_MOUSE_INIT_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_MEVT_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_KEVT_DSTATE;
extern uint16_t _TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_DSTATE;
extern uint16_t _TRACE_HID_KBD_QUEUE_FULL_DSTATE;
extern uint16_t _TRACE_HID_KBD_QUEUE_EMPTY_DSTATE;
extern uint16_t _TRACE_VIRTIO_INPUT_QUEUE_FULL_DSTATE;
#define TRACE_ADB_KBD_NO_KEY_ENABLED 1
#define TRACE_ADB_KBD_WRITEREG_ENABLED 1
#define TRACE_ADB_KBD_READREG_ENABLED 1
#define TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_ENABLED 1
#define TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_AND_HANDLER_ENABLED 1
#define TRACE_ADB_MOUSE_FLUSH_ENABLED 1
#define TRACE_ADB_MOUSE_WRITEREG_ENABLED 1
#define TRACE_ADB_MOUSE_READREG_ENABLED 1
#define TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_ENABLED 1
#define TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_AND_HANDLER_ENABLED 1
#define TRACE_PS2_PUT_KEYCODE_ENABLED 1
#define TRACE_PS2_KEYBOARD_EVENT_ENABLED 1
#define TRACE_PS2_READ_DATA_ENABLED 1
#define TRACE_PS2_SET_LEDSTATE_ENABLED 1
#define TRACE_PS2_RESET_KEYBOARD_ENABLED 1
#define TRACE_PS2_WRITE_KEYBOARD_ENABLED 1
#define TRACE_PS2_KEYBOARD_SET_TRANSLATION_ENABLED 1
#define TRACE_PS2_MOUSE_SEND_PACKET_ENABLED 1
#define TRACE_PS2_MOUSE_FAKE_EVENT_ENABLED 1
#define TRACE_PS2_WRITE_MOUSE_ENABLED 1
#define TRACE_PS2_KBD_RESET_ENABLED 1
#define TRACE_PS2_MOUSE_RESET_ENABLED 1
#define TRACE_PS2_KBD_INIT_ENABLED 1
#define TRACE_PS2_MOUSE_INIT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_MEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_KEVT_ENABLED 1
#define TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_ENABLED 1
#define TRACE_HID_KBD_QUEUE_FULL_ENABLED 1
#define TRACE_HID_KBD_QUEUE_EMPTY_ENABLED 1
#define TRACE_VIRTIO_INPUT_QUEUE_FULL_ENABLED 1

#define TRACE_ADB_KBD_NO_KEY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_kbd_no_key(void)
{
}

static inline void trace_adb_kbd_no_key(void)
{
    if (true) {
        _nocheck__trace_adb_kbd_no_key();
    }
}

#define TRACE_ADB_KBD_WRITEREG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_kbd_writereg(int reg, uint8_t val)
{
}

static inline void trace_adb_kbd_writereg(int reg, uint8_t val)
{
    if (true) {
        _nocheck__trace_adb_kbd_writereg(reg, val);
    }
}

#define TRACE_ADB_KBD_READREG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_kbd_readreg(int reg, uint8_t val0, uint8_t val1)
{
}

static inline void trace_adb_kbd_readreg(int reg, uint8_t val0, uint8_t val1)
{
    if (true) {
        _nocheck__trace_adb_kbd_readreg(reg, val0, val1);
    }
}

#define TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_kbd_request_change_addr(int devaddr)
{
}

static inline void trace_adb_kbd_request_change_addr(int devaddr)
{
    if (true) {
        _nocheck__trace_adb_kbd_request_change_addr(devaddr);
    }
}

#define TRACE_ADB_KBD_REQUEST_CHANGE_ADDR_AND_HANDLER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_kbd_request_change_addr_and_handler(int devaddr, int handler)
{
}

static inline void trace_adb_kbd_request_change_addr_and_handler(int devaddr, int handler)
{
    if (true) {
        _nocheck__trace_adb_kbd_request_change_addr_and_handler(devaddr, handler);
    }
}

#define TRACE_ADB_MOUSE_FLUSH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_mouse_flush(void)
{
}

static inline void trace_adb_mouse_flush(void)
{
    if (true) {
        _nocheck__trace_adb_mouse_flush();
    }
}

#define TRACE_ADB_MOUSE_WRITEREG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_mouse_writereg(int reg, uint8_t val)
{
}

static inline void trace_adb_mouse_writereg(int reg, uint8_t val)
{
    if (true) {
        _nocheck__trace_adb_mouse_writereg(reg, val);
    }
}

#define TRACE_ADB_MOUSE_READREG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_mouse_readreg(int reg, uint8_t val0, uint8_t val1)
{
}

static inline void trace_adb_mouse_readreg(int reg, uint8_t val0, uint8_t val1)
{
    if (true) {
        _nocheck__trace_adb_mouse_readreg(reg, val0, val1);
    }
}

#define TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_mouse_request_change_addr(int devaddr)
{
}

static inline void trace_adb_mouse_request_change_addr(int devaddr)
{
    if (true) {
        _nocheck__trace_adb_mouse_request_change_addr(devaddr);
    }
}

#define TRACE_ADB_MOUSE_REQUEST_CHANGE_ADDR_AND_HANDLER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_adb_mouse_request_change_addr_and_handler(int devaddr, int handler)
{
}

static inline void trace_adb_mouse_request_change_addr_and_handler(int devaddr, int handler)
{
    if (true) {
        _nocheck__trace_adb_mouse_request_change_addr_and_handler(devaddr, handler);
    }
}

#define TRACE_PS2_PUT_KEYCODE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_put_keycode(void * opaque, int keycode)
{
}

static inline void trace_ps2_put_keycode(void * opaque, int keycode)
{
    if (true) {
        _nocheck__trace_ps2_put_keycode(opaque, keycode);
    }
}

#define TRACE_PS2_KEYBOARD_EVENT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_keyboard_event(void * opaque, int qcode, int down, unsigned int modifier, unsigned int modifiers)
{
}

static inline void trace_ps2_keyboard_event(void * opaque, int qcode, int down, unsigned int modifier, unsigned int modifiers)
{
    if (true) {
        _nocheck__trace_ps2_keyboard_event(opaque, qcode, down, modifier, modifiers);
    }
}

#define TRACE_PS2_READ_DATA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_read_data(void * opaque)
{
}

static inline void trace_ps2_read_data(void * opaque)
{
    if (true) {
        _nocheck__trace_ps2_read_data(opaque);
    }
}

#define TRACE_PS2_SET_LEDSTATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_set_ledstate(void * s, int ledstate)
{
}

static inline void trace_ps2_set_ledstate(void * s, int ledstate)
{
    if (true) {
        _nocheck__trace_ps2_set_ledstate(s, ledstate);
    }
}

#define TRACE_PS2_RESET_KEYBOARD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_reset_keyboard(void * s)
{
}

static inline void trace_ps2_reset_keyboard(void * s)
{
    if (true) {
        _nocheck__trace_ps2_reset_keyboard(s);
    }
}

#define TRACE_PS2_WRITE_KEYBOARD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_write_keyboard(void * opaque, int val)
{
}

static inline void trace_ps2_write_keyboard(void * opaque, int val)
{
    if (true) {
        _nocheck__trace_ps2_write_keyboard(opaque, val);
    }
}

#define TRACE_PS2_KEYBOARD_SET_TRANSLATION_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_keyboard_set_translation(void * opaque, int mode)
{
}

static inline void trace_ps2_keyboard_set_translation(void * opaque, int mode)
{
    if (true) {
        _nocheck__trace_ps2_keyboard_set_translation(opaque, mode);
    }
}

#define TRACE_PS2_MOUSE_SEND_PACKET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_mouse_send_packet(void * s, int dx1, int dy1, int dz1, int b)
{
}

static inline void trace_ps2_mouse_send_packet(void * s, int dx1, int dy1, int dz1, int b)
{
    if (true) {
        _nocheck__trace_ps2_mouse_send_packet(s, dx1, dy1, dz1, b);
    }
}

#define TRACE_PS2_MOUSE_FAKE_EVENT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_mouse_fake_event(void * opaque)
{
}

static inline void trace_ps2_mouse_fake_event(void * opaque)
{
    if (true) {
        _nocheck__trace_ps2_mouse_fake_event(opaque);
    }
}

#define TRACE_PS2_WRITE_MOUSE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_write_mouse(void * opaque, int val)
{
}

static inline void trace_ps2_write_mouse(void * opaque, int val)
{
    if (true) {
        _nocheck__trace_ps2_write_mouse(opaque, val);
    }
}

#define TRACE_PS2_KBD_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_kbd_reset(void * opaque)
{
}

static inline void trace_ps2_kbd_reset(void * opaque)
{
    if (true) {
        _nocheck__trace_ps2_kbd_reset(opaque);
    }
}

#define TRACE_PS2_MOUSE_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_mouse_reset(void * opaque)
{
}

static inline void trace_ps2_mouse_reset(void * opaque)
{
    if (true) {
        _nocheck__trace_ps2_mouse_reset(opaque);
    }
}

#define TRACE_PS2_KBD_INIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_kbd_init(void * s)
{
}

static inline void trace_ps2_kbd_init(void * s)
{
    if (true) {
        _nocheck__trace_ps2_kbd_init(s);
    }
}

#define TRACE_PS2_MOUSE_INIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ps2_mouse_init(void * s)
{
}

static inline void trace_ps2_mouse_init(void * s)
{
    if (true) {
        _nocheck__trace_ps2_mouse_init(s);
    }
}

#define TRACE_MILKYMIST_SOFTUSB_MEMORY_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_milkymist_softusb_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_softusb_memory_read(addr, value);
    }
}

#define TRACE_MILKYMIST_SOFTUSB_MEMORY_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_milkymist_softusb_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_softusb_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_softusb_memory_write(addr, value);
    }
}

#define TRACE_MILKYMIST_SOFTUSB_MEVT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_milkymist_softusb_mevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_mevt(uint8_t m)
{
    if (true) {
        _nocheck__trace_milkymist_softusb_mevt(m);
    }
}

#define TRACE_MILKYMIST_SOFTUSB_KEVT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_milkymist_softusb_kevt(uint8_t m)
{
}

static inline void trace_milkymist_softusb_kevt(uint8_t m)
{
    if (true) {
        _nocheck__trace_milkymist_softusb_kevt(m);
    }
}

#define TRACE_MILKYMIST_SOFTUSB_PULSE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_milkymist_softusb_pulse_irq(void)
{
}

static inline void trace_milkymist_softusb_pulse_irq(void)
{
    if (true) {
        _nocheck__trace_milkymist_softusb_pulse_irq();
    }
}

#define TRACE_HID_KBD_QUEUE_FULL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hid_kbd_queue_full(void)
{
}

static inline void trace_hid_kbd_queue_full(void)
{
    if (true) {
        _nocheck__trace_hid_kbd_queue_full();
    }
}

#define TRACE_HID_KBD_QUEUE_EMPTY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_hid_kbd_queue_empty(void)
{
}

static inline void trace_hid_kbd_queue_empty(void)
{
    if (true) {
        _nocheck__trace_hid_kbd_queue_empty();
    }
}

#define TRACE_VIRTIO_INPUT_QUEUE_FULL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_virtio_input_queue_full(void)
{
}

static inline void trace_virtio_input_queue_full(void)
{
    if (true) {
        _nocheck__trace_virtio_input_queue_full();
    }
}
#endif /* TRACE_HW_INPUT_GENERATED_TRACERS_H */
