/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_IDE_GENERATED_TRACERS_H
#define TRACE_HW_IDE_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_IDE_IOPORT_READ_EVENT;
extern TraceEvent _TRACE_IDE_IOPORT_WRITE_EVENT;
extern TraceEvent _TRACE_IDE_STATUS_READ_EVENT;
extern TraceEvent _TRACE_IDE_CMD_WRITE_EVENT;
extern TraceEvent _TRACE_IDE_DATA_READW_EVENT;
extern TraceEvent _TRACE_IDE_DATA_WRITEW_EVENT;
extern TraceEvent _TRACE_IDE_DATA_READL_EVENT;
extern TraceEvent _TRACE_IDE_DATA_WRITEL_EVENT;
extern TraceEvent _TRACE_IDE_EXEC_CMD_EVENT;
extern TraceEvent _TRACE_IDE_CANCEL_DMA_SYNC_BUFFERED_EVENT;
extern TraceEvent _TRACE_IDE_CANCEL_DMA_SYNC_REMAINING_EVENT;
extern TraceEvent _TRACE_IDE_SECTOR_READ_EVENT;
extern TraceEvent _TRACE_IDE_SECTOR_WRITE_EVENT;
extern TraceEvent _TRACE_IDE_RESET_EVENT;
extern TraceEvent _TRACE_IDE_BUS_RESET_AIO_EVENT;
extern TraceEvent _TRACE_IDE_DMA_CB_EVENT;
extern TraceEvent _TRACE_BMDMA_READ_CMD646_EVENT;
extern TraceEvent _TRACE_BMDMA_WRITE_CMD646_EVENT;
extern TraceEvent _TRACE_BMDMA_RESET_EVENT;
extern TraceEvent _TRACE_BMDMA_CMD_WRITEB_EVENT;
extern TraceEvent _TRACE_BMDMA_ADDR_READ_EVENT;
extern TraceEvent _TRACE_BMDMA_ADDR_WRITE_EVENT;
extern TraceEvent _TRACE_BMDMA_READ_EVENT;
extern TraceEvent _TRACE_BMDMA_WRITE_EVENT;
extern TraceEvent _TRACE_SII3112_READ_EVENT;
extern TraceEvent _TRACE_SII3112_WRITE_EVENT;
extern TraceEvent _TRACE_SII3112_SET_IRQ_EVENT;
extern TraceEvent _TRACE_BMDMA_READ_VIA_EVENT;
extern TraceEvent _TRACE_BMDMA_WRITE_VIA_EVENT;
extern TraceEvent _TRACE_CD_READ_SECTOR_SYNC_EVENT;
extern TraceEvent _TRACE_CD_READ_SECTOR_CB_EVENT;
extern TraceEvent _TRACE_CD_READ_SECTOR_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_ERROR_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_REPLY_END_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_REPLY_END_EOT_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_REPLY_END_BCL_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_REPLY_END_NEW_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_CHECK_STATUS_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_READ_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_READ_DMA_CB_AIO_EVENT;
extern TraceEvent _TRACE_IDE_ATAPI_CMD_PACKET_EVENT;
extern TraceEvent _TRACE_AHCI_PORT_READ_EVENT;
extern TraceEvent _TRACE_AHCI_IRQ_RAISE_EVENT;
extern TraceEvent _TRACE_AHCI_IRQ_LOWER_EVENT;
extern TraceEvent _TRACE_AHCI_CHECK_IRQ_EVENT;
extern TraceEvent _TRACE_AHCI_TRIGGER_IRQ_EVENT;
extern TraceEvent _TRACE_AHCI_PORT_WRITE_EVENT;
extern TraceEvent _TRACE_AHCI_MEM_READ_32_EVENT;
extern TraceEvent _TRACE_AHCI_MEM_READ_EVENT;
extern TraceEvent _TRACE_AHCI_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_AHCI_MEM_WRITE_UNKNOWN_EVENT;
extern TraceEvent _TRACE_AHCI_SET_SIGNATURE_EVENT;
extern TraceEvent _TRACE_AHCI_RESET_PORT_EVENT;
extern TraceEvent _TRACE_AHCI_UNMAP_FIS_ADDRESS_NULL_EVENT;
extern TraceEvent _TRACE_AHCI_UNMAP_CLB_ADDRESS_NULL_EVENT;
extern TraceEvent _TRACE_AHCI_POPULATE_SGLIST_EVENT;
extern TraceEvent _TRACE_AHCI_POPULATE_SGLIST_NO_PRDTL_EVENT;
extern TraceEvent _TRACE_AHCI_POPULATE_SGLIST_NO_MAP_EVENT;
extern TraceEvent _TRACE_AHCI_POPULATE_SGLIST_SHORT_MAP_EVENT;
extern TraceEvent _TRACE_AHCI_POPULATE_SGLIST_BAD_OFFSET_EVENT;
extern TraceEvent _TRACE_NCQ_FINISH_EVENT;
extern TraceEvent _TRACE_EXECUTE_NCQ_COMMAND_READ_EVENT;
extern TraceEvent _TRACE_EXECUTE_NCQ_COMMAND_WRITE_EVENT;
extern TraceEvent _TRACE_EXECUTE_NCQ_COMMAND_UNSUP_EVENT;
extern TraceEvent _TRACE_PROCESS_NCQ_COMMAND_MISMATCH_EVENT;
extern TraceEvent _TRACE_PROCESS_NCQ_COMMAND_AUX_EVENT;
extern TraceEvent _TRACE_PROCESS_NCQ_COMMAND_PRIOICC_EVENT;
extern TraceEvent _TRACE_PROCESS_NCQ_COMMAND_FUA_EVENT;
extern TraceEvent _TRACE_PROCESS_NCQ_COMMAND_RARC_EVENT;
extern TraceEvent _TRACE_PROCESS_NCQ_COMMAND_LARGE_EVENT;
extern TraceEvent _TRACE_PROCESS_NCQ_COMMAND_EVENT;
extern TraceEvent _TRACE_HANDLE_REG_H2D_FIS_PMP_EVENT;
extern TraceEvent _TRACE_HANDLE_REG_H2D_FIS_RES_EVENT;
extern TraceEvent _TRACE_HANDLE_CMD_BUSY_EVENT;
extern TraceEvent _TRACE_HANDLE_CMD_NOLIST_EVENT;
extern TraceEvent _TRACE_HANDLE_CMD_BADPORT_EVENT;
extern TraceEvent _TRACE_HANDLE_CMD_BADFIS_EVENT;
extern TraceEvent _TRACE_HANDLE_CMD_BADMAP_EVENT;
extern TraceEvent _TRACE_HANDLE_CMD_UNHANDLED_FIS_EVENT;
extern TraceEvent _TRACE_AHCI_START_TRANSFER_EVENT;
extern TraceEvent _TRACE_AHCI_START_DMA_EVENT;
extern TraceEvent _TRACE_AHCI_DMA_PREPARE_BUF_EVENT;
extern TraceEvent _TRACE_AHCI_DMA_PREPARE_BUF_FAIL_EVENT;
extern TraceEvent _TRACE_AHCI_DMA_RW_BUF_EVENT;
extern TraceEvent _TRACE_AHCI_CMD_DONE_EVENT;
extern TraceEvent _TRACE_AHCI_RESET_EVENT;
extern TraceEvent _TRACE_ALLWINNER_AHCI_MEM_READ_EVENT;
extern TraceEvent _TRACE_ALLWINNER_AHCI_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_HANDLE_REG_H2D_FIS_DUMP_EVENT;
extern TraceEvent _TRACE_HANDLE_CMD_FIS_DUMP_EVENT;
extern uint16_t _TRACE_IDE_IOPORT_READ_DSTATE;
extern uint16_t _TRACE_IDE_IOPORT_WRITE_DSTATE;
extern uint16_t _TRACE_IDE_STATUS_READ_DSTATE;
extern uint16_t _TRACE_IDE_CMD_WRITE_DSTATE;
extern uint16_t _TRACE_IDE_DATA_READW_DSTATE;
extern uint16_t _TRACE_IDE_DATA_WRITEW_DSTATE;
extern uint16_t _TRACE_IDE_DATA_READL_DSTATE;
extern uint16_t _TRACE_IDE_DATA_WRITEL_DSTATE;
extern uint16_t _TRACE_IDE_EXEC_CMD_DSTATE;
extern uint16_t _TRACE_IDE_CANCEL_DMA_SYNC_BUFFERED_DSTATE;
extern uint16_t _TRACE_IDE_CANCEL_DMA_SYNC_REMAINING_DSTATE;
extern uint16_t _TRACE_IDE_SECTOR_READ_DSTATE;
extern uint16_t _TRACE_IDE_SECTOR_WRITE_DSTATE;
extern uint16_t _TRACE_IDE_RESET_DSTATE;
extern uint16_t _TRACE_IDE_BUS_RESET_AIO_DSTATE;
extern uint16_t _TRACE_IDE_DMA_CB_DSTATE;
extern uint16_t _TRACE_BMDMA_READ_CMD646_DSTATE;
extern uint16_t _TRACE_BMDMA_WRITE_CMD646_DSTATE;
extern uint16_t _TRACE_BMDMA_RESET_DSTATE;
extern uint16_t _TRACE_BMDMA_CMD_WRITEB_DSTATE;
extern uint16_t _TRACE_BMDMA_ADDR_READ_DSTATE;
extern uint16_t _TRACE_BMDMA_ADDR_WRITE_DSTATE;
extern uint16_t _TRACE_BMDMA_READ_DSTATE;
extern uint16_t _TRACE_BMDMA_WRITE_DSTATE;
extern uint16_t _TRACE_SII3112_READ_DSTATE;
extern uint16_t _TRACE_SII3112_WRITE_DSTATE;
extern uint16_t _TRACE_SII3112_SET_IRQ_DSTATE;
extern uint16_t _TRACE_BMDMA_READ_VIA_DSTATE;
extern uint16_t _TRACE_BMDMA_WRITE_VIA_DSTATE;
extern uint16_t _TRACE_CD_READ_SECTOR_SYNC_DSTATE;
extern uint16_t _TRACE_CD_READ_SECTOR_CB_DSTATE;
extern uint16_t _TRACE_CD_READ_SECTOR_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_ERROR_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_REPLY_END_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_REPLY_END_EOT_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_REPLY_END_BCL_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_REPLY_END_NEW_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_CHECK_STATUS_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_READ_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_READ_DMA_CB_AIO_DSTATE;
extern uint16_t _TRACE_IDE_ATAPI_CMD_PACKET_DSTATE;
extern uint16_t _TRACE_AHCI_PORT_READ_DSTATE;
extern uint16_t _TRACE_AHCI_IRQ_RAISE_DSTATE;
extern uint16_t _TRACE_AHCI_IRQ_LOWER_DSTATE;
extern uint16_t _TRACE_AHCI_CHECK_IRQ_DSTATE;
extern uint16_t _TRACE_AHCI_TRIGGER_IRQ_DSTATE;
extern uint16_t _TRACE_AHCI_PORT_WRITE_DSTATE;
extern uint16_t _TRACE_AHCI_MEM_READ_32_DSTATE;
extern uint16_t _TRACE_AHCI_MEM_READ_DSTATE;
extern uint16_t _TRACE_AHCI_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_AHCI_MEM_WRITE_UNKNOWN_DSTATE;
extern uint16_t _TRACE_AHCI_SET_SIGNATURE_DSTATE;
extern uint16_t _TRACE_AHCI_RESET_PORT_DSTATE;
extern uint16_t _TRACE_AHCI_UNMAP_FIS_ADDRESS_NULL_DSTATE;
extern uint16_t _TRACE_AHCI_UNMAP_CLB_ADDRESS_NULL_DSTATE;
extern uint16_t _TRACE_AHCI_POPULATE_SGLIST_DSTATE;
extern uint16_t _TRACE_AHCI_POPULATE_SGLIST_NO_PRDTL_DSTATE;
extern uint16_t _TRACE_AHCI_POPULATE_SGLIST_NO_MAP_DSTATE;
extern uint16_t _TRACE_AHCI_POPULATE_SGLIST_SHORT_MAP_DSTATE;
extern uint16_t _TRACE_AHCI_POPULATE_SGLIST_BAD_OFFSET_DSTATE;
extern uint16_t _TRACE_NCQ_FINISH_DSTATE;
extern uint16_t _TRACE_EXECUTE_NCQ_COMMAND_READ_DSTATE;
extern uint16_t _TRACE_EXECUTE_NCQ_COMMAND_WRITE_DSTATE;
extern uint16_t _TRACE_EXECUTE_NCQ_COMMAND_UNSUP_DSTATE;
extern uint16_t _TRACE_PROCESS_NCQ_COMMAND_MISMATCH_DSTATE;
extern uint16_t _TRACE_PROCESS_NCQ_COMMAND_AUX_DSTATE;
extern uint16_t _TRACE_PROCESS_NCQ_COMMAND_PRIOICC_DSTATE;
extern uint16_t _TRACE_PROCESS_NCQ_COMMAND_FUA_DSTATE;
extern uint16_t _TRACE_PROCESS_NCQ_COMMAND_RARC_DSTATE;
extern uint16_t _TRACE_PROCESS_NCQ_COMMAND_LARGE_DSTATE;
extern uint16_t _TRACE_PROCESS_NCQ_COMMAND_DSTATE;
extern uint16_t _TRACE_HANDLE_REG_H2D_FIS_PMP_DSTATE;
extern uint16_t _TRACE_HANDLE_REG_H2D_FIS_RES_DSTATE;
extern uint16_t _TRACE_HANDLE_CMD_BUSY_DSTATE;
extern uint16_t _TRACE_HANDLE_CMD_NOLIST_DSTATE;
extern uint16_t _TRACE_HANDLE_CMD_BADPORT_DSTATE;
extern uint16_t _TRACE_HANDLE_CMD_BADFIS_DSTATE;
extern uint16_t _TRACE_HANDLE_CMD_BADMAP_DSTATE;
extern uint16_t _TRACE_HANDLE_CMD_UNHANDLED_FIS_DSTATE;
extern uint16_t _TRACE_AHCI_START_TRANSFER_DSTATE;
extern uint16_t _TRACE_AHCI_START_DMA_DSTATE;
extern uint16_t _TRACE_AHCI_DMA_PREPARE_BUF_DSTATE;
extern uint16_t _TRACE_AHCI_DMA_PREPARE_BUF_FAIL_DSTATE;
extern uint16_t _TRACE_AHCI_DMA_RW_BUF_DSTATE;
extern uint16_t _TRACE_AHCI_CMD_DONE_DSTATE;
extern uint16_t _TRACE_AHCI_RESET_DSTATE;
extern uint16_t _TRACE_ALLWINNER_AHCI_MEM_READ_DSTATE;
extern uint16_t _TRACE_ALLWINNER_AHCI_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_HANDLE_REG_H2D_FIS_DUMP_DSTATE;
extern uint16_t _TRACE_HANDLE_CMD_FIS_DUMP_DSTATE;
#define TRACE_IDE_IOPORT_READ_ENABLED 1
#define TRACE_IDE_IOPORT_WRITE_ENABLED 1
#define TRACE_IDE_STATUS_READ_ENABLED 1
#define TRACE_IDE_CMD_WRITE_ENABLED 1
#define TRACE_IDE_DATA_READW_ENABLED 1
#define TRACE_IDE_DATA_WRITEW_ENABLED 1
#define TRACE_IDE_DATA_READL_ENABLED 1
#define TRACE_IDE_DATA_WRITEL_ENABLED 1
#define TRACE_IDE_EXEC_CMD_ENABLED 1
#define TRACE_IDE_CANCEL_DMA_SYNC_BUFFERED_ENABLED 1
#define TRACE_IDE_CANCEL_DMA_SYNC_REMAINING_ENABLED 1
#define TRACE_IDE_SECTOR_READ_ENABLED 1
#define TRACE_IDE_SECTOR_WRITE_ENABLED 1
#define TRACE_IDE_RESET_ENABLED 1
#define TRACE_IDE_BUS_RESET_AIO_ENABLED 1
#define TRACE_IDE_DMA_CB_ENABLED 1
#define TRACE_BMDMA_READ_CMD646_ENABLED 1
#define TRACE_BMDMA_WRITE_CMD646_ENABLED 1
#define TRACE_BMDMA_RESET_ENABLED 1
#define TRACE_BMDMA_CMD_WRITEB_ENABLED 1
#define TRACE_BMDMA_ADDR_READ_ENABLED 1
#define TRACE_BMDMA_ADDR_WRITE_ENABLED 1
#define TRACE_BMDMA_READ_ENABLED 1
#define TRACE_BMDMA_WRITE_ENABLED 1
#define TRACE_SII3112_READ_ENABLED 1
#define TRACE_SII3112_WRITE_ENABLED 1
#define TRACE_SII3112_SET_IRQ_ENABLED 1
#define TRACE_BMDMA_READ_VIA_ENABLED 1
#define TRACE_BMDMA_WRITE_VIA_ENABLED 1
#define TRACE_CD_READ_SECTOR_SYNC_ENABLED 1
#define TRACE_CD_READ_SECTOR_CB_ENABLED 1
#define TRACE_CD_READ_SECTOR_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_ERROR_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_REPLY_END_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_REPLY_END_EOT_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_REPLY_END_BCL_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_REPLY_END_NEW_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_CHECK_STATUS_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_READ_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_READ_DMA_CB_AIO_ENABLED 1
#define TRACE_IDE_ATAPI_CMD_PACKET_ENABLED 1
#define TRACE_AHCI_PORT_READ_ENABLED 1
#define TRACE_AHCI_IRQ_RAISE_ENABLED 1
#define TRACE_AHCI_IRQ_LOWER_ENABLED 1
#define TRACE_AHCI_CHECK_IRQ_ENABLED 1
#define TRACE_AHCI_TRIGGER_IRQ_ENABLED 1
#define TRACE_AHCI_PORT_WRITE_ENABLED 1
#define TRACE_AHCI_MEM_READ_32_ENABLED 1
#define TRACE_AHCI_MEM_READ_ENABLED 1
#define TRACE_AHCI_MEM_WRITE_ENABLED 1
#define TRACE_AHCI_MEM_WRITE_UNKNOWN_ENABLED 1
#define TRACE_AHCI_SET_SIGNATURE_ENABLED 1
#define TRACE_AHCI_RESET_PORT_ENABLED 1
#define TRACE_AHCI_UNMAP_FIS_ADDRESS_NULL_ENABLED 1
#define TRACE_AHCI_UNMAP_CLB_ADDRESS_NULL_ENABLED 1
#define TRACE_AHCI_POPULATE_SGLIST_ENABLED 1
#define TRACE_AHCI_POPULATE_SGLIST_NO_PRDTL_ENABLED 1
#define TRACE_AHCI_POPULATE_SGLIST_NO_MAP_ENABLED 1
#define TRACE_AHCI_POPULATE_SGLIST_SHORT_MAP_ENABLED 1
#define TRACE_AHCI_POPULATE_SGLIST_BAD_OFFSET_ENABLED 1
#define TRACE_NCQ_FINISH_ENABLED 1
#define TRACE_EXECUTE_NCQ_COMMAND_READ_ENABLED 1
#define TRACE_EXECUTE_NCQ_COMMAND_WRITE_ENABLED 1
#define TRACE_EXECUTE_NCQ_COMMAND_UNSUP_ENABLED 1
#define TRACE_PROCESS_NCQ_COMMAND_MISMATCH_ENABLED 1
#define TRACE_PROCESS_NCQ_COMMAND_AUX_ENABLED 1
#define TRACE_PROCESS_NCQ_COMMAND_PRIOICC_ENABLED 1
#define TRACE_PROCESS_NCQ_COMMAND_FUA_ENABLED 1
#define TRACE_PROCESS_NCQ_COMMAND_RARC_ENABLED 1
#define TRACE_PROCESS_NCQ_COMMAND_LARGE_ENABLED 1
#define TRACE_PROCESS_NCQ_COMMAND_ENABLED 1
#define TRACE_HANDLE_REG_H2D_FIS_PMP_ENABLED 1
#define TRACE_HANDLE_REG_H2D_FIS_RES_ENABLED 1
#define TRACE_HANDLE_CMD_BUSY_ENABLED 1
#define TRACE_HANDLE_CMD_NOLIST_ENABLED 1
#define TRACE_HANDLE_CMD_BADPORT_ENABLED 1
#define TRACE_HANDLE_CMD_BADFIS_ENABLED 1
#define TRACE_HANDLE_CMD_BADMAP_ENABLED 1
#define TRACE_HANDLE_CMD_UNHANDLED_FIS_ENABLED 1
#define TRACE_AHCI_START_TRANSFER_ENABLED 1
#define TRACE_AHCI_START_DMA_ENABLED 1
#define TRACE_AHCI_DMA_PREPARE_BUF_ENABLED 1
#define TRACE_AHCI_DMA_PREPARE_BUF_FAIL_ENABLED 1
#define TRACE_AHCI_DMA_RW_BUF_ENABLED 1
#define TRACE_AHCI_CMD_DONE_ENABLED 1
#define TRACE_AHCI_RESET_ENABLED 1
#define TRACE_ALLWINNER_AHCI_MEM_READ_ENABLED 1
#define TRACE_ALLWINNER_AHCI_MEM_WRITE_ENABLED 1
#define TRACE_HANDLE_REG_H2D_FIS_DUMP_ENABLED 1
#define TRACE_HANDLE_CMD_FIS_DUMP_ENABLED 1

#define TRACE_IDE_IOPORT_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_ioport_read(uint32_t addr, const char * reg, uint32_t val, void * bus, void * s)
{
}

static inline void trace_ide_ioport_read(uint32_t addr, const char * reg, uint32_t val, void * bus, void * s)
{
    if (true) {
        _nocheck__trace_ide_ioport_read(addr, reg, val, bus, s);
    }
}

#define TRACE_IDE_IOPORT_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_ioport_write(uint32_t addr, const char * reg, uint32_t val, void * bus, void * s)
{
}

static inline void trace_ide_ioport_write(uint32_t addr, const char * reg, uint32_t val, void * bus, void * s)
{
    if (true) {
        _nocheck__trace_ide_ioport_write(addr, reg, val, bus, s);
    }
}

#define TRACE_IDE_STATUS_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_status_read(uint32_t addr, uint32_t val, void * bus, void * s)
{
}

static inline void trace_ide_status_read(uint32_t addr, uint32_t val, void * bus, void * s)
{
    if (true) {
        _nocheck__trace_ide_status_read(addr, val, bus, s);
    }
}

#define TRACE_IDE_CMD_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_cmd_write(uint32_t addr, uint32_t val, void * bus)
{
}

static inline void trace_ide_cmd_write(uint32_t addr, uint32_t val, void * bus)
{
    if (true) {
        _nocheck__trace_ide_cmd_write(addr, val, bus);
    }
}

#define TRACE_IDE_DATA_READW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_data_readw(uint32_t addr, uint32_t val, void * bus, void * s)
{
}

static inline void trace_ide_data_readw(uint32_t addr, uint32_t val, void * bus, void * s)
{
    if (true) {
        _nocheck__trace_ide_data_readw(addr, val, bus, s);
    }
}

#define TRACE_IDE_DATA_WRITEW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_data_writew(uint32_t addr, uint32_t val, void * bus, void * s)
{
}

static inline void trace_ide_data_writew(uint32_t addr, uint32_t val, void * bus, void * s)
{
    if (true) {
        _nocheck__trace_ide_data_writew(addr, val, bus, s);
    }
}

#define TRACE_IDE_DATA_READL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_data_readl(uint32_t addr, uint32_t val, void * bus, void * s)
{
}

static inline void trace_ide_data_readl(uint32_t addr, uint32_t val, void * bus, void * s)
{
    if (true) {
        _nocheck__trace_ide_data_readl(addr, val, bus, s);
    }
}

#define TRACE_IDE_DATA_WRITEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_data_writel(uint32_t addr, uint32_t val, void * bus, void * s)
{
}

static inline void trace_ide_data_writel(uint32_t addr, uint32_t val, void * bus, void * s)
{
    if (true) {
        _nocheck__trace_ide_data_writel(addr, val, bus, s);
    }
}

#define TRACE_IDE_EXEC_CMD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_exec_cmd(void * bus, void * state, uint32_t cmd)
{
}

static inline void trace_ide_exec_cmd(void * bus, void * state, uint32_t cmd)
{
    if (true) {
        _nocheck__trace_ide_exec_cmd(bus, state, cmd);
    }
}

#define TRACE_IDE_CANCEL_DMA_SYNC_BUFFERED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_cancel_dma_sync_buffered(void * fn, void * req)
{
}

static inline void trace_ide_cancel_dma_sync_buffered(void * fn, void * req)
{
    if (true) {
        _nocheck__trace_ide_cancel_dma_sync_buffered(fn, req);
    }
}

#define TRACE_IDE_CANCEL_DMA_SYNC_REMAINING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_cancel_dma_sync_remaining(void)
{
}

static inline void trace_ide_cancel_dma_sync_remaining(void)
{
    if (true) {
        _nocheck__trace_ide_cancel_dma_sync_remaining();
    }
}

#define TRACE_IDE_SECTOR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_sector_read(int64_t sector_num, int nsectors)
{
}

static inline void trace_ide_sector_read(int64_t sector_num, int nsectors)
{
    if (true) {
        _nocheck__trace_ide_sector_read(sector_num, nsectors);
    }
}

#define TRACE_IDE_SECTOR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_sector_write(int64_t sector_num, int nsectors)
{
}

static inline void trace_ide_sector_write(int64_t sector_num, int nsectors)
{
    if (true) {
        _nocheck__trace_ide_sector_write(sector_num, nsectors);
    }
}

#define TRACE_IDE_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_reset(void * s)
{
}

static inline void trace_ide_reset(void * s)
{
    if (true) {
        _nocheck__trace_ide_reset(s);
    }
}

#define TRACE_IDE_BUS_RESET_AIO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_bus_reset_aio(void)
{
}

static inline void trace_ide_bus_reset_aio(void)
{
    if (true) {
        _nocheck__trace_ide_bus_reset_aio();
    }
}

#define TRACE_IDE_DMA_CB_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_dma_cb(void * s, int64_t sector_num, int n, const char * dma)
{
}

static inline void trace_ide_dma_cb(void * s, int64_t sector_num, int n, const char * dma)
{
    if (true) {
        _nocheck__trace_ide_dma_cb(s, sector_num, n, dma);
    }
}

#define TRACE_BMDMA_READ_CMD646_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_read_cmd646(uint64_t addr, uint32_t val)
{
}

static inline void trace_bmdma_read_cmd646(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_bmdma_read_cmd646(addr, val);
    }
}

#define TRACE_BMDMA_WRITE_CMD646_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_write_cmd646(uint64_t addr, uint64_t val)
{
}

static inline void trace_bmdma_write_cmd646(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_bmdma_write_cmd646(addr, val);
    }
}

#define TRACE_BMDMA_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_reset(void)
{
}

static inline void trace_bmdma_reset(void)
{
    if (true) {
        _nocheck__trace_bmdma_reset();
    }
}

#define TRACE_BMDMA_CMD_WRITEB_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_cmd_writeb(uint32_t val)
{
}

static inline void trace_bmdma_cmd_writeb(uint32_t val)
{
    if (true) {
        _nocheck__trace_bmdma_cmd_writeb(val);
    }
}

#define TRACE_BMDMA_ADDR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_addr_read(uint64_t data)
{
}

static inline void trace_bmdma_addr_read(uint64_t data)
{
    if (true) {
        _nocheck__trace_bmdma_addr_read(data);
    }
}

#define TRACE_BMDMA_ADDR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_addr_write(uint64_t data)
{
}

static inline void trace_bmdma_addr_write(uint64_t data)
{
    if (true) {
        _nocheck__trace_bmdma_addr_write(data);
    }
}

#define TRACE_BMDMA_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_read(uint64_t addr, uint8_t val)
{
}

static inline void trace_bmdma_read(uint64_t addr, uint8_t val)
{
    if (true) {
        _nocheck__trace_bmdma_read(addr, val);
    }
}

#define TRACE_BMDMA_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_write(uint64_t addr, uint64_t val)
{
}

static inline void trace_bmdma_write(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_bmdma_write(addr, val);
    }
}

#define TRACE_SII3112_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sii3112_read(int size, uint64_t addr, uint64_t val)
{
}

static inline void trace_sii3112_read(int size, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_sii3112_read(size, addr, val);
    }
}

#define TRACE_SII3112_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sii3112_write(int size, uint64_t addr, uint64_t val)
{
}

static inline void trace_sii3112_write(int size, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_sii3112_write(size, addr, val);
    }
}

#define TRACE_SII3112_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sii3112_set_irq(int channel, int level)
{
}

static inline void trace_sii3112_set_irq(int channel, int level)
{
    if (true) {
        _nocheck__trace_sii3112_set_irq(channel, level);
    }
}

#define TRACE_BMDMA_READ_VIA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_read_via(uint64_t addr, uint32_t val)
{
}

static inline void trace_bmdma_read_via(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_bmdma_read_via(addr, val);
    }
}

#define TRACE_BMDMA_WRITE_VIA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bmdma_write_via(uint64_t addr, uint64_t val)
{
}

static inline void trace_bmdma_write_via(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_bmdma_write_via(addr, val);
    }
}

#define TRACE_CD_READ_SECTOR_SYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cd_read_sector_sync(int lba)
{
}

static inline void trace_cd_read_sector_sync(int lba)
{
    if (true) {
        _nocheck__trace_cd_read_sector_sync(lba);
    }
}

#define TRACE_CD_READ_SECTOR_CB_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cd_read_sector_cb(int lba, int ret)
{
}

static inline void trace_cd_read_sector_cb(int lba, int ret)
{
    if (true) {
        _nocheck__trace_cd_read_sector_cb(lba, ret);
    }
}

#define TRACE_CD_READ_SECTOR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cd_read_sector(int lba)
{
}

static inline void trace_cd_read_sector(int lba)
{
    if (true) {
        _nocheck__trace_cd_read_sector(lba);
    }
}

#define TRACE_IDE_ATAPI_CMD_ERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_error(void * s, int sense_key, int asc)
{
}

static inline void trace_ide_atapi_cmd_error(void * s, int sense_key, int asc)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_error(s, sense_key, asc);
    }
}

#define TRACE_IDE_ATAPI_CMD_REPLY_END_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_reply_end(void * s, int tx_size, int elem_tx_size, int32_t index)
{
}

static inline void trace_ide_atapi_cmd_reply_end(void * s, int tx_size, int elem_tx_size, int32_t index)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_reply_end(s, tx_size, elem_tx_size, index);
    }
}

#define TRACE_IDE_ATAPI_CMD_REPLY_END_EOT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_reply_end_eot(void * s, int status)
{
}

static inline void trace_ide_atapi_cmd_reply_end_eot(void * s, int status)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_reply_end_eot(s, status);
    }
}

#define TRACE_IDE_ATAPI_CMD_REPLY_END_BCL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_reply_end_bcl(void * s, int bcl)
{
}

static inline void trace_ide_atapi_cmd_reply_end_bcl(void * s, int bcl)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_reply_end_bcl(s, bcl);
    }
}

#define TRACE_IDE_ATAPI_CMD_REPLY_END_NEW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_reply_end_new(void * s, int status)
{
}

static inline void trace_ide_atapi_cmd_reply_end_new(void * s, int status)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_reply_end_new(s, status);
    }
}

#define TRACE_IDE_ATAPI_CMD_CHECK_STATUS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_check_status(void * s)
{
}

static inline void trace_ide_atapi_cmd_check_status(void * s)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_check_status(s);
    }
}

#define TRACE_IDE_ATAPI_CMD_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_read(void * s, const char * method, int lba, int nb_sectors)
{
}

static inline void trace_ide_atapi_cmd_read(void * s, const char * method, int lba, int nb_sectors)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_read(s, method, lba, nb_sectors);
    }
}

#define TRACE_IDE_ATAPI_CMD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd(void * s, uint8_t cmd)
{
}

static inline void trace_ide_atapi_cmd(void * s, uint8_t cmd)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd(s, cmd);
    }
}

#define TRACE_IDE_ATAPI_CMD_READ_DMA_CB_AIO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_read_dma_cb_aio(void * s, int lba, int n)
{
}

static inline void trace_ide_atapi_cmd_read_dma_cb_aio(void * s, int lba, int n)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_read_dma_cb_aio(s, lba, n);
    }
}

#define TRACE_IDE_ATAPI_CMD_PACKET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ide_atapi_cmd_packet(void * s, uint16_t limit, const char * packet)
{
}

static inline void trace_ide_atapi_cmd_packet(void * s, uint16_t limit, const char * packet)
{
    if (true) {
        _nocheck__trace_ide_atapi_cmd_packet(s, limit, packet);
    }
}

#define TRACE_AHCI_PORT_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_port_read(void * s, int port, int offset, uint32_t ret)
{
}

static inline void trace_ahci_port_read(void * s, int port, int offset, uint32_t ret)
{
    if (true) {
        _nocheck__trace_ahci_port_read(s, port, offset, ret);
    }
}

#define TRACE_AHCI_IRQ_RAISE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_irq_raise(void * s)
{
}

static inline void trace_ahci_irq_raise(void * s)
{
    if (true) {
        _nocheck__trace_ahci_irq_raise(s);
    }
}

#define TRACE_AHCI_IRQ_LOWER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_irq_lower(void * s)
{
}

static inline void trace_ahci_irq_lower(void * s)
{
    if (true) {
        _nocheck__trace_ahci_irq_lower(s);
    }
}

#define TRACE_AHCI_CHECK_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_check_irq(void * s, uint32_t old, uint32_t new)
{
}

static inline void trace_ahci_check_irq(void * s, uint32_t old, uint32_t new)
{
    if (true) {
        _nocheck__trace_ahci_check_irq(s, old, new);
    }
}

#define TRACE_AHCI_TRIGGER_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_trigger_irq(void * s, int port, const char * name, uint32_t val, uint32_t old, uint32_t new, uint32_t effective)
{
}

static inline void trace_ahci_trigger_irq(void * s, int port, const char * name, uint32_t val, uint32_t old, uint32_t new, uint32_t effective)
{
    if (true) {
        _nocheck__trace_ahci_trigger_irq(s, port, name, val, old, new, effective);
    }
}

#define TRACE_AHCI_PORT_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_port_write(void * s, int port, int offset, uint32_t val)
{
}

static inline void trace_ahci_port_write(void * s, int port, int offset, uint32_t val)
{
    if (true) {
        _nocheck__trace_ahci_port_write(s, port, offset, val);
    }
}

#define TRACE_AHCI_MEM_READ_32_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_mem_read_32(void * s, uint64_t addr, uint32_t val)
{
}

static inline void trace_ahci_mem_read_32(void * s, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_ahci_mem_read_32(s, addr, val);
    }
}

#define TRACE_AHCI_MEM_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_mem_read(void * s, unsigned size, uint64_t addr, uint64_t val)
{
}

static inline void trace_ahci_mem_read(void * s, unsigned size, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_ahci_mem_read(s, size, addr, val);
    }
}

#define TRACE_AHCI_MEM_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_mem_write(void * s, unsigned size, uint64_t addr, uint64_t val)
{
}

static inline void trace_ahci_mem_write(void * s, unsigned size, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_ahci_mem_write(s, size, addr, val);
    }
}

#define TRACE_AHCI_MEM_WRITE_UNKNOWN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_mem_write_unknown(void * s, unsigned size, uint64_t addr, uint64_t val)
{
}

static inline void trace_ahci_mem_write_unknown(void * s, unsigned size, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_ahci_mem_write_unknown(s, size, addr, val);
    }
}

#define TRACE_AHCI_SET_SIGNATURE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_set_signature(void * s, int port, uint8_t nsector, uint8_t sector, uint8_t lcyl, uint8_t hcyl, uint32_t sig)
{
}

static inline void trace_ahci_set_signature(void * s, int port, uint8_t nsector, uint8_t sector, uint8_t lcyl, uint8_t hcyl, uint32_t sig)
{
    if (true) {
        _nocheck__trace_ahci_set_signature(s, port, nsector, sector, lcyl, hcyl, sig);
    }
}

#define TRACE_AHCI_RESET_PORT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_reset_port(void * s, int port)
{
}

static inline void trace_ahci_reset_port(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_reset_port(s, port);
    }
}

#define TRACE_AHCI_UNMAP_FIS_ADDRESS_NULL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_unmap_fis_address_null(void * s, int port)
{
}

static inline void trace_ahci_unmap_fis_address_null(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_unmap_fis_address_null(s, port);
    }
}

#define TRACE_AHCI_UNMAP_CLB_ADDRESS_NULL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_unmap_clb_address_null(void * s, int port)
{
}

static inline void trace_ahci_unmap_clb_address_null(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_unmap_clb_address_null(s, port);
    }
}

#define TRACE_AHCI_POPULATE_SGLIST_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_populate_sglist(void * s, int port)
{
}

static inline void trace_ahci_populate_sglist(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_populate_sglist(s, port);
    }
}

#define TRACE_AHCI_POPULATE_SGLIST_NO_PRDTL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_populate_sglist_no_prdtl(void * s, int port, uint16_t opts)
{
}

static inline void trace_ahci_populate_sglist_no_prdtl(void * s, int port, uint16_t opts)
{
    if (true) {
        _nocheck__trace_ahci_populate_sglist_no_prdtl(s, port, opts);
    }
}

#define TRACE_AHCI_POPULATE_SGLIST_NO_MAP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_populate_sglist_no_map(void * s, int port)
{
}

static inline void trace_ahci_populate_sglist_no_map(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_populate_sglist_no_map(s, port);
    }
}

#define TRACE_AHCI_POPULATE_SGLIST_SHORT_MAP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_populate_sglist_short_map(void * s, int port)
{
}

static inline void trace_ahci_populate_sglist_short_map(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_populate_sglist_short_map(s, port);
    }
}

#define TRACE_AHCI_POPULATE_SGLIST_BAD_OFFSET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_populate_sglist_bad_offset(void * s, int port, int off_idx, int64_t off_pos)
{
}

static inline void trace_ahci_populate_sglist_bad_offset(void * s, int port, int off_idx, int64_t off_pos)
{
    if (true) {
        _nocheck__trace_ahci_populate_sglist_bad_offset(s, port, off_idx, off_pos);
    }
}

#define TRACE_NCQ_FINISH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ncq_finish(void * s, int port, uint8_t tag)
{
}

static inline void trace_ncq_finish(void * s, int port, uint8_t tag)
{
    if (true) {
        _nocheck__trace_ncq_finish(s, port, tag);
    }
}

#define TRACE_EXECUTE_NCQ_COMMAND_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_execute_ncq_command_read(void * s, int port, uint8_t tag, int count, int64_t lba)
{
}

static inline void trace_execute_ncq_command_read(void * s, int port, uint8_t tag, int count, int64_t lba)
{
    if (true) {
        _nocheck__trace_execute_ncq_command_read(s, port, tag, count, lba);
    }
}

#define TRACE_EXECUTE_NCQ_COMMAND_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_execute_ncq_command_write(void * s, int port, uint8_t tag, int count, int64_t lba)
{
}

static inline void trace_execute_ncq_command_write(void * s, int port, uint8_t tag, int count, int64_t lba)
{
    if (true) {
        _nocheck__trace_execute_ncq_command_write(s, port, tag, count, lba);
    }
}

#define TRACE_EXECUTE_NCQ_COMMAND_UNSUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_execute_ncq_command_unsup(void * s, int port, uint8_t tag, uint8_t cmd)
{
}

static inline void trace_execute_ncq_command_unsup(void * s, int port, uint8_t tag, uint8_t cmd)
{
    if (true) {
        _nocheck__trace_execute_ncq_command_unsup(s, port, tag, cmd);
    }
}

#define TRACE_PROCESS_NCQ_COMMAND_MISMATCH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_ncq_command_mismatch(void * s, int port, uint8_t tag, uint8_t slot)
{
}

static inline void trace_process_ncq_command_mismatch(void * s, int port, uint8_t tag, uint8_t slot)
{
    if (true) {
        _nocheck__trace_process_ncq_command_mismatch(s, port, tag, slot);
    }
}

#define TRACE_PROCESS_NCQ_COMMAND_AUX_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_ncq_command_aux(void * s, int port, uint8_t tag)
{
}

static inline void trace_process_ncq_command_aux(void * s, int port, uint8_t tag)
{
    if (true) {
        _nocheck__trace_process_ncq_command_aux(s, port, tag);
    }
}

#define TRACE_PROCESS_NCQ_COMMAND_PRIOICC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_ncq_command_prioicc(void * s, int port, uint8_t tag)
{
}

static inline void trace_process_ncq_command_prioicc(void * s, int port, uint8_t tag)
{
    if (true) {
        _nocheck__trace_process_ncq_command_prioicc(s, port, tag);
    }
}

#define TRACE_PROCESS_NCQ_COMMAND_FUA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_ncq_command_fua(void * s, int port, uint8_t tag)
{
}

static inline void trace_process_ncq_command_fua(void * s, int port, uint8_t tag)
{
    if (true) {
        _nocheck__trace_process_ncq_command_fua(s, port, tag);
    }
}

#define TRACE_PROCESS_NCQ_COMMAND_RARC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_ncq_command_rarc(void * s, int port, uint8_t tag)
{
}

static inline void trace_process_ncq_command_rarc(void * s, int port, uint8_t tag)
{
    if (true) {
        _nocheck__trace_process_ncq_command_rarc(s, port, tag);
    }
}

#define TRACE_PROCESS_NCQ_COMMAND_LARGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_ncq_command_large(void * s, int port, uint8_t tag, size_t prdtl, size_t size)
{
}

static inline void trace_process_ncq_command_large(void * s, int port, uint8_t tag, size_t prdtl, size_t size)
{
    if (true) {
        _nocheck__trace_process_ncq_command_large(s, port, tag, prdtl, size);
    }
}

#define TRACE_PROCESS_NCQ_COMMAND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_process_ncq_command(void * s, int port, uint8_t tag, uint8_t cmd, uint64_t lba, uint64_t end)
{
}

static inline void trace_process_ncq_command(void * s, int port, uint8_t tag, uint8_t cmd, uint64_t lba, uint64_t end)
{
    if (true) {
        _nocheck__trace_process_ncq_command(s, port, tag, cmd, lba, end);
    }
}

#define TRACE_HANDLE_REG_H2D_FIS_PMP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_reg_h2d_fis_pmp(void * s, int port, char b0, char b1, char b2)
{
}

static inline void trace_handle_reg_h2d_fis_pmp(void * s, int port, char b0, char b1, char b2)
{
    if (true) {
        _nocheck__trace_handle_reg_h2d_fis_pmp(s, port, b0, b1, b2);
    }
}

#define TRACE_HANDLE_REG_H2D_FIS_RES_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_reg_h2d_fis_res(void * s, int port, char b0, char b1, char b2)
{
}

static inline void trace_handle_reg_h2d_fis_res(void * s, int port, char b0, char b1, char b2)
{
    if (true) {
        _nocheck__trace_handle_reg_h2d_fis_res(s, port, b0, b1, b2);
    }
}

#define TRACE_HANDLE_CMD_BUSY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_cmd_busy(void * s, int port)
{
}

static inline void trace_handle_cmd_busy(void * s, int port)
{
    if (true) {
        _nocheck__trace_handle_cmd_busy(s, port);
    }
}

#define TRACE_HANDLE_CMD_NOLIST_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_cmd_nolist(void * s, int port)
{
}

static inline void trace_handle_cmd_nolist(void * s, int port)
{
    if (true) {
        _nocheck__trace_handle_cmd_nolist(s, port);
    }
}

#define TRACE_HANDLE_CMD_BADPORT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_cmd_badport(void * s, int port)
{
}

static inline void trace_handle_cmd_badport(void * s, int port)
{
    if (true) {
        _nocheck__trace_handle_cmd_badport(s, port);
    }
}

#define TRACE_HANDLE_CMD_BADFIS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_cmd_badfis(void * s, int port)
{
}

static inline void trace_handle_cmd_badfis(void * s, int port)
{
    if (true) {
        _nocheck__trace_handle_cmd_badfis(s, port);
    }
}

#define TRACE_HANDLE_CMD_BADMAP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_cmd_badmap(void * s, int port, uint64_t len)
{
}

static inline void trace_handle_cmd_badmap(void * s, int port, uint64_t len)
{
    if (true) {
        _nocheck__trace_handle_cmd_badmap(s, port, len);
    }
}

#define TRACE_HANDLE_CMD_UNHANDLED_FIS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_cmd_unhandled_fis(void * s, int port, uint8_t b0, uint8_t b1, uint8_t b2)
{
}

static inline void trace_handle_cmd_unhandled_fis(void * s, int port, uint8_t b0, uint8_t b1, uint8_t b2)
{
    if (true) {
        _nocheck__trace_handle_cmd_unhandled_fis(s, port, b0, b1, b2);
    }
}

#define TRACE_AHCI_START_TRANSFER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_start_transfer(void * s, int port, const char * rw, uint32_t size, const char * tgt, const char * sgl)
{
}

static inline void trace_ahci_start_transfer(void * s, int port, const char * rw, uint32_t size, const char * tgt, const char * sgl)
{
    if (true) {
        _nocheck__trace_ahci_start_transfer(s, port, rw, size, tgt, sgl);
    }
}

#define TRACE_AHCI_START_DMA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_start_dma(void * s, int port)
{
}

static inline void trace_ahci_start_dma(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_start_dma(s, port);
    }
}

#define TRACE_AHCI_DMA_PREPARE_BUF_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_dma_prepare_buf(void * s, int port, int32_t io_buffer_size, int32_t limit)
{
}

static inline void trace_ahci_dma_prepare_buf(void * s, int port, int32_t io_buffer_size, int32_t limit)
{
    if (true) {
        _nocheck__trace_ahci_dma_prepare_buf(s, port, io_buffer_size, limit);
    }
}

#define TRACE_AHCI_DMA_PREPARE_BUF_FAIL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_dma_prepare_buf_fail(void * s, int port)
{
}

static inline void trace_ahci_dma_prepare_buf_fail(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_dma_prepare_buf_fail(s, port);
    }
}

#define TRACE_AHCI_DMA_RW_BUF_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_dma_rw_buf(void * s, int port, int l)
{
}

static inline void trace_ahci_dma_rw_buf(void * s, int port, int l)
{
    if (true) {
        _nocheck__trace_ahci_dma_rw_buf(s, port, l);
    }
}

#define TRACE_AHCI_CMD_DONE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_cmd_done(void * s, int port)
{
}

static inline void trace_ahci_cmd_done(void * s, int port)
{
    if (true) {
        _nocheck__trace_ahci_cmd_done(s, port);
    }
}

#define TRACE_AHCI_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ahci_reset(void * s)
{
}

static inline void trace_ahci_reset(void * s)
{
    if (true) {
        _nocheck__trace_ahci_reset(s);
    }
}

#define TRACE_ALLWINNER_AHCI_MEM_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_allwinner_ahci_mem_read(void * s, void * a, uint64_t addr, uint64_t val, unsigned size)
{
}

static inline void trace_allwinner_ahci_mem_read(void * s, void * a, uint64_t addr, uint64_t val, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_ahci_mem_read(s, a, addr, val, size);
    }
}

#define TRACE_ALLWINNER_AHCI_MEM_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_allwinner_ahci_mem_write(void * s, void * a, uint64_t addr, uint64_t val, unsigned size)
{
}

static inline void trace_allwinner_ahci_mem_write(void * s, void * a, uint64_t addr, uint64_t val, unsigned size)
{
    if (true) {
        _nocheck__trace_allwinner_ahci_mem_write(s, a, addr, val, size);
    }
}

#define TRACE_HANDLE_REG_H2D_FIS_DUMP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_reg_h2d_fis_dump(void * s, int port, const char * fis)
{
}

static inline void trace_handle_reg_h2d_fis_dump(void * s, int port, const char * fis)
{
    if (true) {
        _nocheck__trace_handle_reg_h2d_fis_dump(s, port, fis);
    }
}

#define TRACE_HANDLE_CMD_FIS_DUMP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_cmd_fis_dump(void * s, int port, const char * fis)
{
}

static inline void trace_handle_cmd_fis_dump(void * s, int port, const char * fis)
{
    if (true) {
        _nocheck__trace_handle_cmd_fis_dump(s, port, fis);
    }
}
#endif /* TRACE_HW_IDE_GENERATED_TRACERS_H */
