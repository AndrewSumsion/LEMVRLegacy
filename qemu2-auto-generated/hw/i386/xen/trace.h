/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_I386_XEN_GENERATED_TRACERS_H
#define TRACE_HW_I386_XEN_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_XEN_PLATFORM_LOG_EVENT;
extern TraceEvent _TRACE_XEN_PV_MMIO_READ_EVENT;
extern TraceEvent _TRACE_XEN_PV_MMIO_WRITE_EVENT;
extern TraceEvent _TRACE_XEN_RAM_ALLOC_EVENT;
extern TraceEvent _TRACE_XEN_CLIENT_SET_MEMORY_EVENT;
extern TraceEvent _TRACE_HANDLE_IOREQ_EVENT;
extern TraceEvent _TRACE_HANDLE_IOREQ_READ_EVENT;
extern TraceEvent _TRACE_HANDLE_IOREQ_WRITE_EVENT;
extern TraceEvent _TRACE_CPU_IOREQ_PIO_EVENT;
extern TraceEvent _TRACE_CPU_IOREQ_PIO_READ_REG_EVENT;
extern TraceEvent _TRACE_CPU_IOREQ_PIO_WRITE_REG_EVENT;
extern TraceEvent _TRACE_CPU_IOREQ_MOVE_EVENT;
extern TraceEvent _TRACE_XEN_MAP_CACHE_EVENT;
extern TraceEvent _TRACE_XEN_REMAP_BUCKET_EVENT;
extern TraceEvent _TRACE_XEN_MAP_CACHE_RETURN_EVENT;
extern uint16_t _TRACE_XEN_PLATFORM_LOG_DSTATE;
extern uint16_t _TRACE_XEN_PV_MMIO_READ_DSTATE;
extern uint16_t _TRACE_XEN_PV_MMIO_WRITE_DSTATE;
extern uint16_t _TRACE_XEN_RAM_ALLOC_DSTATE;
extern uint16_t _TRACE_XEN_CLIENT_SET_MEMORY_DSTATE;
extern uint16_t _TRACE_HANDLE_IOREQ_DSTATE;
extern uint16_t _TRACE_HANDLE_IOREQ_READ_DSTATE;
extern uint16_t _TRACE_HANDLE_IOREQ_WRITE_DSTATE;
extern uint16_t _TRACE_CPU_IOREQ_PIO_DSTATE;
extern uint16_t _TRACE_CPU_IOREQ_PIO_READ_REG_DSTATE;
extern uint16_t _TRACE_CPU_IOREQ_PIO_WRITE_REG_DSTATE;
extern uint16_t _TRACE_CPU_IOREQ_MOVE_DSTATE;
extern uint16_t _TRACE_XEN_MAP_CACHE_DSTATE;
extern uint16_t _TRACE_XEN_REMAP_BUCKET_DSTATE;
extern uint16_t _TRACE_XEN_MAP_CACHE_RETURN_DSTATE;
#define TRACE_XEN_PLATFORM_LOG_ENABLED 1
#define TRACE_XEN_PV_MMIO_READ_ENABLED 1
#define TRACE_XEN_PV_MMIO_WRITE_ENABLED 1
#define TRACE_XEN_RAM_ALLOC_ENABLED 1
#define TRACE_XEN_CLIENT_SET_MEMORY_ENABLED 1
#define TRACE_HANDLE_IOREQ_ENABLED 1
#define TRACE_HANDLE_IOREQ_READ_ENABLED 1
#define TRACE_HANDLE_IOREQ_WRITE_ENABLED 1
#define TRACE_CPU_IOREQ_PIO_ENABLED 1
#define TRACE_CPU_IOREQ_PIO_READ_REG_ENABLED 1
#define TRACE_CPU_IOREQ_PIO_WRITE_REG_ENABLED 1
#define TRACE_CPU_IOREQ_MOVE_ENABLED 1
#define TRACE_XEN_MAP_CACHE_ENABLED 1
#define TRACE_XEN_REMAP_BUCKET_ENABLED 1
#define TRACE_XEN_MAP_CACHE_RETURN_ENABLED 1

#define TRACE_XEN_PLATFORM_LOG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_platform_log(char * s)
{
}

static inline void trace_xen_platform_log(char * s)
{
    if (true) {
        _nocheck__trace_xen_platform_log(s);
    }
}

#define TRACE_XEN_PV_MMIO_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_pv_mmio_read(uint64_t addr)
{
}

static inline void trace_xen_pv_mmio_read(uint64_t addr)
{
    if (true) {
        _nocheck__trace_xen_pv_mmio_read(addr);
    }
}

#define TRACE_XEN_PV_MMIO_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_pv_mmio_write(uint64_t addr)
{
}

static inline void trace_xen_pv_mmio_write(uint64_t addr)
{
    if (true) {
        _nocheck__trace_xen_pv_mmio_write(addr);
    }
}

#define TRACE_XEN_RAM_ALLOC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_ram_alloc(unsigned long ram_addr, unsigned long size)
{
}

static inline void trace_xen_ram_alloc(unsigned long ram_addr, unsigned long size)
{
    if (true) {
        _nocheck__trace_xen_ram_alloc(ram_addr, size);
    }
}

#define TRACE_XEN_CLIENT_SET_MEMORY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_client_set_memory(uint64_t start_addr, unsigned long size, bool log_dirty)
{
}

static inline void trace_xen_client_set_memory(uint64_t start_addr, unsigned long size, bool log_dirty)
{
    if (true) {
        _nocheck__trace_xen_client_set_memory(start_addr, size, log_dirty);
    }
}

#define TRACE_HANDLE_IOREQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_ioreq(void * req, uint32_t type, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_handle_ioreq(void * req, uint32_t type, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
    if (true) {
        _nocheck__trace_handle_ioreq(req, type, dir, df, data_is_ptr, addr, data, count, size);
    }
}

#define TRACE_HANDLE_IOREQ_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_ioreq_read(void * req, uint32_t type, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_handle_ioreq_read(void * req, uint32_t type, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
    if (true) {
        _nocheck__trace_handle_ioreq_read(req, type, df, data_is_ptr, addr, data, count, size);
    }
}

#define TRACE_HANDLE_IOREQ_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_handle_ioreq_write(void * req, uint32_t type, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_handle_ioreq_write(void * req, uint32_t type, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
    if (true) {
        _nocheck__trace_handle_ioreq_write(req, type, df, data_is_ptr, addr, data, count, size);
    }
}

#define TRACE_CPU_IOREQ_PIO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpu_ioreq_pio(void * req, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_cpu_ioreq_pio(void * req, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
    if (true) {
        _nocheck__trace_cpu_ioreq_pio(req, dir, df, data_is_ptr, addr, data, count, size);
    }
}

#define TRACE_CPU_IOREQ_PIO_READ_REG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpu_ioreq_pio_read_reg(void * req, uint64_t data, uint64_t addr, uint32_t size)
{
}

static inline void trace_cpu_ioreq_pio_read_reg(void * req, uint64_t data, uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_cpu_ioreq_pio_read_reg(req, data, addr, size);
    }
}

#define TRACE_CPU_IOREQ_PIO_WRITE_REG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpu_ioreq_pio_write_reg(void * req, uint64_t data, uint64_t addr, uint32_t size)
{
}

static inline void trace_cpu_ioreq_pio_write_reg(void * req, uint64_t data, uint64_t addr, uint32_t size)
{
    if (true) {
        _nocheck__trace_cpu_ioreq_pio_write_reg(req, data, addr, size);
    }
}

#define TRACE_CPU_IOREQ_MOVE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpu_ioreq_move(void * req, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
}

static inline void trace_cpu_ioreq_move(void * req, uint32_t dir, uint32_t df, uint32_t data_is_ptr, uint64_t addr, uint64_t data, uint32_t count, uint32_t size)
{
    if (true) {
        _nocheck__trace_cpu_ioreq_move(req, dir, df, data_is_ptr, addr, data, count, size);
    }
}

#define TRACE_XEN_MAP_CACHE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_map_cache(uint64_t phys_addr)
{
}

static inline void trace_xen_map_cache(uint64_t phys_addr)
{
    if (true) {
        _nocheck__trace_xen_map_cache(phys_addr);
    }
}

#define TRACE_XEN_REMAP_BUCKET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_remap_bucket(uint64_t index)
{
}

static inline void trace_xen_remap_bucket(uint64_t index)
{
    if (true) {
        _nocheck__trace_xen_remap_bucket(index);
    }
}

#define TRACE_XEN_MAP_CACHE_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xen_map_cache_return(void* ptr)
{
}

static inline void trace_xen_map_cache_return(void* ptr)
{
    if (true) {
        _nocheck__trace_xen_map_cache_return(ptr);
    }
}
#endif /* TRACE_HW_I386_XEN_GENERATED_TRACERS_H */
