/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_INTC_GENERATED_TRACERS_H
#define TRACE_HW_INTC_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_PIC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_PIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_PIC_INTERRUPT_EVENT;
extern TraceEvent _TRACE_PIC_IOPORT_WRITE_EVENT;
extern TraceEvent _TRACE_PIC_IOPORT_READ_EVENT;
extern TraceEvent _TRACE_CPU_SET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_CPU_GET_APIC_BASE_EVENT;
extern TraceEvent _TRACE_APIC_REPORT_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_RESET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_GET_IRQ_DELIVERED_EVENT;
extern TraceEvent _TRACE_APIC_LOCAL_DELIVER_EVENT;
extern TraceEvent _TRACE_APIC_DELIVER_IRQ_EVENT;
extern TraceEvent _TRACE_APIC_MEM_READL_EVENT;
extern TraceEvent _TRACE_APIC_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_IOAPIC_SET_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_CLEAR_REMOTE_IRR_EVENT;
extern TraceEvent _TRACE_IOAPIC_EOI_BROADCAST_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_READ_EVENT;
extern TraceEvent _TRACE_IOAPIC_MEM_WRITE_EVENT;
extern TraceEvent _TRACE_IOAPIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_READL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_EVENT;
extern TraceEvent _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_EVENT;
extern TraceEvent _TRACE_SLAVIO_CHECK_INTERRUPTS_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_IRQ_EVENT;
extern TraceEvent _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_CHECK_IRQS_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_ACK_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_READL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_EVENT;
extern TraceEvent _TRACE_LM32_PIC_RAISE_IRQ_EVENT;
extern TraceEvent _TRACE_LM32_PIC_LOWER_IRQ_EVENT;
extern TraceEvent _TRACE_LM32_PIC_INTERRUPT_EVENT;
extern TraceEvent _TRACE_LM32_PIC_SET_IM_EVENT;
extern TraceEvent _TRACE_LM32_PIC_SET_IP_EVENT;
extern TraceEvent _TRACE_LM32_PIC_GET_IM_EVENT;
extern TraceEvent _TRACE_LM32_PIC_GET_IP_EVENT;
extern TraceEvent _TRACE_XICS_ICP_CHECK_IPI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_ACCEPT_EVENT;
extern TraceEvent _TRACE_XICS_ICP_EOI_EVENT;
extern TraceEvent _TRACE_XICS_ICP_IRQ_EVENT;
extern TraceEvent _TRACE_XICS_ICP_RAISE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI_EVENT;
extern TraceEvent _TRACE_XICS_MASKED_PENDING_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_WRITE_XIVE_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_REJECT_EVENT;
extern TraceEvent _TRACE_XICS_ICS_SIMPLE_EOI_EVENT;
extern TraceEvent _TRACE_FLIC_CREATE_DEVICE_EVENT;
extern TraceEvent _TRACE_FLIC_NO_DEVICE_API_EVENT;
extern TraceEvent _TRACE_FLIC_RESET_FAILED_EVENT;
extern TraceEvent _TRACE_QEMU_S390_AIRQ_SUPPRESSED_EVENT;
extern TraceEvent _TRACE_QEMU_S390_SUPPRESS_AIRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_FIQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_READ_EVENT;
extern TraceEvent _TRACE_ASPEED_VIC_WRITE_EVENT;
extern TraceEvent _TRACE_GIC_ENABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_DISABLE_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_BESTIRQ_EVENT;
extern TraceEvent _TRACE_GIC_UPDATE_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_CTLR_EL3_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_GENERATE_SGI_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_IAR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR0_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_HPPIR1_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICC_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_HCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VMCR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LR32_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_LRC_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_VTR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_MISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_EISR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICH_ELRSR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_AP_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_BPR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_PMR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IGRPEN_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_CTLR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_RPR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_HPPIR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_DIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_IAR_READ_EVENT;
extern TraceEvent _TRACE_GICV3_ICV_EOIR_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_UPDATE_EVENT;
extern TraceEvent _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_DIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_READ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADREAD_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_WRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_BADWRITE_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SET_IRQ_EVENT;
extern TraceEvent _TRACE_GICV3_REDIST_SEND_SGI_EVENT;
extern TraceEvent _TRACE_NVIC_RECOMPUTE_STATE_EVENT;
extern TraceEvent _TRACE_NVIC_RECOMPUTE_STATE_SECURE_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_IRQ_UPDATE_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_PRIO_EVENT;
extern TraceEvent _TRACE_NVIC_ESCALATE_DISABLED_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_CLEAR_PENDING_EVENT;
extern TraceEvent _TRACE_NVIC_SET_PENDING_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_ACKNOWLEDGE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_GET_PENDING_IRQ_INFO_EVENT;
extern TraceEvent _TRACE_NVIC_COMPLETE_IRQ_EVENT;
extern TraceEvent _TRACE_NVIC_SET_IRQ_LEVEL_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_READ_EVENT;
extern TraceEvent _TRACE_NVIC_SYSREG_WRITE_EVENT;
extern TraceEvent _TRACE_HEATHROW_WRITE_EVENT;
extern TraceEvent _TRACE_HEATHROW_READ_EVENT;
extern TraceEvent _TRACE_HEATHROW_SET_IRQ_EVENT;
extern uint16_t _TRACE_PIC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_PIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_PIC_INTERRUPT_DSTATE;
extern uint16_t _TRACE_PIC_IOPORT_WRITE_DSTATE;
extern uint16_t _TRACE_PIC_IOPORT_READ_DSTATE;
extern uint16_t _TRACE_CPU_SET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_CPU_GET_APIC_BASE_DSTATE;
extern uint16_t _TRACE_APIC_REPORT_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_RESET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_GET_IRQ_DELIVERED_DSTATE;
extern uint16_t _TRACE_APIC_LOCAL_DELIVER_DSTATE;
extern uint16_t _TRACE_APIC_DELIVER_IRQ_DSTATE;
extern uint16_t _TRACE_APIC_MEM_READL_DSTATE;
extern uint16_t _TRACE_APIC_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_IOAPIC_SET_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_CLEAR_REMOTE_IRR_DSTATE;
extern uint16_t _TRACE_IOAPIC_EOI_BROADCAST_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_READ_DSTATE;
extern uint16_t _TRACE_IOAPIC_MEM_WRITE_DSTATE;
extern uint16_t _TRACE_IOAPIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_READL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_DSTATE;
extern uint16_t _TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_DSTATE;
extern uint16_t _TRACE_SLAVIO_CHECK_INTERRUPTS_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_IRQ_DSTATE;
extern uint16_t _TRACE_SLAVIO_SET_TIMER_IRQ_CPU_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_CHECK_IRQS_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_ACK_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_READL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_DSTATE;
extern uint16_t _TRACE_LM32_PIC_RAISE_IRQ_DSTATE;
extern uint16_t _TRACE_LM32_PIC_LOWER_IRQ_DSTATE;
extern uint16_t _TRACE_LM32_PIC_INTERRUPT_DSTATE;
extern uint16_t _TRACE_LM32_PIC_SET_IM_DSTATE;
extern uint16_t _TRACE_LM32_PIC_SET_IP_DSTATE;
extern uint16_t _TRACE_LM32_PIC_GET_IM_DSTATE;
extern uint16_t _TRACE_LM32_PIC_GET_IP_DSTATE;
extern uint16_t _TRACE_XICS_ICP_CHECK_IPI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_ACCEPT_DSTATE;
extern uint16_t _TRACE_XICS_ICP_EOI_DSTATE;
extern uint16_t _TRACE_XICS_ICP_IRQ_DSTATE;
extern uint16_t _TRACE_XICS_ICP_RAISE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI_DSTATE;
extern uint16_t _TRACE_XICS_MASKED_PENDING_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_WRITE_XIVE_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_REJECT_DSTATE;
extern uint16_t _TRACE_XICS_ICS_SIMPLE_EOI_DSTATE;
extern uint16_t _TRACE_FLIC_CREATE_DEVICE_DSTATE;
extern uint16_t _TRACE_FLIC_NO_DEVICE_API_DSTATE;
extern uint16_t _TRACE_FLIC_RESET_FAILED_DSTATE;
extern uint16_t _TRACE_QEMU_S390_AIRQ_SUPPRESSED_DSTATE;
extern uint16_t _TRACE_QEMU_S390_SUPPRESS_AIRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_FIQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_READ_DSTATE;
extern uint16_t _TRACE_ASPEED_VIC_WRITE_DSTATE;
extern uint16_t _TRACE_GIC_ENABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_DISABLE_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_BESTIRQ_DSTATE;
extern uint16_t _TRACE_GIC_UPDATE_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_CTLR_EL3_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_GENERATE_SGI_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_IAR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR0_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_HPPIR1_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICC_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_HCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VMCR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LR32_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_LRC_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_VTR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_MISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_EISR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICH_ELRSR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_AP_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_BPR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_PMR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IGRPEN_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_CTLR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_RPR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_HPPIR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_DIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_IAR_READ_DSTATE;
extern uint16_t _TRACE_GICV3_ICV_EOIR_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_UPDATE_DSTATE;
extern uint16_t _TRACE_GICV3_CPUIF_VIRT_SET_IRQS_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_DIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_READ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADREAD_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_WRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_BADWRITE_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SET_IRQ_DSTATE;
extern uint16_t _TRACE_GICV3_REDIST_SEND_SGI_DSTATE;
extern uint16_t _TRACE_NVIC_RECOMPUTE_STATE_DSTATE;
extern uint16_t _TRACE_NVIC_RECOMPUTE_STATE_SECURE_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_IRQ_UPDATE_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_PRIO_DSTATE;
extern uint16_t _TRACE_NVIC_ESCALATE_DISABLED_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_CLEAR_PENDING_DSTATE;
extern uint16_t _TRACE_NVIC_SET_PENDING_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_ACKNOWLEDGE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_GET_PENDING_IRQ_INFO_DSTATE;
extern uint16_t _TRACE_NVIC_COMPLETE_IRQ_DSTATE;
extern uint16_t _TRACE_NVIC_SET_IRQ_LEVEL_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_READ_DSTATE;
extern uint16_t _TRACE_NVIC_SYSREG_WRITE_DSTATE;
extern uint16_t _TRACE_HEATHROW_WRITE_DSTATE;
extern uint16_t _TRACE_HEATHROW_READ_DSTATE;
extern uint16_t _TRACE_HEATHROW_SET_IRQ_DSTATE;
#define TRACE_PIC_UPDATE_IRQ_ENABLED 1
#define TRACE_PIC_SET_IRQ_ENABLED 1
#define TRACE_PIC_INTERRUPT_ENABLED 1
#define TRACE_PIC_IOPORT_WRITE_ENABLED 1
#define TRACE_PIC_IOPORT_READ_ENABLED 1
#define TRACE_CPU_SET_APIC_BASE_ENABLED 1
#define TRACE_CPU_GET_APIC_BASE_ENABLED 1
#define TRACE_APIC_REPORT_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_RESET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_GET_IRQ_DELIVERED_ENABLED 1
#define TRACE_APIC_LOCAL_DELIVER_ENABLED 1
#define TRACE_APIC_DELIVER_IRQ_ENABLED 1
#define TRACE_APIC_MEM_READL_ENABLED 1
#define TRACE_APIC_MEM_WRITEL_ENABLED 1
#define TRACE_IOAPIC_SET_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_CLEAR_REMOTE_IRR_ENABLED 1
#define TRACE_IOAPIC_EOI_BROADCAST_ENABLED 1
#define TRACE_IOAPIC_MEM_READ_ENABLED 1
#define TRACE_IOAPIC_MEM_WRITE_ENABLED 1
#define TRACE_IOAPIC_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_ENABLED 1
#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_READL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_ENABLED 1
#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_ENABLED 1
#define TRACE_SLAVIO_CHECK_INTERRUPTS_ENABLED 1
#define TRACE_SLAVIO_SET_IRQ_ENABLED 1
#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_ENABLED 1
#define TRACE_GRLIB_IRQMP_CHECK_IRQS_ENABLED 1
#define TRACE_GRLIB_IRQMP_ACK_ENABLED 1
#define TRACE_GRLIB_IRQMP_SET_IRQ_ENABLED 1
#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_ENABLED 1
#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_ENABLED 1
#define TRACE_LM32_PIC_RAISE_IRQ_ENABLED 1
#define TRACE_LM32_PIC_LOWER_IRQ_ENABLED 1
#define TRACE_LM32_PIC_INTERRUPT_ENABLED 1
#define TRACE_LM32_PIC_SET_IM_ENABLED 1
#define TRACE_LM32_PIC_SET_IP_ENABLED 1
#define TRACE_LM32_PIC_GET_IM_ENABLED 1
#define TRACE_LM32_PIC_GET_IP_ENABLED 1
#define TRACE_XICS_ICP_CHECK_IPI_ENABLED 1
#define TRACE_XICS_ICP_ACCEPT_ENABLED 1
#define TRACE_XICS_ICP_EOI_ENABLED 1
#define TRACE_XICS_ICP_IRQ_ENABLED 1
#define TRACE_XICS_ICP_RAISE_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI_ENABLED 1
#define TRACE_XICS_MASKED_PENDING_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_WRITE_XIVE_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_REJECT_ENABLED 1
#define TRACE_XICS_ICS_SIMPLE_EOI_ENABLED 1
#define TRACE_FLIC_CREATE_DEVICE_ENABLED 1
#define TRACE_FLIC_NO_DEVICE_API_ENABLED 1
#define TRACE_FLIC_RESET_FAILED_ENABLED 1
#define TRACE_QEMU_S390_AIRQ_SUPPRESSED_ENABLED 1
#define TRACE_QEMU_S390_SUPPRESS_AIRQ_ENABLED 1
#define TRACE_ASPEED_VIC_SET_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_FIQ_ENABLED 1
#define TRACE_ASPEED_VIC_UPDATE_IRQ_ENABLED 1
#define TRACE_ASPEED_VIC_READ_ENABLED 1
#define TRACE_ASPEED_VIC_WRITE_ENABLED 1
#define TRACE_GIC_ENABLE_IRQ_ENABLED 1
#define TRACE_GIC_DISABLE_IRQ_ENABLED 1
#define TRACE_GIC_SET_IRQ_ENABLED 1
#define TRACE_GIC_UPDATE_BESTIRQ_ENABLED 1
#define TRACE_GIC_UPDATE_SET_IRQ_ENABLED 1
#define TRACE_GIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICC_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICC_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_AP_READ_ENABLED 1
#define TRACE_GICV3_ICC_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_READ_ENABLED 1
#define TRACE_GICV3_ICC_CTLR_EL3_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_SET_IRQS_ENABLED 1
#define TRACE_GICV3_ICC_GENERATE_SGI_ENABLED 1
#define TRACE_GICV3_ICC_IAR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_IAR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR0_READ_ENABLED 1
#define TRACE_GICV3_ICC_HPPIR1_READ_ENABLED 1
#define TRACE_GICV3_ICC_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICC_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_READ_ENABLED 1
#define TRACE_GICV3_ICH_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_HCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_HCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_READ_ENABLED 1
#define TRACE_GICV3_ICH_VMCR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR32_READ_ENABLED 1
#define TRACE_GICV3_ICH_LRC_READ_ENABLED 1
#define TRACE_GICV3_ICH_LR_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LR32_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_LRC_WRITE_ENABLED 1
#define TRACE_GICV3_ICH_VTR_READ_ENABLED 1
#define TRACE_GICV3_ICH_MISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_EISR_READ_ENABLED 1
#define TRACE_GICV3_ICH_ELRSR_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_READ_ENABLED 1
#define TRACE_GICV3_ICV_AP_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_BPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_BPR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_PMR_READ_ENABLED 1
#define TRACE_GICV3_ICV_PMR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_READ_ENABLED 1
#define TRACE_GICV3_ICV_IGRPEN_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_READ_ENABLED 1
#define TRACE_GICV3_ICV_CTLR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_RPR_READ_ENABLED 1
#define TRACE_GICV3_ICV_HPPIR_READ_ENABLED 1
#define TRACE_GICV3_ICV_DIR_WRITE_ENABLED 1
#define TRACE_GICV3_ICV_IAR_READ_ENABLED 1
#define TRACE_GICV3_ICV_EOIR_WRITE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_UPDATE_ENABLED 1
#define TRACE_GICV3_CPUIF_VIRT_SET_IRQS_ENABLED 1
#define TRACE_GICV3_DIST_READ_ENABLED 1
#define TRACE_GICV3_DIST_BADREAD_ENABLED 1
#define TRACE_GICV3_DIST_WRITE_ENABLED 1
#define TRACE_GICV3_DIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_DIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_READ_ENABLED 1
#define TRACE_GICV3_REDIST_BADREAD_ENABLED 1
#define TRACE_GICV3_REDIST_WRITE_ENABLED 1
#define TRACE_GICV3_REDIST_BADWRITE_ENABLED 1
#define TRACE_GICV3_REDIST_SET_IRQ_ENABLED 1
#define TRACE_GICV3_REDIST_SEND_SGI_ENABLED 1
#define TRACE_NVIC_RECOMPUTE_STATE_ENABLED 1
#define TRACE_NVIC_RECOMPUTE_STATE_SECURE_ENABLED 1
#define TRACE_NVIC_SET_PRIO_ENABLED 1
#define TRACE_NVIC_IRQ_UPDATE_ENABLED 1
#define TRACE_NVIC_ESCALATE_PRIO_ENABLED 1
#define TRACE_NVIC_ESCALATE_DISABLED_ENABLED 1
#define TRACE_NVIC_SET_PENDING_ENABLED 1
#define TRACE_NVIC_CLEAR_PENDING_ENABLED 1
#define TRACE_NVIC_SET_PENDING_LEVEL_ENABLED 1
#define TRACE_NVIC_ACKNOWLEDGE_IRQ_ENABLED 1
#define TRACE_NVIC_GET_PENDING_IRQ_INFO_ENABLED 1
#define TRACE_NVIC_COMPLETE_IRQ_ENABLED 1
#define TRACE_NVIC_SET_IRQ_LEVEL_ENABLED 1
#define TRACE_NVIC_SYSREG_READ_ENABLED 1
#define TRACE_NVIC_SYSREG_WRITE_ENABLED 1
#define TRACE_HEATHROW_WRITE_ENABLED 1
#define TRACE_HEATHROW_READ_ENABLED 1
#define TRACE_HEATHROW_SET_IRQ_ENABLED 1

#define TRACE_PIC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_pic_update_irq(bool master, uint8_t imr, uint8_t irr, uint8_t padd)
{
}

static inline void trace_pic_update_irq(bool master, uint8_t imr, uint8_t irr, uint8_t padd)
{
    if (true) {
        _nocheck__trace_pic_update_irq(master, imr, irr, padd);
    }
}

#define TRACE_PIC_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_pic_set_irq(bool master, int irq, int level)
{
}

static inline void trace_pic_set_irq(bool master, int irq, int level)
{
    if (true) {
        _nocheck__trace_pic_set_irq(master, irq, level);
    }
}

#define TRACE_PIC_INTERRUPT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_pic_interrupt(int irq, int intno)
{
}

static inline void trace_pic_interrupt(int irq, int intno)
{
    if (true) {
        _nocheck__trace_pic_interrupt(irq, intno);
    }
}

#define TRACE_PIC_IOPORT_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_pic_ioport_write(bool master, uint64_t addr, uint64_t val)
{
}

static inline void trace_pic_ioport_write(bool master, uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_pic_ioport_write(master, addr, val);
    }
}

#define TRACE_PIC_IOPORT_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_pic_ioport_read(bool master, uint64_t addr, int val)
{
}

static inline void trace_pic_ioport_read(bool master, uint64_t addr, int val)
{
    if (true) {
        _nocheck__trace_pic_ioport_read(master, addr, val);
    }
}

#define TRACE_CPU_SET_APIC_BASE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpu_set_apic_base(uint64_t val)
{
}

static inline void trace_cpu_set_apic_base(uint64_t val)
{
    if (true) {
        _nocheck__trace_cpu_set_apic_base(val);
    }
}

#define TRACE_CPU_GET_APIC_BASE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpu_get_apic_base(uint64_t val)
{
}

static inline void trace_cpu_get_apic_base(uint64_t val)
{
    if (true) {
        _nocheck__trace_cpu_get_apic_base(val);
    }
}

#define TRACE_APIC_REPORT_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_apic_report_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_report_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_report_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_RESET_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_reset_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_reset_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_GET_IRQ_DELIVERED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_apic_get_irq_delivered(int apic_irq_delivered)
{
}

static inline void trace_apic_get_irq_delivered(int apic_irq_delivered)
{
    if (true) {
        _nocheck__trace_apic_get_irq_delivered(apic_irq_delivered);
    }
}

#define TRACE_APIC_LOCAL_DELIVER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_apic_local_deliver(int vector, uint32_t lvt)
{
}

static inline void trace_apic_local_deliver(int vector, uint32_t lvt)
{
    if (true) {
        _nocheck__trace_apic_local_deliver(vector, lvt);
    }
}

#define TRACE_APIC_DELIVER_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
}

static inline void trace_apic_deliver_irq(uint8_t dest, uint8_t dest_mode, uint8_t delivery_mode, uint8_t vector_num, uint8_t trigger_mode)
{
    if (true) {
        _nocheck__trace_apic_deliver_irq(dest, dest_mode, delivery_mode, vector_num, trigger_mode);
    }
}

#define TRACE_APIC_MEM_READL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
}

static inline void trace_apic_mem_readl(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_apic_mem_readl(addr, val);
    }
}

#define TRACE_APIC_MEM_WRITEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_apic_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_apic_mem_writel(addr, val);
    }
}

#define TRACE_IOAPIC_SET_REMOTE_IRR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ioapic_set_remote_irr(int n)
{
}

static inline void trace_ioapic_set_remote_irr(int n)
{
    if (true) {
        _nocheck__trace_ioapic_set_remote_irr(n);
    }
}

#define TRACE_IOAPIC_CLEAR_REMOTE_IRR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ioapic_clear_remote_irr(int n, int vector)
{
}

static inline void trace_ioapic_clear_remote_irr(int n, int vector)
{
    if (true) {
        _nocheck__trace_ioapic_clear_remote_irr(n, vector);
    }
}

#define TRACE_IOAPIC_EOI_BROADCAST_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ioapic_eoi_broadcast(int vector)
{
}

static inline void trace_ioapic_eoi_broadcast(int vector)
{
    if (true) {
        _nocheck__trace_ioapic_eoi_broadcast(vector);
    }
}

#define TRACE_IOAPIC_MEM_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ioapic_mem_read(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
}

static inline void trace_ioapic_mem_read(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (true) {
        _nocheck__trace_ioapic_mem_read(addr, regsel, size, val);
    }
}

#define TRACE_IOAPIC_MEM_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ioapic_mem_write(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
}

static inline void trace_ioapic_mem_write(uint8_t addr, uint8_t regsel, uint8_t size, uint32_t val)
{
    if (true) {
        _nocheck__trace_ioapic_mem_write(addr, regsel, size, val);
    }
}

#define TRACE_IOAPIC_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ioapic_set_irq(int vector, int level)
{
}

static inline void trace_ioapic_set_irq(int vector, int level)
{
    if (true) {
        _nocheck__trace_ioapic_set_irq(vector, level);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_READL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctl_mem_readl(uint32_t cpu, uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_readl(cpu, addr, ret);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctl_mem_writel(uint32_t cpu, uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel(cpu, addr, val);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_CLEAR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctl_mem_writel_clear(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel_clear(cpu, val, intreg_pending);
    }
}

#define TRACE_SLAVIO_INTCTL_MEM_WRITEL_SET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
}

static inline void trace_slavio_intctl_mem_writel_set(uint32_t cpu, uint32_t val, uint32_t intreg_pending)
{
    if (true) {
        _nocheck__trace_slavio_intctl_mem_writel_set(cpu, val, intreg_pending);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_READL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
}

static inline void trace_slavio_intctlm_mem_readl(uint64_t addr, uint32_t ret)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_readl(addr, ret);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
}

static inline void trace_slavio_intctlm_mem_writel(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel(addr, val);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_ENABLE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_enable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_enable(val, intregm_disabled);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_DISABLE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_intctlm_mem_writel_disable(uint32_t val, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_disable(val, intregm_disabled);
    }
}

#define TRACE_SLAVIO_INTCTLM_MEM_WRITEL_TARGET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
}

static inline void trace_slavio_intctlm_mem_writel_target(uint32_t cpu)
{
    if (true) {
        _nocheck__trace_slavio_intctlm_mem_writel_target(cpu);
    }
}

#define TRACE_SLAVIO_CHECK_INTERRUPTS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
}

static inline void trace_slavio_check_interrupts(uint32_t pending, uint32_t intregm_disabled)
{
    if (true) {
        _nocheck__trace_slavio_check_interrupts(pending, intregm_disabled);
    }
}

#define TRACE_SLAVIO_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
}

static inline void trace_slavio_set_irq(uint32_t target_cpu, int irq, uint32_t pil, int level)
{
    if (true) {
        _nocheck__trace_slavio_set_irq(target_cpu, irq, pil, level);
    }
}

#define TRACE_SLAVIO_SET_TIMER_IRQ_CPU_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
}

static inline void trace_slavio_set_timer_irq_cpu(int cpu, int level)
{
    if (true) {
        _nocheck__trace_slavio_set_timer_irq_cpu(cpu, level);
    }
}

#define TRACE_GRLIB_IRQMP_CHECK_IRQS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
}

static inline void trace_grlib_irqmp_check_irqs(uint32_t pend, uint32_t force, uint32_t mask, uint32_t lvl1, uint32_t lvl2)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_check_irqs(pend, force, mask, lvl1, lvl2);
    }
}

#define TRACE_GRLIB_IRQMP_ACK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_grlib_irqmp_ack(int intno)
{
}

static inline void trace_grlib_irqmp_ack(int intno)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_ack(intno);
    }
}

#define TRACE_GRLIB_IRQMP_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_grlib_irqmp_set_irq(int irq)
{
}

static inline void trace_grlib_irqmp_set_irq(int irq)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_set_irq(irq);
    }
}

#define TRACE_GRLIB_IRQMP_READL_UNKNOWN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
}

static inline void trace_grlib_irqmp_readl_unknown(uint64_t addr)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_readl_unknown(addr);
    }
}

#define TRACE_GRLIB_IRQMP_WRITEL_UNKNOWN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
}

static inline void trace_grlib_irqmp_writel_unknown(uint64_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_grlib_irqmp_writel_unknown(addr, value);
    }
}

#define TRACE_LM32_PIC_RAISE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_lm32_pic_raise_irq(void)
{
}

static inline void trace_lm32_pic_raise_irq(void)
{
    if (true) {
        _nocheck__trace_lm32_pic_raise_irq();
    }
}

#define TRACE_LM32_PIC_LOWER_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_lm32_pic_lower_irq(void)
{
}

static inline void trace_lm32_pic_lower_irq(void)
{
    if (true) {
        _nocheck__trace_lm32_pic_lower_irq();
    }
}

#define TRACE_LM32_PIC_INTERRUPT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_lm32_pic_interrupt(int irq, int level)
{
}

static inline void trace_lm32_pic_interrupt(int irq, int level)
{
    if (true) {
        _nocheck__trace_lm32_pic_interrupt(irq, level);
    }
}

#define TRACE_LM32_PIC_SET_IM_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_lm32_pic_set_im(uint32_t im)
{
}

static inline void trace_lm32_pic_set_im(uint32_t im)
{
    if (true) {
        _nocheck__trace_lm32_pic_set_im(im);
    }
}

#define TRACE_LM32_PIC_SET_IP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_lm32_pic_set_ip(uint32_t ip)
{
}

static inline void trace_lm32_pic_set_ip(uint32_t ip)
{
    if (true) {
        _nocheck__trace_lm32_pic_set_ip(ip);
    }
}

#define TRACE_LM32_PIC_GET_IM_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_lm32_pic_get_im(uint32_t im)
{
}

static inline void trace_lm32_pic_get_im(uint32_t im)
{
    if (true) {
        _nocheck__trace_lm32_pic_get_im(im);
    }
}

#define TRACE_LM32_PIC_GET_IP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_lm32_pic_get_ip(uint32_t ip)
{
}

static inline void trace_lm32_pic_get_ip(uint32_t ip)
{
    if (true) {
        _nocheck__trace_lm32_pic_get_ip(ip);
    }
}

#define TRACE_XICS_ICP_CHECK_IPI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
}

static inline void trace_xics_icp_check_ipi(int server, uint8_t mfrr)
{
    if (true) {
        _nocheck__trace_xics_icp_check_ipi(server, mfrr);
    }
}

#define TRACE_XICS_ICP_ACCEPT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
}

static inline void trace_xics_icp_accept(uint32_t old_xirr, uint32_t new_xirr)
{
    if (true) {
        _nocheck__trace_xics_icp_accept(old_xirr, new_xirr);
    }
}

#define TRACE_XICS_ICP_EOI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
}

static inline void trace_xics_icp_eoi(int server, uint32_t xirr, uint32_t new_xirr)
{
    if (true) {
        _nocheck__trace_xics_icp_eoi(server, xirr, new_xirr);
    }
}

#define TRACE_XICS_ICP_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
}

static inline void trace_xics_icp_irq(int server, int nr, uint8_t priority)
{
    if (true) {
        _nocheck__trace_xics_icp_irq(server, nr, priority);
    }
}

#define TRACE_XICS_ICP_RAISE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
}

static inline void trace_xics_icp_raise(uint32_t xirr, uint8_t pending_priority)
{
    if (true) {
        _nocheck__trace_xics_icp_raise(xirr, pending_priority);
    }
}

#define TRACE_XICS_ICS_SIMPLE_SET_IRQ_MSI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_ics_simple_set_irq_msi(int srcno, int nr)
{
}

static inline void trace_xics_ics_simple_set_irq_msi(int srcno, int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_simple_set_irq_msi(srcno, nr);
    }
}

#define TRACE_XICS_MASKED_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_masked_pending(void)
{
}

static inline void trace_xics_masked_pending(void)
{
    if (true) {
        _nocheck__trace_xics_masked_pending();
    }
}

#define TRACE_XICS_ICS_SIMPLE_SET_IRQ_LSI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_ics_simple_set_irq_lsi(int srcno, int nr)
{
}

static inline void trace_xics_ics_simple_set_irq_lsi(int srcno, int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_simple_set_irq_lsi(srcno, nr);
    }
}

#define TRACE_XICS_ICS_SIMPLE_WRITE_XIVE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_ics_simple_write_xive(int nr, int srcno, int server, uint8_t priority)
{
}

static inline void trace_xics_ics_simple_write_xive(int nr, int srcno, int server, uint8_t priority)
{
    if (true) {
        _nocheck__trace_xics_ics_simple_write_xive(nr, srcno, server, priority);
    }
}

#define TRACE_XICS_ICS_SIMPLE_REJECT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_ics_simple_reject(int nr, int srcno)
{
}

static inline void trace_xics_ics_simple_reject(int nr, int srcno)
{
    if (true) {
        _nocheck__trace_xics_ics_simple_reject(nr, srcno);
    }
}

#define TRACE_XICS_ICS_SIMPLE_EOI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_xics_ics_simple_eoi(int nr)
{
}

static inline void trace_xics_ics_simple_eoi(int nr)
{
    if (true) {
        _nocheck__trace_xics_ics_simple_eoi(nr);
    }
}

#define TRACE_FLIC_CREATE_DEVICE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_flic_create_device(int err)
{
}

static inline void trace_flic_create_device(int err)
{
    if (true) {
        _nocheck__trace_flic_create_device(err);
    }
}

#define TRACE_FLIC_NO_DEVICE_API_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_flic_no_device_api(int err)
{
}

static inline void trace_flic_no_device_api(int err)
{
    if (true) {
        _nocheck__trace_flic_no_device_api(err);
    }
}

#define TRACE_FLIC_RESET_FAILED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_flic_reset_failed(int err)
{
}

static inline void trace_flic_reset_failed(int err)
{
    if (true) {
        _nocheck__trace_flic_reset_failed(err);
    }
}

#define TRACE_QEMU_S390_AIRQ_SUPPRESSED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_s390_airq_suppressed(uint8_t type, uint8_t isc)
{
}

static inline void trace_qemu_s390_airq_suppressed(uint8_t type, uint8_t isc)
{
    if (true) {
        _nocheck__trace_qemu_s390_airq_suppressed(type, isc);
    }
}

#define TRACE_QEMU_S390_SUPPRESS_AIRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qemu_s390_suppress_airq(uint8_t isc, const char * from, const char * to)
{
}

static inline void trace_qemu_s390_suppress_airq(uint8_t isc, const char * from, const char * to)
{
    if (true) {
        _nocheck__trace_qemu_s390_suppress_airq(isc, from, to);
    }
}

#define TRACE_ASPEED_VIC_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_aspeed_vic_set_irq(int irq, int level)
{
}

static inline void trace_aspeed_vic_set_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_aspeed_vic_set_irq(irq, level);
    }
}

#define TRACE_ASPEED_VIC_UPDATE_FIQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_aspeed_vic_update_fiq(int flags)
{
}

static inline void trace_aspeed_vic_update_fiq(int flags)
{
    if (true) {
        _nocheck__trace_aspeed_vic_update_fiq(flags);
    }
}

#define TRACE_ASPEED_VIC_UPDATE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_aspeed_vic_update_irq(int flags)
{
}

static inline void trace_aspeed_vic_update_irq(int flags)
{
    if (true) {
        _nocheck__trace_aspeed_vic_update_irq(flags);
    }
}

#define TRACE_ASPEED_VIC_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
}

static inline void trace_aspeed_vic_read(uint64_t offset, unsigned size, uint32_t value)
{
    if (true) {
        _nocheck__trace_aspeed_vic_read(offset, size, value);
    }
}

#define TRACE_ASPEED_VIC_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
}

static inline void trace_aspeed_vic_write(uint64_t offset, unsigned size, uint32_t data)
{
    if (true) {
        _nocheck__trace_aspeed_vic_write(offset, size, data);
    }
}

#define TRACE_GIC_ENABLE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gic_enable_irq(int irq)
{
}

static inline void trace_gic_enable_irq(int irq)
{
    if (true) {
        _nocheck__trace_gic_enable_irq(irq);
    }
}

#define TRACE_GIC_DISABLE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gic_disable_irq(int irq)
{
}

static inline void trace_gic_disable_irq(int irq)
{
    if (true) {
        _nocheck__trace_gic_disable_irq(irq);
    }
}

#define TRACE_GIC_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gic_set_irq(int irq, int level, int cpumask, int target)
{
}

static inline void trace_gic_set_irq(int irq, int level, int cpumask, int target)
{
    if (true) {
        _nocheck__trace_gic_set_irq(irq, level, cpumask, target);
    }
}

#define TRACE_GIC_UPDATE_BESTIRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gic_update_bestirq(int cpu, int irq, int prio, int priority_mask, int running_priority)
{
}

static inline void trace_gic_update_bestirq(int cpu, int irq, int prio, int priority_mask, int running_priority)
{
    if (true) {
        _nocheck__trace_gic_update_bestirq(cpu, irq, prio, priority_mask, running_priority);
    }
}

#define TRACE_GIC_UPDATE_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gic_update_set_irq(int cpu, const char * name, int level)
{
}

static inline void trace_gic_update_set_irq(int cpu, const char * name, int level)
{
    if (true) {
        _nocheck__trace_gic_update_set_irq(cpu, name, level);
    }
}

#define TRACE_GIC_ACKNOWLEDGE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gic_acknowledge_irq(int cpu, int irq)
{
}

static inline void trace_gic_acknowledge_irq(int cpu, int irq)
{
    if (true) {
        _nocheck__trace_gic_acknowledge_irq(cpu, irq);
    }
}

#define TRACE_GICV3_ICC_PMR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_pmr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_PMR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_pmr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_BPR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_bpr_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_BPR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_bpr_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_AP_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICC_AP_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN1_EL3_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_igrpen1_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen1_el3_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_IGRPEN1_EL3_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_igrpen1_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_igrpen1_el3_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_EL3_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_ctlr_el3_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_el3_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_CTLR_EL3_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_ctlr_el3_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_ctlr_el3_write(cpu, val);
    }
}

#define TRACE_GICV3_CPUIF_UPDATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio)
{
}

static inline void trace_gicv3_cpuif_update(uint32_t cpuid, int irq, int grp, int prio)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_update(cpuid, irq, grp, prio);
    }
}

#define TRACE_GICV3_CPUIF_SET_IRQS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel)
{
}

static inline void trace_gicv3_cpuif_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_set_irqs(cpuid, fiqlevel, irqlevel);
    }
}

#define TRACE_GICV3_ICC_GENERATE_SGI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist)
{
}

static inline void trace_gicv3_icc_generate_sgi(uint32_t cpuid, int irq, int irm, uint32_t aff, uint32_t targetlist)
{
    if (true) {
        _nocheck__trace_gicv3_icc_generate_sgi(cpuid, irq, irm, aff, targetlist);
    }
}

#define TRACE_GICV3_ICC_IAR0_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_iar0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_iar0_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_IAR1_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_iar1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_iar1_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_EOIR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_eoir_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICC_HPPIR0_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_hppir0_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_hppir0_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_HPPIR1_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_hppir1_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_hppir1_read(cpu, val);
    }
}

#define TRACE_GICV3_ICC_DIR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_dir_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_dir_write(cpu, val);
    }
}

#define TRACE_GICV3_ICC_RPR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icc_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icc_rpr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_AP_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_AP_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_HCR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_hcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_hcr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_HCR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_hcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_hcr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICH_VMCR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_vmcr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vmcr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_VMCR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_vmcr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vmcr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_lr_read(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR32_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val)
{
}

static inline void trace_gicv3_ich_lr32_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr32_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LRC_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val)
{
}

static inline void trace_gicv3_ich_lrc_read(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lrc_read(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_lr_write(int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LR32_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val)
{
}

static inline void trace_gicv3_ich_lr32_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lr32_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_LRC_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val)
{
}

static inline void trace_gicv3_ich_lrc_write(int regno, uint32_t cpu, uint32_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_lrc_write(regno, cpu, val);
    }
}

#define TRACE_GICV3_ICH_VTR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_vtr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_vtr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_MISR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_misr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_misr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_misr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_EISR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_eisr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_eisr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICH_ELRSR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_ich_elrsr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_ich_elrsr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_AP_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_ap_read(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ap_read(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICV_AP_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_ap_write(int grp, int regno, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ap_write(grp, regno, cpu, val);
    }
}

#define TRACE_GICV3_ICV_BPR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_bpr_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_bpr_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_BPR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_bpr_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_bpr_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_PMR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_pmr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_pmr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_PMR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_pmr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_pmr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_IGRPEN_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_igrpen_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_igrpen_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_IGRPEN_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_igrpen_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_igrpen_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_CTLR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_ctlr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ctlr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_CTLR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_ctlr_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_ctlr_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_RPR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_rpr_read(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_rpr_read(cpu, val);
    }
}

#define TRACE_GICV3_ICV_HPPIR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_hppir_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_hppir_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_DIR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_dir_write(uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_dir_write(uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_dir_write(cpu, val);
    }
}

#define TRACE_GICV3_ICV_IAR_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_iar_read(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_iar_read(grp, cpu, val);
    }
}

#define TRACE_GICV3_ICV_EOIR_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
}

static inline void trace_gicv3_icv_eoir_write(int grp, uint32_t cpu, uint64_t val)
{
    if (true) {
        _nocheck__trace_gicv3_icv_eoir_write(grp, cpu, val);
    }
}

#define TRACE_GICV3_CPUIF_VIRT_UPDATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_cpuif_virt_update(uint32_t cpuid, int idx)
{
}

static inline void trace_gicv3_cpuif_virt_update(uint32_t cpuid, int idx)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_virt_update(cpuid, idx);
    }
}

#define TRACE_GICV3_CPUIF_VIRT_SET_IRQS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel)
{
}

static inline void trace_gicv3_cpuif_virt_set_irqs(uint32_t cpuid, int fiqlevel, int irqlevel, int maintlevel)
{
    if (true) {
        _nocheck__trace_gicv3_cpuif_virt_set_irqs(cpuid, fiqlevel, irqlevel, maintlevel);
    }
}

#define TRACE_GICV3_DIST_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
}

static inline void trace_gicv3_dist_read(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_read(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_BADREAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure)
{
}

static inline void trace_gicv3_dist_badread(uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_badread(offset, size, secure);
    }
}

#define TRACE_GICV3_DIST_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
}

static inline void trace_gicv3_dist_write(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_write(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_BADWRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
}

static inline void trace_gicv3_dist_badwrite(uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_dist_badwrite(offset, data, size, secure);
    }
}

#define TRACE_GICV3_DIST_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_dist_set_irq(int irq, int level)
{
}

static inline void trace_gicv3_dist_set_irq(int irq, int level)
{
    if (true) {
        _nocheck__trace_gicv3_dist_set_irq(irq, level);
    }
}

#define TRACE_GICV3_REDIST_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
}

static inline void trace_gicv3_redist_read(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_read(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_BADREAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure)
{
}

static inline void trace_gicv3_redist_badread(uint32_t cpu, uint64_t offset, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_badread(cpu, offset, size, secure);
    }
}

#define TRACE_GICV3_REDIST_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
}

static inline void trace_gicv3_redist_write(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_write(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_BADWRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
}

static inline void trace_gicv3_redist_badwrite(uint32_t cpu, uint64_t offset, uint64_t data, unsigned size, bool secure)
{
    if (true) {
        _nocheck__trace_gicv3_redist_badwrite(cpu, offset, data, size, secure);
    }
}

#define TRACE_GICV3_REDIST_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_redist_set_irq(uint32_t cpu, int irq, int level)
{
}

static inline void trace_gicv3_redist_set_irq(uint32_t cpu, int irq, int level)
{
    if (true) {
        _nocheck__trace_gicv3_redist_set_irq(cpu, irq, level);
    }
}

#define TRACE_GICV3_REDIST_SEND_SGI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_gicv3_redist_send_sgi(uint32_t cpu, int irq)
{
}

static inline void trace_gicv3_redist_send_sgi(uint32_t cpu, int irq)
{
    if (true) {
        _nocheck__trace_gicv3_redist_send_sgi(cpu, irq);
    }
}

#define TRACE_NVIC_RECOMPUTE_STATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_recompute_state(int vectpending, int vectpending_prio, int exception_prio)
{
}

static inline void trace_nvic_recompute_state(int vectpending, int vectpending_prio, int exception_prio)
{
    if (true) {
        _nocheck__trace_nvic_recompute_state(vectpending, vectpending_prio, exception_prio);
    }
}

#define TRACE_NVIC_RECOMPUTE_STATE_SECURE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_recompute_state_secure(int vectpending, bool vectpending_is_s_banked, int vectpending_prio, int exception_prio)
{
}

static inline void trace_nvic_recompute_state_secure(int vectpending, bool vectpending_is_s_banked, int vectpending_prio, int exception_prio)
{
    if (true) {
        _nocheck__trace_nvic_recompute_state_secure(vectpending, vectpending_is_s_banked, vectpending_prio, exception_prio);
    }
}

#define TRACE_NVIC_SET_PRIO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_set_prio(int irq, bool secure, uint8_t prio)
{
}

static inline void trace_nvic_set_prio(int irq, bool secure, uint8_t prio)
{
    if (true) {
        _nocheck__trace_nvic_set_prio(irq, secure, prio);
    }
}

#define TRACE_NVIC_IRQ_UPDATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level)
{
}

static inline void trace_nvic_irq_update(int vectpending, int pendprio, int exception_prio, int level)
{
    if (true) {
        _nocheck__trace_nvic_irq_update(vectpending, pendprio, exception_prio, level);
    }
}

#define TRACE_NVIC_ESCALATE_PRIO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_escalate_prio(int irq, int irqprio, int runprio)
{
}

static inline void trace_nvic_escalate_prio(int irq, int irqprio, int runprio)
{
    if (true) {
        _nocheck__trace_nvic_escalate_prio(irq, irqprio, runprio);
    }
}

#define TRACE_NVIC_ESCALATE_DISABLED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_escalate_disabled(int irq)
{
}

static inline void trace_nvic_escalate_disabled(int irq)
{
    if (true) {
        _nocheck__trace_nvic_escalate_disabled(irq);
    }
}

#define TRACE_NVIC_SET_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_set_pending(int irq, bool secure, bool derived, int en, int prio)
{
}

static inline void trace_nvic_set_pending(int irq, bool secure, bool derived, int en, int prio)
{
    if (true) {
        _nocheck__trace_nvic_set_pending(irq, secure, derived, en, prio);
    }
}

#define TRACE_NVIC_CLEAR_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_clear_pending(int irq, bool secure, int en, int prio)
{
}

static inline void trace_nvic_clear_pending(int irq, bool secure, int en, int prio)
{
    if (true) {
        _nocheck__trace_nvic_clear_pending(irq, secure, en, prio);
    }
}

#define TRACE_NVIC_SET_PENDING_LEVEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_set_pending_level(int irq)
{
}

static inline void trace_nvic_set_pending_level(int irq)
{
    if (true) {
        _nocheck__trace_nvic_set_pending_level(irq);
    }
}

#define TRACE_NVIC_ACKNOWLEDGE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_acknowledge_irq(int irq, int prio)
{
}

static inline void trace_nvic_acknowledge_irq(int irq, int prio)
{
    if (true) {
        _nocheck__trace_nvic_acknowledge_irq(irq, prio);
    }
}

#define TRACE_NVIC_GET_PENDING_IRQ_INFO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_get_pending_irq_info(int irq, bool secure)
{
}

static inline void trace_nvic_get_pending_irq_info(int irq, bool secure)
{
    if (true) {
        _nocheck__trace_nvic_get_pending_irq_info(irq, secure);
    }
}

#define TRACE_NVIC_COMPLETE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_complete_irq(int irq, bool secure)
{
}

static inline void trace_nvic_complete_irq(int irq, bool secure)
{
    if (true) {
        _nocheck__trace_nvic_complete_irq(irq, secure);
    }
}

#define TRACE_NVIC_SET_IRQ_LEVEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_set_irq_level(int irq, int level)
{
}

static inline void trace_nvic_set_irq_level(int irq, int level)
{
    if (true) {
        _nocheck__trace_nvic_set_irq_level(irq, level);
    }
}

#define TRACE_NVIC_SYSREG_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size)
{
}

static inline void trace_nvic_sysreg_read(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nvic_sysreg_read(addr, value, size);
    }
}

#define TRACE_NVIC_SYSREG_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size)
{
}

static inline void trace_nvic_sysreg_write(uint64_t addr, uint32_t value, unsigned size)
{
    if (true) {
        _nocheck__trace_nvic_sysreg_write(addr, value, size);
    }
}

#define TRACE_HEATHROW_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_heathrow_write(uint64_t addr, unsigned int n, uint64_t value)
{
}

static inline void trace_heathrow_write(uint64_t addr, unsigned int n, uint64_t value)
{
    if (true) {
        _nocheck__trace_heathrow_write(addr, n, value);
    }
}

#define TRACE_HEATHROW_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_heathrow_read(uint64_t addr, unsigned int n, uint64_t value)
{
}

static inline void trace_heathrow_read(uint64_t addr, unsigned int n, uint64_t value)
{
    if (true) {
        _nocheck__trace_heathrow_read(addr, n, value);
    }
}

#define TRACE_HEATHROW_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_heathrow_set_irq(int num, int level)
{
}

static inline void trace_heathrow_set_irq(int num, int level)
{
    if (true) {
        _nocheck__trace_heathrow_set_irq(num, level);
    }
}
#endif /* TRACE_HW_INTC_GENERATED_TRACERS_H */
