/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_PPC_GENERATED_TRACERS_H
#define TRACE_HW_PPC_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_SPAPR_PCI_MSI_EVENT;
extern TraceEvent _TRACE_SPAPR_PCI_MSI_SETUP_EVENT;
extern TraceEvent _TRACE_SPAPR_PCI_RTAS_IBM_CHANGE_MSI_EVENT;
extern TraceEvent _TRACE_SPAPR_PCI_RTAS_IBM_QUERY_INTERRUPT_SOURCE_NUMBER_EVENT;
extern TraceEvent _TRACE_SPAPR_PCI_MSI_WRITE_EVENT;
extern TraceEvent _TRACE_SPAPR_PCI_LSI_SET_EVENT;
extern TraceEvent _TRACE_SPAPR_PCI_MSI_RETRY_EVENT;
extern TraceEvent _TRACE_SPAPR_CAS_FAILED_EVENT;
extern TraceEvent _TRACE_SPAPR_CAS_CONTINUE_EVENT;
extern TraceEvent _TRACE_SPAPR_IRQ_ALLOC_EVENT;
extern TraceEvent _TRACE_SPAPR_IRQ_ALLOC_BLOCK_EVENT;
extern TraceEvent _TRACE_SPAPR_IRQ_FREE_EVENT;
extern TraceEvent _TRACE_SPAPR_IRQ_FREE_WARN_EVENT;
extern TraceEvent _TRACE_SPAPR_CAS_PVR_TRY_EVENT;
extern TraceEvent _TRACE_SPAPR_CAS_PVR_EVENT;
extern TraceEvent _TRACE_SPAPR_H_RESIZE_HPT_PREPARE_EVENT;
extern TraceEvent _TRACE_SPAPR_H_RESIZE_HPT_COMMIT_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_PUT_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_GET_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_INDIRECT_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_STUFF_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_PCI_PUT_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_PCI_GET_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_PCI_INDIRECT_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_PCI_STUFF_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_XLATE_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_NEW_TABLE_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_PRE_SAVE_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_POST_LOAD_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_DDW_QUERY_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_DDW_CREATE_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_DDW_REMOVE_EVENT;
extern TraceEvent _TRACE_SPAPR_IOMMU_DDW_RESET_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_ISOLATION_STATE_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_ISOLATION_STATE_FINALIZING_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_ISOLATION_STATE_DEFERRING_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_DR_INDICATOR_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_FINALIZING_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_CONFIGURED_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_SET_CONFIGURED_SKIPPING_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_ATTACH_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_DETACH_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_AWAITING_QUIESCE_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_AWAITING_ALLOCATION_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_RESET_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_REALIZE_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_REALIZE_CHILD_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_REALIZE_COMPLETE_EVENT;
extern TraceEvent _TRACE_SPAPR_DRC_UNREALIZE_EVENT;
extern TraceEvent _TRACE_SPAPR_OVEC_PARSE_VECTOR_EVENT;
extern TraceEvent _TRACE_SPAPR_OVEC_POPULATE_DT_EVENT;
extern TraceEvent _TRACE_SPAPR_RTAS_GET_SENSOR_STATE_NOT_SUPPORTED_EVENT;
extern TraceEvent _TRACE_SPAPR_RTAS_GET_SENSOR_STATE_INVALID_EVENT;
extern TraceEvent _TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_INVALID_EVENT;
extern TraceEvent _TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_MISSING_FDT_EVENT;
extern TraceEvent _TRACE_SPAPR_VIO_H_REG_CRQ_EVENT;
extern TraceEvent _TRACE_SPAPR_VIO_FREE_CRQ_EVENT;
extern TraceEvent _TRACE_PPC_TB_ADJUST_EVENT;
extern TraceEvent _TRACE_PREP_IO_800_WRITEB_EVENT;
extern TraceEvent _TRACE_PREP_IO_800_READB_EVENT;
extern TraceEvent _TRACE_PREP_SYSTEMIO_READ_EVENT;
extern TraceEvent _TRACE_PREP_SYSTEMIO_WRITE_EVENT;
extern TraceEvent _TRACE_RS6000MC_ID_READ_EVENT;
extern TraceEvent _TRACE_RS6000MC_PRESENCE_READ_EVENT;
extern TraceEvent _TRACE_RS6000MC_SIZE_READ_EVENT;
extern TraceEvent _TRACE_RS6000MC_SIZE_WRITE_EVENT;
extern TraceEvent _TRACE_RS6000MC_PARITY_READ_EVENT;
extern TraceEvent _TRACE_MAC99_UNINORTH_WRITE_EVENT;
extern TraceEvent _TRACE_MAC99_UNINORTH_READ_EVENT;
extern TraceEvent _TRACE_PPC4XX_PCI_MAP_IRQ_EVENT;
extern TraceEvent _TRACE_PPC4XX_PCI_SET_IRQ_EVENT;
extern TraceEvent _TRACE_PPC440_PCIX_MAP_IRQ_EVENT;
extern TraceEvent _TRACE_PPC440_PCIX_SET_IRQ_EVENT;
extern TraceEvent _TRACE_PPC440_PCIX_UPDATE_PIM_EVENT;
extern TraceEvent _TRACE_PPC440_PCIX_UPDATE_POM_EVENT;
extern TraceEvent _TRACE_PPC440_PCIX_REG_READ_EVENT;
extern TraceEvent _TRACE_PPC440_PCIX_REG_WRITE_EVENT;
extern uint16_t _TRACE_SPAPR_PCI_MSI_DSTATE;
extern uint16_t _TRACE_SPAPR_PCI_MSI_SETUP_DSTATE;
extern uint16_t _TRACE_SPAPR_PCI_RTAS_IBM_CHANGE_MSI_DSTATE;
extern uint16_t _TRACE_SPAPR_PCI_RTAS_IBM_QUERY_INTERRUPT_SOURCE_NUMBER_DSTATE;
extern uint16_t _TRACE_SPAPR_PCI_MSI_WRITE_DSTATE;
extern uint16_t _TRACE_SPAPR_PCI_LSI_SET_DSTATE;
extern uint16_t _TRACE_SPAPR_PCI_MSI_RETRY_DSTATE;
extern uint16_t _TRACE_SPAPR_CAS_FAILED_DSTATE;
extern uint16_t _TRACE_SPAPR_CAS_CONTINUE_DSTATE;
extern uint16_t _TRACE_SPAPR_IRQ_ALLOC_DSTATE;
extern uint16_t _TRACE_SPAPR_IRQ_ALLOC_BLOCK_DSTATE;
extern uint16_t _TRACE_SPAPR_IRQ_FREE_DSTATE;
extern uint16_t _TRACE_SPAPR_IRQ_FREE_WARN_DSTATE;
extern uint16_t _TRACE_SPAPR_CAS_PVR_TRY_DSTATE;
extern uint16_t _TRACE_SPAPR_CAS_PVR_DSTATE;
extern uint16_t _TRACE_SPAPR_H_RESIZE_HPT_PREPARE_DSTATE;
extern uint16_t _TRACE_SPAPR_H_RESIZE_HPT_COMMIT_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_PUT_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_GET_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_INDIRECT_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_STUFF_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_PCI_PUT_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_PCI_GET_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_PCI_INDIRECT_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_PCI_STUFF_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_XLATE_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_NEW_TABLE_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_PRE_SAVE_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_POST_LOAD_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_DDW_QUERY_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_DDW_CREATE_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_DDW_REMOVE_DSTATE;
extern uint16_t _TRACE_SPAPR_IOMMU_DDW_RESET_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_ISOLATION_STATE_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_ISOLATION_STATE_FINALIZING_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_ISOLATION_STATE_DEFERRING_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_DR_INDICATOR_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_FINALIZING_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_CONFIGURED_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_SET_CONFIGURED_SKIPPING_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_ATTACH_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_DETACH_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_AWAITING_QUIESCE_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_AWAITING_ALLOCATION_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_RESET_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_REALIZE_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_REALIZE_CHILD_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_REALIZE_COMPLETE_DSTATE;
extern uint16_t _TRACE_SPAPR_DRC_UNREALIZE_DSTATE;
extern uint16_t _TRACE_SPAPR_OVEC_PARSE_VECTOR_DSTATE;
extern uint16_t _TRACE_SPAPR_OVEC_POPULATE_DT_DSTATE;
extern uint16_t _TRACE_SPAPR_RTAS_GET_SENSOR_STATE_NOT_SUPPORTED_DSTATE;
extern uint16_t _TRACE_SPAPR_RTAS_GET_SENSOR_STATE_INVALID_DSTATE;
extern uint16_t _TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_INVALID_DSTATE;
extern uint16_t _TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_MISSING_FDT_DSTATE;
extern uint16_t _TRACE_SPAPR_VIO_H_REG_CRQ_DSTATE;
extern uint16_t _TRACE_SPAPR_VIO_FREE_CRQ_DSTATE;
extern uint16_t _TRACE_PPC_TB_ADJUST_DSTATE;
extern uint16_t _TRACE_PREP_IO_800_WRITEB_DSTATE;
extern uint16_t _TRACE_PREP_IO_800_READB_DSTATE;
extern uint16_t _TRACE_PREP_SYSTEMIO_READ_DSTATE;
extern uint16_t _TRACE_PREP_SYSTEMIO_WRITE_DSTATE;
extern uint16_t _TRACE_RS6000MC_ID_READ_DSTATE;
extern uint16_t _TRACE_RS6000MC_PRESENCE_READ_DSTATE;
extern uint16_t _TRACE_RS6000MC_SIZE_READ_DSTATE;
extern uint16_t _TRACE_RS6000MC_SIZE_WRITE_DSTATE;
extern uint16_t _TRACE_RS6000MC_PARITY_READ_DSTATE;
extern uint16_t _TRACE_MAC99_UNINORTH_WRITE_DSTATE;
extern uint16_t _TRACE_MAC99_UNINORTH_READ_DSTATE;
extern uint16_t _TRACE_PPC4XX_PCI_MAP_IRQ_DSTATE;
extern uint16_t _TRACE_PPC4XX_PCI_SET_IRQ_DSTATE;
extern uint16_t _TRACE_PPC440_PCIX_MAP_IRQ_DSTATE;
extern uint16_t _TRACE_PPC440_PCIX_SET_IRQ_DSTATE;
extern uint16_t _TRACE_PPC440_PCIX_UPDATE_PIM_DSTATE;
extern uint16_t _TRACE_PPC440_PCIX_UPDATE_POM_DSTATE;
extern uint16_t _TRACE_PPC440_PCIX_REG_READ_DSTATE;
extern uint16_t _TRACE_PPC440_PCIX_REG_WRITE_DSTATE;
#define TRACE_SPAPR_PCI_MSI_ENABLED 1
#define TRACE_SPAPR_PCI_MSI_SETUP_ENABLED 1
#define TRACE_SPAPR_PCI_RTAS_IBM_CHANGE_MSI_ENABLED 1
#define TRACE_SPAPR_PCI_RTAS_IBM_QUERY_INTERRUPT_SOURCE_NUMBER_ENABLED 1
#define TRACE_SPAPR_PCI_MSI_WRITE_ENABLED 1
#define TRACE_SPAPR_PCI_LSI_SET_ENABLED 1
#define TRACE_SPAPR_PCI_MSI_RETRY_ENABLED 1
#define TRACE_SPAPR_CAS_FAILED_ENABLED 1
#define TRACE_SPAPR_CAS_CONTINUE_ENABLED 1
#define TRACE_SPAPR_IRQ_ALLOC_ENABLED 1
#define TRACE_SPAPR_IRQ_ALLOC_BLOCK_ENABLED 1
#define TRACE_SPAPR_IRQ_FREE_ENABLED 1
#define TRACE_SPAPR_IRQ_FREE_WARN_ENABLED 1
#define TRACE_SPAPR_CAS_PVR_TRY_ENABLED 1
#define TRACE_SPAPR_CAS_PVR_ENABLED 1
#define TRACE_SPAPR_H_RESIZE_HPT_PREPARE_ENABLED 1
#define TRACE_SPAPR_H_RESIZE_HPT_COMMIT_ENABLED 1
#define TRACE_SPAPR_IOMMU_PUT_ENABLED 1
#define TRACE_SPAPR_IOMMU_GET_ENABLED 1
#define TRACE_SPAPR_IOMMU_INDIRECT_ENABLED 1
#define TRACE_SPAPR_IOMMU_STUFF_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_PUT_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_GET_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_INDIRECT_ENABLED 1
#define TRACE_SPAPR_IOMMU_PCI_STUFF_ENABLED 1
#define TRACE_SPAPR_IOMMU_XLATE_ENABLED 1
#define TRACE_SPAPR_IOMMU_NEW_TABLE_ENABLED 1
#define TRACE_SPAPR_IOMMU_PRE_SAVE_ENABLED 1
#define TRACE_SPAPR_IOMMU_POST_LOAD_ENABLED 1
#define TRACE_SPAPR_IOMMU_DDW_QUERY_ENABLED 1
#define TRACE_SPAPR_IOMMU_DDW_CREATE_ENABLED 1
#define TRACE_SPAPR_IOMMU_DDW_REMOVE_ENABLED 1
#define TRACE_SPAPR_IOMMU_DDW_RESET_ENABLED 1
#define TRACE_SPAPR_DRC_SET_ISOLATION_STATE_ENABLED 1
#define TRACE_SPAPR_DRC_SET_ISOLATION_STATE_FINALIZING_ENABLED 1
#define TRACE_SPAPR_DRC_SET_ISOLATION_STATE_DEFERRING_ENABLED 1
#define TRACE_SPAPR_DRC_SET_DR_INDICATOR_ENABLED 1
#define TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_ENABLED 1
#define TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_FINALIZING_ENABLED 1
#define TRACE_SPAPR_DRC_SET_CONFIGURED_ENABLED 1
#define TRACE_SPAPR_DRC_SET_CONFIGURED_SKIPPING_ENABLED 1
#define TRACE_SPAPR_DRC_ATTACH_ENABLED 1
#define TRACE_SPAPR_DRC_DETACH_ENABLED 1
#define TRACE_SPAPR_DRC_AWAITING_QUIESCE_ENABLED 1
#define TRACE_SPAPR_DRC_AWAITING_ALLOCATION_ENABLED 1
#define TRACE_SPAPR_DRC_RESET_ENABLED 1
#define TRACE_SPAPR_DRC_REALIZE_ENABLED 1
#define TRACE_SPAPR_DRC_REALIZE_CHILD_ENABLED 1
#define TRACE_SPAPR_DRC_REALIZE_COMPLETE_ENABLED 1
#define TRACE_SPAPR_DRC_UNREALIZE_ENABLED 1
#define TRACE_SPAPR_OVEC_PARSE_VECTOR_ENABLED 1
#define TRACE_SPAPR_OVEC_POPULATE_DT_ENABLED 1
#define TRACE_SPAPR_RTAS_GET_SENSOR_STATE_NOT_SUPPORTED_ENABLED 1
#define TRACE_SPAPR_RTAS_GET_SENSOR_STATE_INVALID_ENABLED 1
#define TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_INVALID_ENABLED 1
#define TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_MISSING_FDT_ENABLED 1
#define TRACE_SPAPR_VIO_H_REG_CRQ_ENABLED 1
#define TRACE_SPAPR_VIO_FREE_CRQ_ENABLED 1
#define TRACE_PPC_TB_ADJUST_ENABLED 1
#define TRACE_PREP_IO_800_WRITEB_ENABLED 1
#define TRACE_PREP_IO_800_READB_ENABLED 1
#define TRACE_PREP_SYSTEMIO_READ_ENABLED 1
#define TRACE_PREP_SYSTEMIO_WRITE_ENABLED 1
#define TRACE_RS6000MC_ID_READ_ENABLED 1
#define TRACE_RS6000MC_PRESENCE_READ_ENABLED 1
#define TRACE_RS6000MC_SIZE_READ_ENABLED 1
#define TRACE_RS6000MC_SIZE_WRITE_ENABLED 1
#define TRACE_RS6000MC_PARITY_READ_ENABLED 1
#define TRACE_MAC99_UNINORTH_WRITE_ENABLED 1
#define TRACE_MAC99_UNINORTH_READ_ENABLED 1
#define TRACE_PPC4XX_PCI_MAP_IRQ_ENABLED 1
#define TRACE_PPC4XX_PCI_SET_IRQ_ENABLED 1
#define TRACE_PPC440_PCIX_MAP_IRQ_ENABLED 1
#define TRACE_PPC440_PCIX_SET_IRQ_ENABLED 1
#define TRACE_PPC440_PCIX_UPDATE_PIM_ENABLED 1
#define TRACE_PPC440_PCIX_UPDATE_POM_ENABLED 1
#define TRACE_PPC440_PCIX_REG_READ_ENABLED 1
#define TRACE_PPC440_PCIX_REG_WRITE_ENABLED 1

#define TRACE_SPAPR_PCI_MSI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_pci_msi(const char * msg, uint32_t ca)
{
}

static inline void trace_spapr_pci_msi(const char * msg, uint32_t ca)
{
    if (true) {
        _nocheck__trace_spapr_pci_msi(msg, ca);
    }
}

#define TRACE_SPAPR_PCI_MSI_SETUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_pci_msi_setup(const char * name, unsigned vector, uint64_t addr)
{
}

static inline void trace_spapr_pci_msi_setup(const char * name, unsigned vector, uint64_t addr)
{
    if (true) {
        _nocheck__trace_spapr_pci_msi_setup(name, vector, addr);
    }
}

#define TRACE_SPAPR_PCI_RTAS_IBM_CHANGE_MSI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_pci_rtas_ibm_change_msi(unsigned cfg, unsigned func, unsigned req, unsigned first)
{
}

static inline void trace_spapr_pci_rtas_ibm_change_msi(unsigned cfg, unsigned func, unsigned req, unsigned first)
{
    if (true) {
        _nocheck__trace_spapr_pci_rtas_ibm_change_msi(cfg, func, req, first);
    }
}

#define TRACE_SPAPR_PCI_RTAS_IBM_QUERY_INTERRUPT_SOURCE_NUMBER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_pci_rtas_ibm_query_interrupt_source_number(unsigned ioa, unsigned intr)
{
}

static inline void trace_spapr_pci_rtas_ibm_query_interrupt_source_number(unsigned ioa, unsigned intr)
{
    if (true) {
        _nocheck__trace_spapr_pci_rtas_ibm_query_interrupt_source_number(ioa, intr);
    }
}

#define TRACE_SPAPR_PCI_MSI_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_pci_msi_write(uint64_t addr, uint64_t data, uint32_t dt_irq)
{
}

static inline void trace_spapr_pci_msi_write(uint64_t addr, uint64_t data, uint32_t dt_irq)
{
    if (true) {
        _nocheck__trace_spapr_pci_msi_write(addr, data, dt_irq);
    }
}

#define TRACE_SPAPR_PCI_LSI_SET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_pci_lsi_set(const char * busname, int pin, uint32_t irq)
{
}

static inline void trace_spapr_pci_lsi_set(const char * busname, int pin, uint32_t irq)
{
    if (true) {
        _nocheck__trace_spapr_pci_lsi_set(busname, pin, irq);
    }
}

#define TRACE_SPAPR_PCI_MSI_RETRY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_pci_msi_retry(unsigned config_addr, unsigned req_num, unsigned max_irqs)
{
}

static inline void trace_spapr_pci_msi_retry(unsigned config_addr, unsigned req_num, unsigned max_irqs)
{
    if (true) {
        _nocheck__trace_spapr_pci_msi_retry(config_addr, req_num, max_irqs);
    }
}

#define TRACE_SPAPR_CAS_FAILED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_cas_failed(unsigned long n)
{
}

static inline void trace_spapr_cas_failed(unsigned long n)
{
    if (true) {
        _nocheck__trace_spapr_cas_failed(n);
    }
}

#define TRACE_SPAPR_CAS_CONTINUE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_cas_continue(unsigned long n)
{
}

static inline void trace_spapr_cas_continue(unsigned long n)
{
    if (true) {
        _nocheck__trace_spapr_cas_continue(n);
    }
}

#define TRACE_SPAPR_IRQ_ALLOC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_irq_alloc(int irq)
{
}

static inline void trace_spapr_irq_alloc(int irq)
{
    if (true) {
        _nocheck__trace_spapr_irq_alloc(irq);
    }
}

#define TRACE_SPAPR_IRQ_ALLOC_BLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_irq_alloc_block(int first, int num, bool lsi, int align)
{
}

static inline void trace_spapr_irq_alloc_block(int first, int num, bool lsi, int align)
{
    if (true) {
        _nocheck__trace_spapr_irq_alloc_block(first, num, lsi, align);
    }
}

#define TRACE_SPAPR_IRQ_FREE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_irq_free(int src, int irq, int num)
{
}

static inline void trace_spapr_irq_free(int src, int irq, int num)
{
    if (true) {
        _nocheck__trace_spapr_irq_free(src, irq, num);
    }
}

#define TRACE_SPAPR_IRQ_FREE_WARN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_irq_free_warn(int src, int irq)
{
}

static inline void trace_spapr_irq_free_warn(int src, int irq)
{
    if (true) {
        _nocheck__trace_spapr_irq_free_warn(src, irq);
    }
}

#define TRACE_SPAPR_CAS_PVR_TRY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_cas_pvr_try(uint32_t pvr)
{
}

static inline void trace_spapr_cas_pvr_try(uint32_t pvr)
{
    if (true) {
        _nocheck__trace_spapr_cas_pvr_try(pvr);
    }
}

#define TRACE_SPAPR_CAS_PVR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_cas_pvr(uint32_t cur_pvr, bool explicit_match, uint32_t new_pvr)
{
}

static inline void trace_spapr_cas_pvr(uint32_t cur_pvr, bool explicit_match, uint32_t new_pvr)
{
    if (true) {
        _nocheck__trace_spapr_cas_pvr(cur_pvr, explicit_match, new_pvr);
    }
}

#define TRACE_SPAPR_H_RESIZE_HPT_PREPARE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_h_resize_hpt_prepare(uint64_t flags, uint64_t shift)
{
}

static inline void trace_spapr_h_resize_hpt_prepare(uint64_t flags, uint64_t shift)
{
    if (true) {
        _nocheck__trace_spapr_h_resize_hpt_prepare(flags, shift);
    }
}

#define TRACE_SPAPR_H_RESIZE_HPT_COMMIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_h_resize_hpt_commit(uint64_t flags, uint64_t shift)
{
}

static inline void trace_spapr_h_resize_hpt_commit(uint64_t flags, uint64_t shift)
{
    if (true) {
        _nocheck__trace_spapr_h_resize_hpt_commit(flags, shift);
    }
}

#define TRACE_SPAPR_IOMMU_PUT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_put(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t ret)
{
}

static inline void trace_spapr_iommu_put(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t ret)
{
    if (true) {
        _nocheck__trace_spapr_iommu_put(liobn, ioba, tce, ret);
    }
}

#define TRACE_SPAPR_IOMMU_GET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_get(uint64_t liobn, uint64_t ioba, uint64_t ret, uint64_t tce)
{
}

static inline void trace_spapr_iommu_get(uint64_t liobn, uint64_t ioba, uint64_t ret, uint64_t tce)
{
    if (true) {
        _nocheck__trace_spapr_iommu_get(liobn, ioba, ret, tce);
    }
}

#define TRACE_SPAPR_IOMMU_INDIRECT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_indirect(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t iobaN, uint64_t tceN, uint64_t ret)
{
}

static inline void trace_spapr_iommu_indirect(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t iobaN, uint64_t tceN, uint64_t ret)
{
    if (true) {
        _nocheck__trace_spapr_iommu_indirect(liobn, ioba, tce, iobaN, tceN, ret);
    }
}

#define TRACE_SPAPR_IOMMU_STUFF_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_stuff(uint64_t liobn, uint64_t ioba, uint64_t tce_value, uint64_t npages, uint64_t ret)
{
}

static inline void trace_spapr_iommu_stuff(uint64_t liobn, uint64_t ioba, uint64_t tce_value, uint64_t npages, uint64_t ret)
{
    if (true) {
        _nocheck__trace_spapr_iommu_stuff(liobn, ioba, tce_value, npages, ret);
    }
}

#define TRACE_SPAPR_IOMMU_PCI_PUT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_pci_put(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t ret)
{
}

static inline void trace_spapr_iommu_pci_put(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t ret)
{
    if (true) {
        _nocheck__trace_spapr_iommu_pci_put(liobn, ioba, tce, ret);
    }
}

#define TRACE_SPAPR_IOMMU_PCI_GET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_pci_get(uint64_t liobn, uint64_t ioba, uint64_t ret, uint64_t tce)
{
}

static inline void trace_spapr_iommu_pci_get(uint64_t liobn, uint64_t ioba, uint64_t ret, uint64_t tce)
{
    if (true) {
        _nocheck__trace_spapr_iommu_pci_get(liobn, ioba, ret, tce);
    }
}

#define TRACE_SPAPR_IOMMU_PCI_INDIRECT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_pci_indirect(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t iobaN, uint64_t tceN, uint64_t ret)
{
}

static inline void trace_spapr_iommu_pci_indirect(uint64_t liobn, uint64_t ioba, uint64_t tce, uint64_t iobaN, uint64_t tceN, uint64_t ret)
{
    if (true) {
        _nocheck__trace_spapr_iommu_pci_indirect(liobn, ioba, tce, iobaN, tceN, ret);
    }
}

#define TRACE_SPAPR_IOMMU_PCI_STUFF_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_pci_stuff(uint64_t liobn, uint64_t ioba, uint64_t tce_value, uint64_t npages, uint64_t ret)
{
}

static inline void trace_spapr_iommu_pci_stuff(uint64_t liobn, uint64_t ioba, uint64_t tce_value, uint64_t npages, uint64_t ret)
{
    if (true) {
        _nocheck__trace_spapr_iommu_pci_stuff(liobn, ioba, tce_value, npages, ret);
    }
}

#define TRACE_SPAPR_IOMMU_XLATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_xlate(uint64_t liobn, uint64_t ioba, uint64_t tce, unsigned perm, unsigned pgsize)
{
}

static inline void trace_spapr_iommu_xlate(uint64_t liobn, uint64_t ioba, uint64_t tce, unsigned perm, unsigned pgsize)
{
    if (true) {
        _nocheck__trace_spapr_iommu_xlate(liobn, ioba, tce, perm, pgsize);
    }
}

#define TRACE_SPAPR_IOMMU_NEW_TABLE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_new_table(uint64_t liobn, void * table, int fd)
{
}

static inline void trace_spapr_iommu_new_table(uint64_t liobn, void * table, int fd)
{
    if (true) {
        _nocheck__trace_spapr_iommu_new_table(liobn, table, fd);
    }
}

#define TRACE_SPAPR_IOMMU_PRE_SAVE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_pre_save(uint64_t liobn, uint32_t nb, uint64_t offs, uint32_t ps)
{
}

static inline void trace_spapr_iommu_pre_save(uint64_t liobn, uint32_t nb, uint64_t offs, uint32_t ps)
{
    if (true) {
        _nocheck__trace_spapr_iommu_pre_save(liobn, nb, offs, ps);
    }
}

#define TRACE_SPAPR_IOMMU_POST_LOAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_post_load(uint64_t liobn, uint32_t pre_nb, uint32_t post_nb, uint64_t offs, uint32_t ps)
{
}

static inline void trace_spapr_iommu_post_load(uint64_t liobn, uint32_t pre_nb, uint32_t post_nb, uint64_t offs, uint32_t ps)
{
    if (true) {
        _nocheck__trace_spapr_iommu_post_load(liobn, pre_nb, post_nb, offs, ps);
    }
}

#define TRACE_SPAPR_IOMMU_DDW_QUERY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_ddw_query(uint64_t buid, uint32_t cfgaddr, unsigned wa, uint64_t win_size, uint32_t pgmask)
{
}

static inline void trace_spapr_iommu_ddw_query(uint64_t buid, uint32_t cfgaddr, unsigned wa, uint64_t win_size, uint32_t pgmask)
{
    if (true) {
        _nocheck__trace_spapr_iommu_ddw_query(buid, cfgaddr, wa, win_size, pgmask);
    }
}

#define TRACE_SPAPR_IOMMU_DDW_CREATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_ddw_create(uint64_t buid, uint32_t cfgaddr, uint64_t pg_size, uint64_t req_size, uint64_t start, uint32_t liobn)
{
}

static inline void trace_spapr_iommu_ddw_create(uint64_t buid, uint32_t cfgaddr, uint64_t pg_size, uint64_t req_size, uint64_t start, uint32_t liobn)
{
    if (true) {
        _nocheck__trace_spapr_iommu_ddw_create(buid, cfgaddr, pg_size, req_size, start, liobn);
    }
}

#define TRACE_SPAPR_IOMMU_DDW_REMOVE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_ddw_remove(uint32_t liobn)
{
}

static inline void trace_spapr_iommu_ddw_remove(uint32_t liobn)
{
    if (true) {
        _nocheck__trace_spapr_iommu_ddw_remove(liobn);
    }
}

#define TRACE_SPAPR_IOMMU_DDW_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_iommu_ddw_reset(uint64_t buid, uint32_t cfgaddr)
{
}

static inline void trace_spapr_iommu_ddw_reset(uint64_t buid, uint32_t cfgaddr)
{
    if (true) {
        _nocheck__trace_spapr_iommu_ddw_reset(buid, cfgaddr);
    }
}

#define TRACE_SPAPR_DRC_SET_ISOLATION_STATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_isolation_state(uint32_t index, int state)
{
}

static inline void trace_spapr_drc_set_isolation_state(uint32_t index, int state)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_isolation_state(index, state);
    }
}

#define TRACE_SPAPR_DRC_SET_ISOLATION_STATE_FINALIZING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_isolation_state_finalizing(uint32_t index)
{
}

static inline void trace_spapr_drc_set_isolation_state_finalizing(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_isolation_state_finalizing(index);
    }
}

#define TRACE_SPAPR_DRC_SET_ISOLATION_STATE_DEFERRING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_isolation_state_deferring(uint32_t index)
{
}

static inline void trace_spapr_drc_set_isolation_state_deferring(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_isolation_state_deferring(index);
    }
}

#define TRACE_SPAPR_DRC_SET_DR_INDICATOR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_dr_indicator(uint32_t index, int state)
{
}

static inline void trace_spapr_drc_set_dr_indicator(uint32_t index, int state)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_dr_indicator(index, state);
    }
}

#define TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_allocation_state(uint32_t index, int state)
{
}

static inline void trace_spapr_drc_set_allocation_state(uint32_t index, int state)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_allocation_state(index, state);
    }
}

#define TRACE_SPAPR_DRC_SET_ALLOCATION_STATE_FINALIZING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_allocation_state_finalizing(uint32_t index)
{
}

static inline void trace_spapr_drc_set_allocation_state_finalizing(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_allocation_state_finalizing(index);
    }
}

#define TRACE_SPAPR_DRC_SET_CONFIGURED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_configured(uint32_t index)
{
}

static inline void trace_spapr_drc_set_configured(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_configured(index);
    }
}

#define TRACE_SPAPR_DRC_SET_CONFIGURED_SKIPPING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_set_configured_skipping(uint32_t index)
{
}

static inline void trace_spapr_drc_set_configured_skipping(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_set_configured_skipping(index);
    }
}

#define TRACE_SPAPR_DRC_ATTACH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_attach(uint32_t index)
{
}

static inline void trace_spapr_drc_attach(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_attach(index);
    }
}

#define TRACE_SPAPR_DRC_DETACH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_detach(uint32_t index)
{
}

static inline void trace_spapr_drc_detach(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_detach(index);
    }
}

#define TRACE_SPAPR_DRC_AWAITING_QUIESCE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_awaiting_quiesce(uint32_t index)
{
}

static inline void trace_spapr_drc_awaiting_quiesce(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_awaiting_quiesce(index);
    }
}

#define TRACE_SPAPR_DRC_AWAITING_ALLOCATION_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_awaiting_allocation(uint32_t index)
{
}

static inline void trace_spapr_drc_awaiting_allocation(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_awaiting_allocation(index);
    }
}

#define TRACE_SPAPR_DRC_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_reset(uint32_t index)
{
}

static inline void trace_spapr_drc_reset(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_reset(index);
    }
}

#define TRACE_SPAPR_DRC_REALIZE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_realize(uint32_t index)
{
}

static inline void trace_spapr_drc_realize(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_realize(index);
    }
}

#define TRACE_SPAPR_DRC_REALIZE_CHILD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_realize_child(uint32_t index, char * childname)
{
}

static inline void trace_spapr_drc_realize_child(uint32_t index, char * childname)
{
    if (true) {
        _nocheck__trace_spapr_drc_realize_child(index, childname);
    }
}

#define TRACE_SPAPR_DRC_REALIZE_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_realize_complete(uint32_t index)
{
}

static inline void trace_spapr_drc_realize_complete(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_realize_complete(index);
    }
}

#define TRACE_SPAPR_DRC_UNREALIZE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_drc_unrealize(uint32_t index)
{
}

static inline void trace_spapr_drc_unrealize(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_drc_unrealize(index);
    }
}

#define TRACE_SPAPR_OVEC_PARSE_VECTOR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_ovec_parse_vector(int vector, int byte, uint16_t vec_len, uint8_t entry)
{
}

static inline void trace_spapr_ovec_parse_vector(int vector, int byte, uint16_t vec_len, uint8_t entry)
{
    if (true) {
        _nocheck__trace_spapr_ovec_parse_vector(vector, byte, vec_len, entry);
    }
}

#define TRACE_SPAPR_OVEC_POPULATE_DT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_ovec_populate_dt(int byte, uint16_t vec_len, uint8_t entry)
{
}

static inline void trace_spapr_ovec_populate_dt(int byte, uint16_t vec_len, uint8_t entry)
{
    if (true) {
        _nocheck__trace_spapr_ovec_populate_dt(byte, vec_len, entry);
    }
}

#define TRACE_SPAPR_RTAS_GET_SENSOR_STATE_NOT_SUPPORTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_rtas_get_sensor_state_not_supported(uint32_t index, uint32_t type)
{
}

static inline void trace_spapr_rtas_get_sensor_state_not_supported(uint32_t index, uint32_t type)
{
    if (true) {
        _nocheck__trace_spapr_rtas_get_sensor_state_not_supported(index, type);
    }
}

#define TRACE_SPAPR_RTAS_GET_SENSOR_STATE_INVALID_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_rtas_get_sensor_state_invalid(uint32_t index)
{
}

static inline void trace_spapr_rtas_get_sensor_state_invalid(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_rtas_get_sensor_state_invalid(index);
    }
}

#define TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_INVALID_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_rtas_ibm_configure_connector_invalid(uint32_t index)
{
}

static inline void trace_spapr_rtas_ibm_configure_connector_invalid(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_rtas_ibm_configure_connector_invalid(index);
    }
}

#define TRACE_SPAPR_RTAS_IBM_CONFIGURE_CONNECTOR_MISSING_FDT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_rtas_ibm_configure_connector_missing_fdt(uint32_t index)
{
}

static inline void trace_spapr_rtas_ibm_configure_connector_missing_fdt(uint32_t index)
{
    if (true) {
        _nocheck__trace_spapr_rtas_ibm_configure_connector_missing_fdt(index);
    }
}

#define TRACE_SPAPR_VIO_H_REG_CRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_vio_h_reg_crq(uint64_t reg, uint64_t queue_addr, uint64_t queue_len)
{
}

static inline void trace_spapr_vio_h_reg_crq(uint64_t reg, uint64_t queue_addr, uint64_t queue_len)
{
    if (true) {
        _nocheck__trace_spapr_vio_h_reg_crq(reg, queue_addr, queue_len);
    }
}

#define TRACE_SPAPR_VIO_FREE_CRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_spapr_vio_free_crq(uint32_t reg)
{
}

static inline void trace_spapr_vio_free_crq(uint32_t reg)
{
    if (true) {
        _nocheck__trace_spapr_vio_free_crq(reg);
    }
}

#define TRACE_PPC_TB_ADJUST_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc_tb_adjust(uint64_t offs1, uint64_t offs2, int64_t diff, int64_t seconds)
{
}

static inline void trace_ppc_tb_adjust(uint64_t offs1, uint64_t offs2, int64_t diff, int64_t seconds)
{
    if (true) {
        _nocheck__trace_ppc_tb_adjust(offs1, offs2, diff, seconds);
    }
}

#define TRACE_PREP_IO_800_WRITEB_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_prep_io_800_writeb(uint32_t addr, uint32_t val)
{
}

static inline void trace_prep_io_800_writeb(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_prep_io_800_writeb(addr, val);
    }
}

#define TRACE_PREP_IO_800_READB_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_prep_io_800_readb(uint32_t addr, uint32_t retval)
{
}

static inline void trace_prep_io_800_readb(uint32_t addr, uint32_t retval)
{
    if (true) {
        _nocheck__trace_prep_io_800_readb(addr, retval);
    }
}

#define TRACE_PREP_SYSTEMIO_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_prep_systemio_read(uint32_t addr, uint32_t val)
{
}

static inline void trace_prep_systemio_read(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_prep_systemio_read(addr, val);
    }
}

#define TRACE_PREP_SYSTEMIO_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_prep_systemio_write(uint32_t addr, uint32_t val)
{
}

static inline void trace_prep_systemio_write(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_prep_systemio_write(addr, val);
    }
}

#define TRACE_RS6000MC_ID_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rs6000mc_id_read(uint32_t addr, uint32_t val)
{
}

static inline void trace_rs6000mc_id_read(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_rs6000mc_id_read(addr, val);
    }
}

#define TRACE_RS6000MC_PRESENCE_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rs6000mc_presence_read(uint32_t addr, uint32_t val)
{
}

static inline void trace_rs6000mc_presence_read(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_rs6000mc_presence_read(addr, val);
    }
}

#define TRACE_RS6000MC_SIZE_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rs6000mc_size_read(uint32_t addr, uint32_t val)
{
}

static inline void trace_rs6000mc_size_read(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_rs6000mc_size_read(addr, val);
    }
}

#define TRACE_RS6000MC_SIZE_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rs6000mc_size_write(uint32_t addr, uint32_t val)
{
}

static inline void trace_rs6000mc_size_write(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_rs6000mc_size_write(addr, val);
    }
}

#define TRACE_RS6000MC_PARITY_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_rs6000mc_parity_read(uint32_t addr, uint32_t val)
{
}

static inline void trace_rs6000mc_parity_read(uint32_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_rs6000mc_parity_read(addr, val);
    }
}

#define TRACE_MAC99_UNINORTH_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mac99_uninorth_write(uint64_t addr, uint64_t value)
{
}

static inline void trace_mac99_uninorth_write(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_mac99_uninorth_write(addr, value);
    }
}

#define TRACE_MAC99_UNINORTH_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mac99_uninorth_read(uint64_t addr, uint64_t value)
{
}

static inline void trace_mac99_uninorth_read(uint64_t addr, uint64_t value)
{
    if (true) {
        _nocheck__trace_mac99_uninorth_read(addr, value);
    }
}

#define TRACE_PPC4XX_PCI_MAP_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc4xx_pci_map_irq(int32_t devfn, int irq_num, int slot)
{
}

static inline void trace_ppc4xx_pci_map_irq(int32_t devfn, int irq_num, int slot)
{
    if (true) {
        _nocheck__trace_ppc4xx_pci_map_irq(devfn, irq_num, slot);
    }
}

#define TRACE_PPC4XX_PCI_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc4xx_pci_set_irq(int irq_num)
{
}

static inline void trace_ppc4xx_pci_set_irq(int irq_num)
{
    if (true) {
        _nocheck__trace_ppc4xx_pci_set_irq(irq_num);
    }
}

#define TRACE_PPC440_PCIX_MAP_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc440_pcix_map_irq(int32_t devfn, int irq_num, int slot)
{
}

static inline void trace_ppc440_pcix_map_irq(int32_t devfn, int irq_num, int slot)
{
    if (true) {
        _nocheck__trace_ppc440_pcix_map_irq(devfn, irq_num, slot);
    }
}

#define TRACE_PPC440_PCIX_SET_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc440_pcix_set_irq(int irq_num)
{
}

static inline void trace_ppc440_pcix_set_irq(int irq_num)
{
    if (true) {
        _nocheck__trace_ppc440_pcix_set_irq(irq_num);
    }
}

#define TRACE_PPC440_PCIX_UPDATE_PIM_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc440_pcix_update_pim(int idx, uint64_t size, uint64_t la)
{
}

static inline void trace_ppc440_pcix_update_pim(int idx, uint64_t size, uint64_t la)
{
    if (true) {
        _nocheck__trace_ppc440_pcix_update_pim(idx, size, la);
    }
}

#define TRACE_PPC440_PCIX_UPDATE_POM_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc440_pcix_update_pom(int idx, uint32_t size, uint64_t la, uint64_t pcia)
{
}

static inline void trace_ppc440_pcix_update_pom(int idx, uint32_t size, uint64_t la, uint64_t pcia)
{
    if (true) {
        _nocheck__trace_ppc440_pcix_update_pom(idx, size, la, pcia);
    }
}

#define TRACE_PPC440_PCIX_REG_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc440_pcix_reg_read(uint64_t addr, uint32_t val)
{
}

static inline void trace_ppc440_pcix_reg_read(uint64_t addr, uint32_t val)
{
    if (true) {
        _nocheck__trace_ppc440_pcix_reg_read(addr, val);
    }
}

#define TRACE_PPC440_PCIX_REG_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_ppc440_pcix_reg_write(uint64_t addr, uint64_t val)
{
}

static inline void trace_ppc440_pcix_reg_write(uint64_t addr, uint64_t val)
{
    if (true) {
        _nocheck__trace_ppc440_pcix_reg_write(addr, val);
    }
}
#endif /* TRACE_HW_PPC_GENERATED_TRACERS_H */
