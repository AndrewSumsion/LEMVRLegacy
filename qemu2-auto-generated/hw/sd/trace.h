/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_SD_GENERATED_TRACERS_H
#define TRACE_HW_SD_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_BCM2835_SDHOST_READ_EVENT;
extern TraceEvent _TRACE_BCM2835_SDHOST_WRITE_EVENT;
extern TraceEvent _TRACE_BCM2835_SDHOST_EDM_CHANGE_EVENT;
extern TraceEvent _TRACE_BCM2835_SDHOST_UPDATE_IRQ_EVENT;
extern TraceEvent _TRACE_SDBUS_COMMAND_EVENT;
extern TraceEvent _TRACE_SDBUS_READ_EVENT;
extern TraceEvent _TRACE_SDBUS_WRITE_EVENT;
extern TraceEvent _TRACE_SDBUS_SET_VOLTAGE_EVENT;
extern TraceEvent _TRACE_SDBUS_GET_DAT_LINES_EVENT;
extern TraceEvent _TRACE_SDBUS_GET_CMD_LINE_EVENT;
extern TraceEvent _TRACE_SDHCI_SET_INSERTED_EVENT;
extern TraceEvent _TRACE_SDHCI_SEND_COMMAND_EVENT;
extern TraceEvent _TRACE_SDHCI_ERROR_EVENT;
extern TraceEvent _TRACE_SDHCI_RESPONSE4_EVENT;
extern TraceEvent _TRACE_SDHCI_RESPONSE16_EVENT;
extern TraceEvent _TRACE_SDHCI_END_TRANSFER_EVENT;
extern TraceEvent _TRACE_SDHCI_ADMA_EVENT;
extern TraceEvent _TRACE_SDHCI_ADMA_LOOP_EVENT;
extern TraceEvent _TRACE_SDHCI_ADMA_TRANSFER_COMPLETED_EVENT;
extern TraceEvent _TRACE_SDHCI_ACCESS_EVENT;
extern TraceEvent _TRACE_SDHCI_READ_DATAPORT_EVENT;
extern TraceEvent _TRACE_SDHCI_WRITE_DATAPORT_EVENT;
extern TraceEvent _TRACE_SDHCI_CAPAREG_EVENT;
extern TraceEvent _TRACE_SDCARD_NORMAL_COMMAND_EVENT;
extern TraceEvent _TRACE_SDCARD_APP_COMMAND_EVENT;
extern TraceEvent _TRACE_SDCARD_RESPONSE_EVENT;
extern TraceEvent _TRACE_SDCARD_POWERUP_EVENT;
extern TraceEvent _TRACE_SDCARD_INQUIRY_CMD41_EVENT;
extern TraceEvent _TRACE_SDCARD_SET_ENABLE_EVENT;
extern TraceEvent _TRACE_SDCARD_RESET_EVENT;
extern TraceEvent _TRACE_SDCARD_SET_BLOCKLEN_EVENT;
extern TraceEvent _TRACE_SDCARD_INSERTED_EVENT;
extern TraceEvent _TRACE_SDCARD_EJECTED_EVENT;
extern TraceEvent _TRACE_SDCARD_ERASE_EVENT;
extern TraceEvent _TRACE_SDCARD_LOCK_EVENT;
extern TraceEvent _TRACE_SDCARD_UNLOCK_EVENT;
extern TraceEvent _TRACE_SDCARD_READ_BLOCK_EVENT;
extern TraceEvent _TRACE_SDCARD_WRITE_BLOCK_EVENT;
extern TraceEvent _TRACE_SDCARD_WRITE_DATA_EVENT;
extern TraceEvent _TRACE_SDCARD_READ_DATA_EVENT;
extern TraceEvent _TRACE_SDCARD_SET_VOLTAGE_EVENT;
extern TraceEvent _TRACE_MILKYMIST_MEMCARD_MEMORY_READ_EVENT;
extern TraceEvent _TRACE_MILKYMIST_MEMCARD_MEMORY_WRITE_EVENT;
extern TraceEvent _TRACE_PXA2XX_MMCI_READ_EVENT;
extern TraceEvent _TRACE_PXA2XX_MMCI_WRITE_EVENT;
extern uint16_t _TRACE_BCM2835_SDHOST_READ_DSTATE;
extern uint16_t _TRACE_BCM2835_SDHOST_WRITE_DSTATE;
extern uint16_t _TRACE_BCM2835_SDHOST_EDM_CHANGE_DSTATE;
extern uint16_t _TRACE_BCM2835_SDHOST_UPDATE_IRQ_DSTATE;
extern uint16_t _TRACE_SDBUS_COMMAND_DSTATE;
extern uint16_t _TRACE_SDBUS_READ_DSTATE;
extern uint16_t _TRACE_SDBUS_WRITE_DSTATE;
extern uint16_t _TRACE_SDBUS_SET_VOLTAGE_DSTATE;
extern uint16_t _TRACE_SDBUS_GET_DAT_LINES_DSTATE;
extern uint16_t _TRACE_SDBUS_GET_CMD_LINE_DSTATE;
extern uint16_t _TRACE_SDHCI_SET_INSERTED_DSTATE;
extern uint16_t _TRACE_SDHCI_SEND_COMMAND_DSTATE;
extern uint16_t _TRACE_SDHCI_ERROR_DSTATE;
extern uint16_t _TRACE_SDHCI_RESPONSE4_DSTATE;
extern uint16_t _TRACE_SDHCI_RESPONSE16_DSTATE;
extern uint16_t _TRACE_SDHCI_END_TRANSFER_DSTATE;
extern uint16_t _TRACE_SDHCI_ADMA_DSTATE;
extern uint16_t _TRACE_SDHCI_ADMA_LOOP_DSTATE;
extern uint16_t _TRACE_SDHCI_ADMA_TRANSFER_COMPLETED_DSTATE;
extern uint16_t _TRACE_SDHCI_ACCESS_DSTATE;
extern uint16_t _TRACE_SDHCI_READ_DATAPORT_DSTATE;
extern uint16_t _TRACE_SDHCI_WRITE_DATAPORT_DSTATE;
extern uint16_t _TRACE_SDHCI_CAPAREG_DSTATE;
extern uint16_t _TRACE_SDCARD_NORMAL_COMMAND_DSTATE;
extern uint16_t _TRACE_SDCARD_APP_COMMAND_DSTATE;
extern uint16_t _TRACE_SDCARD_RESPONSE_DSTATE;
extern uint16_t _TRACE_SDCARD_POWERUP_DSTATE;
extern uint16_t _TRACE_SDCARD_INQUIRY_CMD41_DSTATE;
extern uint16_t _TRACE_SDCARD_SET_ENABLE_DSTATE;
extern uint16_t _TRACE_SDCARD_RESET_DSTATE;
extern uint16_t _TRACE_SDCARD_SET_BLOCKLEN_DSTATE;
extern uint16_t _TRACE_SDCARD_INSERTED_DSTATE;
extern uint16_t _TRACE_SDCARD_EJECTED_DSTATE;
extern uint16_t _TRACE_SDCARD_ERASE_DSTATE;
extern uint16_t _TRACE_SDCARD_LOCK_DSTATE;
extern uint16_t _TRACE_SDCARD_UNLOCK_DSTATE;
extern uint16_t _TRACE_SDCARD_READ_BLOCK_DSTATE;
extern uint16_t _TRACE_SDCARD_WRITE_BLOCK_DSTATE;
extern uint16_t _TRACE_SDCARD_WRITE_DATA_DSTATE;
extern uint16_t _TRACE_SDCARD_READ_DATA_DSTATE;
extern uint16_t _TRACE_SDCARD_SET_VOLTAGE_DSTATE;
extern uint16_t _TRACE_MILKYMIST_MEMCARD_MEMORY_READ_DSTATE;
extern uint16_t _TRACE_MILKYMIST_MEMCARD_MEMORY_WRITE_DSTATE;
extern uint16_t _TRACE_PXA2XX_MMCI_READ_DSTATE;
extern uint16_t _TRACE_PXA2XX_MMCI_WRITE_DSTATE;
#define TRACE_BCM2835_SDHOST_READ_ENABLED 1
#define TRACE_BCM2835_SDHOST_WRITE_ENABLED 1
#define TRACE_BCM2835_SDHOST_EDM_CHANGE_ENABLED 1
#define TRACE_BCM2835_SDHOST_UPDATE_IRQ_ENABLED 1
#define TRACE_SDBUS_COMMAND_ENABLED 1
#define TRACE_SDBUS_READ_ENABLED 1
#define TRACE_SDBUS_WRITE_ENABLED 1
#define TRACE_SDBUS_SET_VOLTAGE_ENABLED 1
#define TRACE_SDBUS_GET_DAT_LINES_ENABLED 1
#define TRACE_SDBUS_GET_CMD_LINE_ENABLED 1
#define TRACE_SDHCI_SET_INSERTED_ENABLED 1
#define TRACE_SDHCI_SEND_COMMAND_ENABLED 1
#define TRACE_SDHCI_ERROR_ENABLED 1
#define TRACE_SDHCI_RESPONSE4_ENABLED 1
#define TRACE_SDHCI_RESPONSE16_ENABLED 1
#define TRACE_SDHCI_END_TRANSFER_ENABLED 1
#define TRACE_SDHCI_ADMA_ENABLED 1
#define TRACE_SDHCI_ADMA_LOOP_ENABLED 1
#define TRACE_SDHCI_ADMA_TRANSFER_COMPLETED_ENABLED 1
#define TRACE_SDHCI_ACCESS_ENABLED 1
#define TRACE_SDHCI_READ_DATAPORT_ENABLED 1
#define TRACE_SDHCI_WRITE_DATAPORT_ENABLED 1
#define TRACE_SDHCI_CAPAREG_ENABLED 1
#define TRACE_SDCARD_NORMAL_COMMAND_ENABLED 1
#define TRACE_SDCARD_APP_COMMAND_ENABLED 1
#define TRACE_SDCARD_RESPONSE_ENABLED 1
#define TRACE_SDCARD_POWERUP_ENABLED 1
#define TRACE_SDCARD_INQUIRY_CMD41_ENABLED 1
#define TRACE_SDCARD_SET_ENABLE_ENABLED 1
#define TRACE_SDCARD_RESET_ENABLED 1
#define TRACE_SDCARD_SET_BLOCKLEN_ENABLED 1
#define TRACE_SDCARD_INSERTED_ENABLED 1
#define TRACE_SDCARD_EJECTED_ENABLED 1
#define TRACE_SDCARD_ERASE_ENABLED 1
#define TRACE_SDCARD_LOCK_ENABLED 1
#define TRACE_SDCARD_UNLOCK_ENABLED 1
#define TRACE_SDCARD_READ_BLOCK_ENABLED 1
#define TRACE_SDCARD_WRITE_BLOCK_ENABLED 1
#define TRACE_SDCARD_WRITE_DATA_ENABLED 1
#define TRACE_SDCARD_READ_DATA_ENABLED 1
#define TRACE_SDCARD_SET_VOLTAGE_ENABLED 1
#define TRACE_MILKYMIST_MEMCARD_MEMORY_READ_ENABLED 1
#define TRACE_MILKYMIST_MEMCARD_MEMORY_WRITE_ENABLED 1
#define TRACE_PXA2XX_MMCI_READ_ENABLED 1
#define TRACE_PXA2XX_MMCI_WRITE_ENABLED 1

#define TRACE_BCM2835_SDHOST_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bcm2835_sdhost_read(uint64_t offset, uint64_t data, unsigned size)
{
}

static inline void trace_bcm2835_sdhost_read(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_bcm2835_sdhost_read(offset, data, size);
    }
}

#define TRACE_BCM2835_SDHOST_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bcm2835_sdhost_write(uint64_t offset, uint64_t data, unsigned size)
{
}

static inline void trace_bcm2835_sdhost_write(uint64_t offset, uint64_t data, unsigned size)
{
    if (true) {
        _nocheck__trace_bcm2835_sdhost_write(offset, data, size);
    }
}

#define TRACE_BCM2835_SDHOST_EDM_CHANGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bcm2835_sdhost_edm_change(const char * why, uint32_t edm)
{
}

static inline void trace_bcm2835_sdhost_edm_change(const char * why, uint32_t edm)
{
    if (true) {
        _nocheck__trace_bcm2835_sdhost_edm_change(why, edm);
    }
}

#define TRACE_BCM2835_SDHOST_UPDATE_IRQ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_bcm2835_sdhost_update_irq(uint32_t irq)
{
}

static inline void trace_bcm2835_sdhost_update_irq(uint32_t irq)
{
    if (true) {
        _nocheck__trace_bcm2835_sdhost_update_irq(irq);
    }
}

#define TRACE_SDBUS_COMMAND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdbus_command(const char * bus_name, uint8_t cmd, uint32_t arg, uint8_t crc)
{
}

static inline void trace_sdbus_command(const char * bus_name, uint8_t cmd, uint32_t arg, uint8_t crc)
{
    if (true) {
        _nocheck__trace_sdbus_command(bus_name, cmd, arg, crc);
    }
}

#define TRACE_SDBUS_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdbus_read(const char * bus_name, uint8_t value)
{
}

static inline void trace_sdbus_read(const char * bus_name, uint8_t value)
{
    if (true) {
        _nocheck__trace_sdbus_read(bus_name, value);
    }
}

#define TRACE_SDBUS_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdbus_write(const char * bus_name, uint8_t value)
{
}

static inline void trace_sdbus_write(const char * bus_name, uint8_t value)
{
    if (true) {
        _nocheck__trace_sdbus_write(bus_name, value);
    }
}

#define TRACE_SDBUS_SET_VOLTAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdbus_set_voltage(const char * bus_name, uint16_t millivolts)
{
}

static inline void trace_sdbus_set_voltage(const char * bus_name, uint16_t millivolts)
{
    if (true) {
        _nocheck__trace_sdbus_set_voltage(bus_name, millivolts);
    }
}

#define TRACE_SDBUS_GET_DAT_LINES_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdbus_get_dat_lines(const char * bus_name, uint8_t dat_lines)
{
}

static inline void trace_sdbus_get_dat_lines(const char * bus_name, uint8_t dat_lines)
{
    if (true) {
        _nocheck__trace_sdbus_get_dat_lines(bus_name, dat_lines);
    }
}

#define TRACE_SDBUS_GET_CMD_LINE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdbus_get_cmd_line(const char * bus_name, bool cmd_line)
{
}

static inline void trace_sdbus_get_cmd_line(const char * bus_name, bool cmd_line)
{
    if (true) {
        _nocheck__trace_sdbus_get_cmd_line(bus_name, cmd_line);
    }
}

#define TRACE_SDHCI_SET_INSERTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_set_inserted(const char * level)
{
}

static inline void trace_sdhci_set_inserted(const char * level)
{
    if (true) {
        _nocheck__trace_sdhci_set_inserted(level);
    }
}

#define TRACE_SDHCI_SEND_COMMAND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_send_command(uint8_t cmd, uint32_t arg)
{
}

static inline void trace_sdhci_send_command(uint8_t cmd, uint32_t arg)
{
    if (true) {
        _nocheck__trace_sdhci_send_command(cmd, arg);
    }
}

#define TRACE_SDHCI_ERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_error(const char * msg)
{
}

static inline void trace_sdhci_error(const char * msg)
{
    if (true) {
        _nocheck__trace_sdhci_error(msg);
    }
}

#define TRACE_SDHCI_RESPONSE4_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_response4(uint32_t r0)
{
}

static inline void trace_sdhci_response4(uint32_t r0)
{
    if (true) {
        _nocheck__trace_sdhci_response4(r0);
    }
}

#define TRACE_SDHCI_RESPONSE16_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_response16(uint32_t r3, uint32_t r2, uint32_t r1, uint32_t r0)
{
}

static inline void trace_sdhci_response16(uint32_t r3, uint32_t r2, uint32_t r1, uint32_t r0)
{
    if (true) {
        _nocheck__trace_sdhci_response16(r3, r2, r1, r0);
    }
}

#define TRACE_SDHCI_END_TRANSFER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_end_transfer(uint8_t cmd, uint32_t arg)
{
}

static inline void trace_sdhci_end_transfer(uint8_t cmd, uint32_t arg)
{
    if (true) {
        _nocheck__trace_sdhci_end_transfer(cmd, arg);
    }
}

#define TRACE_SDHCI_ADMA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_adma(const char * desc, uint32_t sysad)
{
}

static inline void trace_sdhci_adma(const char * desc, uint32_t sysad)
{
    if (true) {
        _nocheck__trace_sdhci_adma(desc, sysad);
    }
}

#define TRACE_SDHCI_ADMA_LOOP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_adma_loop(uint64_t addr, uint16_t length, uint8_t attr)
{
}

static inline void trace_sdhci_adma_loop(uint64_t addr, uint16_t length, uint8_t attr)
{
    if (true) {
        _nocheck__trace_sdhci_adma_loop(addr, length, attr);
    }
}

#define TRACE_SDHCI_ADMA_TRANSFER_COMPLETED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_adma_transfer_completed(void)
{
}

static inline void trace_sdhci_adma_transfer_completed(void)
{
    if (true) {
        _nocheck__trace_sdhci_adma_transfer_completed();
    }
}

#define TRACE_SDHCI_ACCESS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_access(const char * access, unsigned int size, uint64_t offset, const char * dir, uint64_t val, uint64_t val2)
{
}

static inline void trace_sdhci_access(const char * access, unsigned int size, uint64_t offset, const char * dir, uint64_t val, uint64_t val2)
{
    if (true) {
        _nocheck__trace_sdhci_access(access, size, offset, dir, val, val2);
    }
}

#define TRACE_SDHCI_READ_DATAPORT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_read_dataport(uint16_t data_count)
{
}

static inline void trace_sdhci_read_dataport(uint16_t data_count)
{
    if (true) {
        _nocheck__trace_sdhci_read_dataport(data_count);
    }
}

#define TRACE_SDHCI_WRITE_DATAPORT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_write_dataport(uint16_t data_count)
{
}

static inline void trace_sdhci_write_dataport(uint16_t data_count)
{
    if (true) {
        _nocheck__trace_sdhci_write_dataport(data_count);
    }
}

#define TRACE_SDHCI_CAPAREG_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdhci_capareg(const char * desc, uint16_t val)
{
}

static inline void trace_sdhci_capareg(const char * desc, uint16_t val)
{
    if (true) {
        _nocheck__trace_sdhci_capareg(desc, val);
    }
}

#define TRACE_SDCARD_NORMAL_COMMAND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_normal_command(const char * proto, const char * cmd_desc, uint8_t cmd, uint32_t arg, const char * state)
{
}

static inline void trace_sdcard_normal_command(const char * proto, const char * cmd_desc, uint8_t cmd, uint32_t arg, const char * state)
{
    if (true) {
        _nocheck__trace_sdcard_normal_command(proto, cmd_desc, cmd, arg, state);
    }
}

#define TRACE_SDCARD_APP_COMMAND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_app_command(const char * proto, const char * acmd_desc, uint8_t acmd, uint32_t arg, const char * state)
{
}

static inline void trace_sdcard_app_command(const char * proto, const char * acmd_desc, uint8_t acmd, uint32_t arg, const char * state)
{
    if (true) {
        _nocheck__trace_sdcard_app_command(proto, acmd_desc, acmd, arg, state);
    }
}

#define TRACE_SDCARD_RESPONSE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_response(const char * rspdesc, int rsplen)
{
}

static inline void trace_sdcard_response(const char * rspdesc, int rsplen)
{
    if (true) {
        _nocheck__trace_sdcard_response(rspdesc, rsplen);
    }
}

#define TRACE_SDCARD_POWERUP_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_powerup(void)
{
}

static inline void trace_sdcard_powerup(void)
{
    if (true) {
        _nocheck__trace_sdcard_powerup();
    }
}

#define TRACE_SDCARD_INQUIRY_CMD41_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_inquiry_cmd41(void)
{
}

static inline void trace_sdcard_inquiry_cmd41(void)
{
    if (true) {
        _nocheck__trace_sdcard_inquiry_cmd41();
    }
}

#define TRACE_SDCARD_SET_ENABLE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_set_enable(bool current_state, bool new_state)
{
}

static inline void trace_sdcard_set_enable(bool current_state, bool new_state)
{
    if (true) {
        _nocheck__trace_sdcard_set_enable(current_state, new_state);
    }
}

#define TRACE_SDCARD_RESET_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_reset(void)
{
}

static inline void trace_sdcard_reset(void)
{
    if (true) {
        _nocheck__trace_sdcard_reset();
    }
}

#define TRACE_SDCARD_SET_BLOCKLEN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_set_blocklen(uint16_t length)
{
}

static inline void trace_sdcard_set_blocklen(uint16_t length)
{
    if (true) {
        _nocheck__trace_sdcard_set_blocklen(length);
    }
}

#define TRACE_SDCARD_INSERTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_inserted(bool readonly)
{
}

static inline void trace_sdcard_inserted(bool readonly)
{
    if (true) {
        _nocheck__trace_sdcard_inserted(readonly);
    }
}

#define TRACE_SDCARD_EJECTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_ejected(void)
{
}

static inline void trace_sdcard_ejected(void)
{
    if (true) {
        _nocheck__trace_sdcard_ejected();
    }
}

#define TRACE_SDCARD_ERASE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_erase(void)
{
}

static inline void trace_sdcard_erase(void)
{
    if (true) {
        _nocheck__trace_sdcard_erase();
    }
}

#define TRACE_SDCARD_LOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_lock(void)
{
}

static inline void trace_sdcard_lock(void)
{
    if (true) {
        _nocheck__trace_sdcard_lock();
    }
}

#define TRACE_SDCARD_UNLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_unlock(void)
{
}

static inline void trace_sdcard_unlock(void)
{
    if (true) {
        _nocheck__trace_sdcard_unlock();
    }
}

#define TRACE_SDCARD_READ_BLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_read_block(uint64_t addr, uint32_t len)
{
}

static inline void trace_sdcard_read_block(uint64_t addr, uint32_t len)
{
    if (true) {
        _nocheck__trace_sdcard_read_block(addr, len);
    }
}

#define TRACE_SDCARD_WRITE_BLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_write_block(uint64_t addr, uint32_t len)
{
}

static inline void trace_sdcard_write_block(uint64_t addr, uint32_t len)
{
    if (true) {
        _nocheck__trace_sdcard_write_block(addr, len);
    }
}

#define TRACE_SDCARD_WRITE_DATA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_write_data(const char * proto, const char * cmd_desc, uint8_t cmd, uint8_t value)
{
}

static inline void trace_sdcard_write_data(const char * proto, const char * cmd_desc, uint8_t cmd, uint8_t value)
{
    if (true) {
        _nocheck__trace_sdcard_write_data(proto, cmd_desc, cmd, value);
    }
}

#define TRACE_SDCARD_READ_DATA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_read_data(const char * proto, const char * cmd_desc, uint8_t cmd, int length)
{
}

static inline void trace_sdcard_read_data(const char * proto, const char * cmd_desc, uint8_t cmd, int length)
{
    if (true) {
        _nocheck__trace_sdcard_read_data(proto, cmd_desc, cmd, length);
    }
}

#define TRACE_SDCARD_SET_VOLTAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_sdcard_set_voltage(uint16_t millivolts)
{
}

static inline void trace_sdcard_set_voltage(uint16_t millivolts)
{
    if (true) {
        _nocheck__trace_sdcard_set_voltage(millivolts);
    }
}

#define TRACE_MILKYMIST_MEMCARD_MEMORY_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_milkymist_memcard_memory_read(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_read(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_memcard_memory_read(addr, value);
    }
}

#define TRACE_MILKYMIST_MEMCARD_MEMORY_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_milkymist_memcard_memory_write(uint32_t addr, uint32_t value)
{
}

static inline void trace_milkymist_memcard_memory_write(uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_milkymist_memcard_memory_write(addr, value);
    }
}

#define TRACE_PXA2XX_MMCI_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_pxa2xx_mmci_read(uint8_t size, uint32_t addr, uint32_t value)
{
}

static inline void trace_pxa2xx_mmci_read(uint8_t size, uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_pxa2xx_mmci_read(size, addr, value);
    }
}

#define TRACE_PXA2XX_MMCI_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_pxa2xx_mmci_write(uint8_t size, uint32_t addr, uint32_t value)
{
}

static inline void trace_pxa2xx_mmci_write(uint8_t size, uint32_t addr, uint32_t value)
{
    if (true) {
        _nocheck__trace_pxa2xx_mmci_write(size, addr, value);
    }
}
#endif /* TRACE_HW_SD_GENERATED_TRACERS_H */
