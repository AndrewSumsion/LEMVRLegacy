/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_9PFS_GENERATED_TRACERS_H
#define TRACE_HW_9PFS_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_V9FS_RCANCEL_EVENT;
extern TraceEvent _TRACE_V9FS_RERROR_EVENT;
extern TraceEvent _TRACE_V9FS_VERSION_EVENT;
extern TraceEvent _TRACE_V9FS_VERSION_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_ATTACH_EVENT;
extern TraceEvent _TRACE_V9FS_ATTACH_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_STAT_EVENT;
extern TraceEvent _TRACE_V9FS_STAT_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_GETATTR_EVENT;
extern TraceEvent _TRACE_V9FS_GETATTR_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_WALK_EVENT;
extern TraceEvent _TRACE_V9FS_WALK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_OPEN_EVENT;
extern TraceEvent _TRACE_V9FS_OPEN_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_LCREATE_EVENT;
extern TraceEvent _TRACE_V9FS_LCREATE_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_FSYNC_EVENT;
extern TraceEvent _TRACE_V9FS_CLUNK_EVENT;
extern TraceEvent _TRACE_V9FS_READ_EVENT;
extern TraceEvent _TRACE_V9FS_READ_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_READDIR_EVENT;
extern TraceEvent _TRACE_V9FS_READDIR_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_WRITE_EVENT;
extern TraceEvent _TRACE_V9FS_WRITE_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_CREATE_EVENT;
extern TraceEvent _TRACE_V9FS_CREATE_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_SYMLINK_EVENT;
extern TraceEvent _TRACE_V9FS_SYMLINK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_FLUSH_EVENT;
extern TraceEvent _TRACE_V9FS_LINK_EVENT;
extern TraceEvent _TRACE_V9FS_REMOVE_EVENT;
extern TraceEvent _TRACE_V9FS_WSTAT_EVENT;
extern TraceEvent _TRACE_V9FS_MKNOD_EVENT;
extern TraceEvent _TRACE_V9FS_MKNOD_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_LOCK_EVENT;
extern TraceEvent _TRACE_V9FS_LOCK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_GETLOCK_EVENT;
extern TraceEvent _TRACE_V9FS_GETLOCK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_MKDIR_EVENT;
extern TraceEvent _TRACE_V9FS_MKDIR_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_XATTRWALK_EVENT;
extern TraceEvent _TRACE_V9FS_XATTRWALK_RETURN_EVENT;
extern TraceEvent _TRACE_V9FS_XATTRCREATE_EVENT;
extern TraceEvent _TRACE_V9FS_READLINK_EVENT;
extern TraceEvent _TRACE_V9FS_READLINK_RETURN_EVENT;
extern uint16_t _TRACE_V9FS_RCANCEL_DSTATE;
extern uint16_t _TRACE_V9FS_RERROR_DSTATE;
extern uint16_t _TRACE_V9FS_VERSION_DSTATE;
extern uint16_t _TRACE_V9FS_VERSION_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_ATTACH_DSTATE;
extern uint16_t _TRACE_V9FS_ATTACH_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_STAT_DSTATE;
extern uint16_t _TRACE_V9FS_STAT_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_GETATTR_DSTATE;
extern uint16_t _TRACE_V9FS_GETATTR_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_WALK_DSTATE;
extern uint16_t _TRACE_V9FS_WALK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_OPEN_DSTATE;
extern uint16_t _TRACE_V9FS_OPEN_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_LCREATE_DSTATE;
extern uint16_t _TRACE_V9FS_LCREATE_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_FSYNC_DSTATE;
extern uint16_t _TRACE_V9FS_CLUNK_DSTATE;
extern uint16_t _TRACE_V9FS_READ_DSTATE;
extern uint16_t _TRACE_V9FS_READ_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_READDIR_DSTATE;
extern uint16_t _TRACE_V9FS_READDIR_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_WRITE_DSTATE;
extern uint16_t _TRACE_V9FS_WRITE_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_CREATE_DSTATE;
extern uint16_t _TRACE_V9FS_CREATE_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_SYMLINK_DSTATE;
extern uint16_t _TRACE_V9FS_SYMLINK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_FLUSH_DSTATE;
extern uint16_t _TRACE_V9FS_LINK_DSTATE;
extern uint16_t _TRACE_V9FS_REMOVE_DSTATE;
extern uint16_t _TRACE_V9FS_WSTAT_DSTATE;
extern uint16_t _TRACE_V9FS_MKNOD_DSTATE;
extern uint16_t _TRACE_V9FS_MKNOD_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_LOCK_DSTATE;
extern uint16_t _TRACE_V9FS_LOCK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_GETLOCK_DSTATE;
extern uint16_t _TRACE_V9FS_GETLOCK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_MKDIR_DSTATE;
extern uint16_t _TRACE_V9FS_MKDIR_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_XATTRWALK_DSTATE;
extern uint16_t _TRACE_V9FS_XATTRWALK_RETURN_DSTATE;
extern uint16_t _TRACE_V9FS_XATTRCREATE_DSTATE;
extern uint16_t _TRACE_V9FS_READLINK_DSTATE;
extern uint16_t _TRACE_V9FS_READLINK_RETURN_DSTATE;
#define TRACE_V9FS_RCANCEL_ENABLED 1
#define TRACE_V9FS_RERROR_ENABLED 1
#define TRACE_V9FS_VERSION_ENABLED 1
#define TRACE_V9FS_VERSION_RETURN_ENABLED 1
#define TRACE_V9FS_ATTACH_ENABLED 1
#define TRACE_V9FS_ATTACH_RETURN_ENABLED 1
#define TRACE_V9FS_STAT_ENABLED 1
#define TRACE_V9FS_STAT_RETURN_ENABLED 1
#define TRACE_V9FS_GETATTR_ENABLED 1
#define TRACE_V9FS_GETATTR_RETURN_ENABLED 1
#define TRACE_V9FS_WALK_ENABLED 1
#define TRACE_V9FS_WALK_RETURN_ENABLED 1
#define TRACE_V9FS_OPEN_ENABLED 1
#define TRACE_V9FS_OPEN_RETURN_ENABLED 1
#define TRACE_V9FS_LCREATE_ENABLED 1
#define TRACE_V9FS_LCREATE_RETURN_ENABLED 1
#define TRACE_V9FS_FSYNC_ENABLED 1
#define TRACE_V9FS_CLUNK_ENABLED 1
#define TRACE_V9FS_READ_ENABLED 1
#define TRACE_V9FS_READ_RETURN_ENABLED 1
#define TRACE_V9FS_READDIR_ENABLED 1
#define TRACE_V9FS_READDIR_RETURN_ENABLED 1
#define TRACE_V9FS_WRITE_ENABLED 1
#define TRACE_V9FS_WRITE_RETURN_ENABLED 1
#define TRACE_V9FS_CREATE_ENABLED 1
#define TRACE_V9FS_CREATE_RETURN_ENABLED 1
#define TRACE_V9FS_SYMLINK_ENABLED 1
#define TRACE_V9FS_SYMLINK_RETURN_ENABLED 1
#define TRACE_V9FS_FLUSH_ENABLED 1
#define TRACE_V9FS_LINK_ENABLED 1
#define TRACE_V9FS_REMOVE_ENABLED 1
#define TRACE_V9FS_WSTAT_ENABLED 1
#define TRACE_V9FS_MKNOD_ENABLED 1
#define TRACE_V9FS_MKNOD_RETURN_ENABLED 1
#define TRACE_V9FS_LOCK_ENABLED 1
#define TRACE_V9FS_LOCK_RETURN_ENABLED 1
#define TRACE_V9FS_GETLOCK_ENABLED 1
#define TRACE_V9FS_GETLOCK_RETURN_ENABLED 1
#define TRACE_V9FS_MKDIR_ENABLED 1
#define TRACE_V9FS_MKDIR_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRWALK_ENABLED 1
#define TRACE_V9FS_XATTRWALK_RETURN_ENABLED 1
#define TRACE_V9FS_XATTRCREATE_ENABLED 1
#define TRACE_V9FS_READLINK_ENABLED 1
#define TRACE_V9FS_READLINK_RETURN_ENABLED 1

#define TRACE_V9FS_RCANCEL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_rcancel(uint16_t tag, uint8_t id)
{
}

static inline void trace_v9fs_rcancel(uint16_t tag, uint8_t id)
{
    if (true) {
        _nocheck__trace_v9fs_rcancel(tag, id);
    }
}

#define TRACE_V9FS_RERROR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_rerror(uint16_t tag, uint8_t id, int err)
{
}

static inline void trace_v9fs_rerror(uint16_t tag, uint8_t id, int err)
{
    if (true) {
        _nocheck__trace_v9fs_rerror(tag, id, err);
    }
}

#define TRACE_V9FS_VERSION_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_version(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_version(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
    if (true) {
        _nocheck__trace_v9fs_version(tag, id, msize, version);
    }
}

#define TRACE_V9FS_VERSION_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_version_return(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
}

static inline void trace_v9fs_version_return(uint16_t tag, uint8_t id, int32_t msize, char* version)
{
    if (true) {
        _nocheck__trace_v9fs_version_return(tag, id, msize, version);
    }
}

#define TRACE_V9FS_ATTACH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_attach(uint16_t tag, uint8_t id, int32_t fid, int32_t afid, char* uname, char* aname)
{
}

static inline void trace_v9fs_attach(uint16_t tag, uint8_t id, int32_t fid, int32_t afid, char* uname, char* aname)
{
    if (true) {
        _nocheck__trace_v9fs_attach(tag, id, fid, afid, uname, aname);
    }
}

#define TRACE_V9FS_ATTACH_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_attach_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_attach_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
    if (true) {
        _nocheck__trace_v9fs_attach_return(tag, id, type, version, path);
    }
}

#define TRACE_V9FS_STAT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_stat(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_stat(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_stat(tag, id, fid);
    }
}

#define TRACE_V9FS_STAT_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_stat_return(uint16_t tag, uint8_t id, int32_t mode, int32_t atime, int32_t mtime, int64_t length)
{
}

static inline void trace_v9fs_stat_return(uint16_t tag, uint8_t id, int32_t mode, int32_t atime, int32_t mtime, int64_t length)
{
    if (true) {
        _nocheck__trace_v9fs_stat_return(tag, id, mode, atime, mtime, length);
    }
}

#define TRACE_V9FS_GETATTR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_getattr(uint16_t tag, uint8_t id, int32_t fid, uint64_t request_mask)
{
}

static inline void trace_v9fs_getattr(uint16_t tag, uint8_t id, int32_t fid, uint64_t request_mask)
{
    if (true) {
        _nocheck__trace_v9fs_getattr(tag, id, fid, request_mask);
    }
}

#define TRACE_V9FS_GETATTR_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_getattr_return(uint16_t tag, uint8_t id, uint64_t result_mask, uint32_t mode, uint32_t uid, uint32_t gid)
{
}

static inline void trace_v9fs_getattr_return(uint16_t tag, uint8_t id, uint64_t result_mask, uint32_t mode, uint32_t uid, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_getattr_return(tag, id, result_mask, mode, uid, gid);
    }
}

#define TRACE_V9FS_WALK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_walk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, uint16_t nwnames)
{
}

static inline void trace_v9fs_walk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, uint16_t nwnames)
{
    if (true) {
        _nocheck__trace_v9fs_walk(tag, id, fid, newfid, nwnames);
    }
}

#define TRACE_V9FS_WALK_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_walk_return(uint16_t tag, uint8_t id, uint16_t nwnames, void* qids)
{
}

static inline void trace_v9fs_walk_return(uint16_t tag, uint8_t id, uint16_t nwnames, void* qids)
{
    if (true) {
        _nocheck__trace_v9fs_walk_return(tag, id, nwnames, qids);
    }
}

#define TRACE_V9FS_OPEN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_open(uint16_t tag, uint8_t id, int32_t fid, int32_t mode)
{
}

static inline void trace_v9fs_open(uint16_t tag, uint8_t id, int32_t fid, int32_t mode)
{
    if (true) {
        _nocheck__trace_v9fs_open(tag, id, fid, mode);
    }
}

#define TRACE_V9FS_OPEN_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_open_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_open_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
    if (true) {
        _nocheck__trace_v9fs_open_return(tag, id, type, version, path, iounit);
    }
}

#define TRACE_V9FS_LCREATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_lcreate(uint16_t tag, uint8_t id, int32_t dfid, int32_t flags, int32_t mode, uint32_t gid)
{
}

static inline void trace_v9fs_lcreate(uint16_t tag, uint8_t id, int32_t dfid, int32_t flags, int32_t mode, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_lcreate(tag, id, dfid, flags, mode, gid);
    }
}

#define TRACE_V9FS_LCREATE_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_lcreate_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int32_t iounit)
{
}

static inline void trace_v9fs_lcreate_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int32_t iounit)
{
    if (true) {
        _nocheck__trace_v9fs_lcreate_return(tag, id, type, version, path, iounit);
    }
}

#define TRACE_V9FS_FSYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_fsync(uint16_t tag, uint8_t id, int32_t fid, int datasync)
{
}

static inline void trace_v9fs_fsync(uint16_t tag, uint8_t id, int32_t fid, int datasync)
{
    if (true) {
        _nocheck__trace_v9fs_fsync(tag, id, fid, datasync);
    }
}

#define TRACE_V9FS_CLUNK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_clunk(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_clunk(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_clunk(tag, id, fid);
    }
}

#define TRACE_V9FS_READ_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_read(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t max_count)
{
}

static inline void trace_v9fs_read(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t max_count)
{
    if (true) {
        _nocheck__trace_v9fs_read(tag, id, fid, off, max_count);
    }
}

#define TRACE_V9FS_READ_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_read_return(uint16_t tag, uint8_t id, int32_t count, ssize_t err)
{
}

static inline void trace_v9fs_read_return(uint16_t tag, uint8_t id, int32_t count, ssize_t err)
{
    if (true) {
        _nocheck__trace_v9fs_read_return(tag, id, count, err);
    }
}

#define TRACE_V9FS_READDIR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_readdir(uint16_t tag, uint8_t id, int32_t fid, uint64_t offset, uint32_t max_count)
{
}

static inline void trace_v9fs_readdir(uint16_t tag, uint8_t id, int32_t fid, uint64_t offset, uint32_t max_count)
{
    if (true) {
        _nocheck__trace_v9fs_readdir(tag, id, fid, offset, max_count);
    }
}

#define TRACE_V9FS_READDIR_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_readdir_return(uint16_t tag, uint8_t id, uint32_t count, ssize_t retval)
{
}

static inline void trace_v9fs_readdir_return(uint16_t tag, uint8_t id, uint32_t count, ssize_t retval)
{
    if (true) {
        _nocheck__trace_v9fs_readdir_return(tag, id, count, retval);
    }
}

#define TRACE_V9FS_WRITE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_write(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t count, int cnt)
{
}

static inline void trace_v9fs_write(uint16_t tag, uint8_t id, int32_t fid, uint64_t off, uint32_t count, int cnt)
{
    if (true) {
        _nocheck__trace_v9fs_write(tag, id, fid, off, count, cnt);
    }
}

#define TRACE_V9FS_WRITE_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_write_return(uint16_t tag, uint8_t id, int32_t total, ssize_t err)
{
}

static inline void trace_v9fs_write_return(uint16_t tag, uint8_t id, int32_t total, ssize_t err)
{
    if (true) {
        _nocheck__trace_v9fs_write_return(tag, id, total, err);
    }
}

#define TRACE_V9FS_CREATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_create(uint16_t tag, uint8_t id, int32_t fid, char* name, int32_t perm, int8_t mode)
{
}

static inline void trace_v9fs_create(uint16_t tag, uint8_t id, int32_t fid, char* name, int32_t perm, int8_t mode)
{
    if (true) {
        _nocheck__trace_v9fs_create(tag, id, fid, name, perm, mode);
    }
}

#define TRACE_V9FS_CREATE_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_create_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
}

static inline void trace_v9fs_create_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int iounit)
{
    if (true) {
        _nocheck__trace_v9fs_create_return(tag, id, type, version, path, iounit);
    }
}

#define TRACE_V9FS_SYMLINK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_symlink(uint16_t tag, uint8_t id, int32_t fid, char* name, char* symname, uint32_t gid)
{
}

static inline void trace_v9fs_symlink(uint16_t tag, uint8_t id, int32_t fid, char* name, char* symname, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_symlink(tag, id, fid, name, symname, gid);
    }
}

#define TRACE_V9FS_SYMLINK_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_symlink_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_symlink_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
    if (true) {
        _nocheck__trace_v9fs_symlink_return(tag, id, type, version, path);
    }
}

#define TRACE_V9FS_FLUSH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_flush(uint16_t tag, uint8_t id, int16_t flush_tag)
{
}

static inline void trace_v9fs_flush(uint16_t tag, uint8_t id, int16_t flush_tag)
{
    if (true) {
        _nocheck__trace_v9fs_flush(tag, id, flush_tag);
    }
}

#define TRACE_V9FS_LINK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_link(uint16_t tag, uint8_t id, int32_t dfid, int32_t oldfid, char* name)
{
}

static inline void trace_v9fs_link(uint16_t tag, uint8_t id, int32_t dfid, int32_t oldfid, char* name)
{
    if (true) {
        _nocheck__trace_v9fs_link(tag, id, dfid, oldfid, name);
    }
}

#define TRACE_V9FS_REMOVE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_remove(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_remove(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_remove(tag, id, fid);
    }
}

#define TRACE_V9FS_WSTAT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_wstat(uint16_t tag, uint8_t id, int32_t fid, int32_t mode, int32_t atime, int32_t mtime)
{
}

static inline void trace_v9fs_wstat(uint16_t tag, uint8_t id, int32_t fid, int32_t mode, int32_t atime, int32_t mtime)
{
    if (true) {
        _nocheck__trace_v9fs_wstat(tag, id, fid, mode, atime, mtime);
    }
}

#define TRACE_V9FS_MKNOD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_mknod(uint16_t tag, uint8_t id, int32_t fid, int mode, int major, int minor)
{
}

static inline void trace_v9fs_mknod(uint16_t tag, uint8_t id, int32_t fid, int mode, int major, int minor)
{
    if (true) {
        _nocheck__trace_v9fs_mknod(tag, id, fid, mode, major, minor);
    }
}

#define TRACE_V9FS_MKNOD_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_mknod_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
}

static inline void trace_v9fs_mknod_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path)
{
    if (true) {
        _nocheck__trace_v9fs_mknod_return(tag, id, type, version, path);
    }
}

#define TRACE_V9FS_LOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_lock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_lock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
    if (true) {
        _nocheck__trace_v9fs_lock(tag, id, fid, type, start, length);
    }
}

#define TRACE_V9FS_LOCK_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_lock_return(uint16_t tag, uint8_t id, int8_t status)
{
}

static inline void trace_v9fs_lock_return(uint16_t tag, uint8_t id, int8_t status)
{
    if (true) {
        _nocheck__trace_v9fs_lock_return(tag, id, status);
    }
}

#define TRACE_V9FS_GETLOCK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_getlock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
}

static inline void trace_v9fs_getlock(uint16_t tag, uint8_t id, int32_t fid, uint8_t type, uint64_t start, uint64_t length)
{
    if (true) {
        _nocheck__trace_v9fs_getlock(tag, id, fid, type, start, length);
    }
}

#define TRACE_V9FS_GETLOCK_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_getlock_return(uint16_t tag, uint8_t id, uint8_t type, uint64_t start, uint64_t length, uint32_t proc_id)
{
}

static inline void trace_v9fs_getlock_return(uint16_t tag, uint8_t id, uint8_t type, uint64_t start, uint64_t length, uint32_t proc_id)
{
    if (true) {
        _nocheck__trace_v9fs_getlock_return(tag, id, type, start, length, proc_id);
    }
}

#define TRACE_V9FS_MKDIR_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_mkdir(uint16_t tag, uint8_t id, int32_t fid, char* name, int mode, uint32_t gid)
{
}

static inline void trace_v9fs_mkdir(uint16_t tag, uint8_t id, int32_t fid, char* name, int mode, uint32_t gid)
{
    if (true) {
        _nocheck__trace_v9fs_mkdir(tag, id, fid, name, mode, gid);
    }
}

#define TRACE_V9FS_MKDIR_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_mkdir_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int err)
{
}

static inline void trace_v9fs_mkdir_return(uint16_t tag, uint8_t id, int8_t type, int32_t version, int64_t path, int err)
{
    if (true) {
        _nocheck__trace_v9fs_mkdir_return(tag, id, type, version, path, err);
    }
}

#define TRACE_V9FS_XATTRWALK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_xattrwalk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, char* name)
{
}

static inline void trace_v9fs_xattrwalk(uint16_t tag, uint8_t id, int32_t fid, int32_t newfid, char* name)
{
    if (true) {
        _nocheck__trace_v9fs_xattrwalk(tag, id, fid, newfid, name);
    }
}

#define TRACE_V9FS_XATTRWALK_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_xattrwalk_return(uint16_t tag, uint8_t id, int64_t size)
{
}

static inline void trace_v9fs_xattrwalk_return(uint16_t tag, uint8_t id, int64_t size)
{
    if (true) {
        _nocheck__trace_v9fs_xattrwalk_return(tag, id, size);
    }
}

#define TRACE_V9FS_XATTRCREATE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_xattrcreate(uint16_t tag, uint8_t id, int32_t fid, char* name, uint64_t size, int flags)
{
}

static inline void trace_v9fs_xattrcreate(uint16_t tag, uint8_t id, int32_t fid, char* name, uint64_t size, int flags)
{
    if (true) {
        _nocheck__trace_v9fs_xattrcreate(tag, id, fid, name, size, flags);
    }
}

#define TRACE_V9FS_READLINK_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_readlink(uint16_t tag, uint8_t id, int32_t fid)
{
}

static inline void trace_v9fs_readlink(uint16_t tag, uint8_t id, int32_t fid)
{
    if (true) {
        _nocheck__trace_v9fs_readlink(tag, id, fid);
    }
}

#define TRACE_V9FS_READLINK_RETURN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_v9fs_readlink_return(uint16_t tag, uint8_t id, char* target)
{
}

static inline void trace_v9fs_readlink_return(uint16_t tag, uint8_t id, char* target)
{
    if (true) {
        _nocheck__trace_v9fs_readlink_return(tag, id, target);
    }
}
#endif /* TRACE_HW_9PFS_GENERATED_TRACERS_H */
