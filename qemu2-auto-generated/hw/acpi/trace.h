/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_ACPI_GENERATED_TRACERS_H
#define TRACE_HW_ACPI_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_ADDR_LO_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_ADDR_HI_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_SIZE_LO_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_SIZE_HI_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_PXM_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_READ_FLAGS_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_WRITE_SLOT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_WRITE_OST_EV_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_WRITE_OST_STATUS_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_CLEAR_INSERT_EVT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_PC_DIMM_DELETED_EVENT;
extern TraceEvent _TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_READ_FLAGS_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_IDX_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_CMD_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_READ_CMD_DATA_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_CPU_HAS_EVENTS_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_EJECTING_CPU_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_OST_EV_EVENT;
extern TraceEvent _TRACE_CPUHP_ACPI_WRITE_OST_STATUS_EVENT;
extern TraceEvent _TRACE_TCO_TIMER_RELOAD_EVENT;
extern TraceEvent _TRACE_TCO_TIMER_EXPIRED_EVENT;
extern uint16_t _TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_ADDR_LO_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_ADDR_HI_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_SIZE_LO_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_SIZE_HI_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_PXM_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_READ_FLAGS_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_WRITE_SLOT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_WRITE_OST_EV_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_WRITE_OST_STATUS_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_CLEAR_INSERT_EVT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_PC_DIMM_DELETED_DSTATE;
extern uint16_t _TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_READ_FLAGS_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_IDX_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_CMD_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_READ_CMD_DATA_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_CPU_HAS_EVENTS_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_EJECTING_CPU_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_OST_EV_DSTATE;
extern uint16_t _TRACE_CPUHP_ACPI_WRITE_OST_STATUS_DSTATE;
extern uint16_t _TRACE_TCO_TIMER_RELOAD_DSTATE;
extern uint16_t _TRACE_TCO_TIMER_EXPIRED_DSTATE;
#define TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_ENABLED 1
#define TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_ENABLED 1
#define TRACE_MHP_ACPI_READ_ADDR_LO_ENABLED 1
#define TRACE_MHP_ACPI_READ_ADDR_HI_ENABLED 1
#define TRACE_MHP_ACPI_READ_SIZE_LO_ENABLED 1
#define TRACE_MHP_ACPI_READ_SIZE_HI_ENABLED 1
#define TRACE_MHP_ACPI_READ_PXM_ENABLED 1
#define TRACE_MHP_ACPI_READ_FLAGS_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_SLOT_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_OST_EV_ENABLED 1
#define TRACE_MHP_ACPI_WRITE_OST_STATUS_ENABLED 1
#define TRACE_MHP_ACPI_CLEAR_INSERT_EVT_ENABLED 1
#define TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_ENABLED 1
#define TRACE_MHP_ACPI_PC_DIMM_DELETED_ENABLED 1
#define TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_ENABLED 1
#define TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED_ENABLED 1
#define TRACE_CPUHP_ACPI_READ_FLAGS_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_IDX_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_CMD_ENABLED 1
#define TRACE_CPUHP_ACPI_READ_CMD_DATA_ENABLED 1
#define TRACE_CPUHP_ACPI_CPU_HAS_EVENTS_ENABLED 1
#define TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT_ENABLED 1
#define TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT_ENABLED 1
#define TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU_ENABLED 1
#define TRACE_CPUHP_ACPI_EJECTING_CPU_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_OST_EV_ENABLED 1
#define TRACE_CPUHP_ACPI_WRITE_OST_STATUS_ENABLED 1
#define TRACE_TCO_TIMER_RELOAD_ENABLED 1
#define TRACE_TCO_TIMER_EXPIRED_ENABLED 1

#define TRACE_MHP_ACPI_INVALID_SLOT_SELECTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_invalid_slot_selected(uint32_t slot)
{
}

static inline void trace_mhp_acpi_invalid_slot_selected(uint32_t slot)
{
    if (true) {
        _nocheck__trace_mhp_acpi_invalid_slot_selected(slot);
    }
}

#define TRACE_MHP_ACPI_EJECTING_INVALID_SLOT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_ejecting_invalid_slot(uint32_t slot)
{
}

static inline void trace_mhp_acpi_ejecting_invalid_slot(uint32_t slot)
{
    if (true) {
        _nocheck__trace_mhp_acpi_ejecting_invalid_slot(slot);
    }
}

#define TRACE_MHP_ACPI_READ_ADDR_LO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_read_addr_lo(uint32_t slot, uint32_t addr)
{
}

static inline void trace_mhp_acpi_read_addr_lo(uint32_t slot, uint32_t addr)
{
    if (true) {
        _nocheck__trace_mhp_acpi_read_addr_lo(slot, addr);
    }
}

#define TRACE_MHP_ACPI_READ_ADDR_HI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_read_addr_hi(uint32_t slot, uint32_t addr)
{
}

static inline void trace_mhp_acpi_read_addr_hi(uint32_t slot, uint32_t addr)
{
    if (true) {
        _nocheck__trace_mhp_acpi_read_addr_hi(slot, addr);
    }
}

#define TRACE_MHP_ACPI_READ_SIZE_LO_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_read_size_lo(uint32_t slot, uint32_t size)
{
}

static inline void trace_mhp_acpi_read_size_lo(uint32_t slot, uint32_t size)
{
    if (true) {
        _nocheck__trace_mhp_acpi_read_size_lo(slot, size);
    }
}

#define TRACE_MHP_ACPI_READ_SIZE_HI_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_read_size_hi(uint32_t slot, uint32_t size)
{
}

static inline void trace_mhp_acpi_read_size_hi(uint32_t slot, uint32_t size)
{
    if (true) {
        _nocheck__trace_mhp_acpi_read_size_hi(slot, size);
    }
}

#define TRACE_MHP_ACPI_READ_PXM_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_read_pxm(uint32_t slot, uint32_t pxm)
{
}

static inline void trace_mhp_acpi_read_pxm(uint32_t slot, uint32_t pxm)
{
    if (true) {
        _nocheck__trace_mhp_acpi_read_pxm(slot, pxm);
    }
}

#define TRACE_MHP_ACPI_READ_FLAGS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_read_flags(uint32_t slot, uint32_t flags)
{
}

static inline void trace_mhp_acpi_read_flags(uint32_t slot, uint32_t flags)
{
    if (true) {
        _nocheck__trace_mhp_acpi_read_flags(slot, flags);
    }
}

#define TRACE_MHP_ACPI_WRITE_SLOT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_write_slot(uint32_t slot)
{
}

static inline void trace_mhp_acpi_write_slot(uint32_t slot)
{
    if (true) {
        _nocheck__trace_mhp_acpi_write_slot(slot);
    }
}

#define TRACE_MHP_ACPI_WRITE_OST_EV_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_write_ost_ev(uint32_t slot, uint32_t ev)
{
}

static inline void trace_mhp_acpi_write_ost_ev(uint32_t slot, uint32_t ev)
{
    if (true) {
        _nocheck__trace_mhp_acpi_write_ost_ev(slot, ev);
    }
}

#define TRACE_MHP_ACPI_WRITE_OST_STATUS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_write_ost_status(uint32_t slot, uint32_t st)
{
}

static inline void trace_mhp_acpi_write_ost_status(uint32_t slot, uint32_t st)
{
    if (true) {
        _nocheck__trace_mhp_acpi_write_ost_status(slot, st);
    }
}

#define TRACE_MHP_ACPI_CLEAR_INSERT_EVT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_clear_insert_evt(uint32_t slot)
{
}

static inline void trace_mhp_acpi_clear_insert_evt(uint32_t slot)
{
    if (true) {
        _nocheck__trace_mhp_acpi_clear_insert_evt(slot);
    }
}

#define TRACE_MHP_ACPI_CLEAR_REMOVE_EVT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_clear_remove_evt(uint32_t slot)
{
}

static inline void trace_mhp_acpi_clear_remove_evt(uint32_t slot)
{
    if (true) {
        _nocheck__trace_mhp_acpi_clear_remove_evt(slot);
    }
}

#define TRACE_MHP_ACPI_PC_DIMM_DELETED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_pc_dimm_deleted(uint32_t slot)
{
}

static inline void trace_mhp_acpi_pc_dimm_deleted(uint32_t slot)
{
    if (true) {
        _nocheck__trace_mhp_acpi_pc_dimm_deleted(slot);
    }
}

#define TRACE_MHP_ACPI_PC_DIMM_DELETE_FAILED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_mhp_acpi_pc_dimm_delete_failed(uint32_t slot)
{
}

static inline void trace_mhp_acpi_pc_dimm_delete_failed(uint32_t slot)
{
    if (true) {
        _nocheck__trace_mhp_acpi_pc_dimm_delete_failed(slot);
    }
}

#define TRACE_CPUHP_ACPI_INVALID_IDX_SELECTED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_invalid_idx_selected(uint32_t idx)
{
}

static inline void trace_cpuhp_acpi_invalid_idx_selected(uint32_t idx)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_invalid_idx_selected(idx);
    }
}

#define TRACE_CPUHP_ACPI_READ_FLAGS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_read_flags(uint32_t idx, uint8_t flags)
{
}

static inline void trace_cpuhp_acpi_read_flags(uint32_t idx, uint8_t flags)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_read_flags(idx, flags);
    }
}

#define TRACE_CPUHP_ACPI_WRITE_IDX_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_write_idx(uint32_t idx)
{
}

static inline void trace_cpuhp_acpi_write_idx(uint32_t idx)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_write_idx(idx);
    }
}

#define TRACE_CPUHP_ACPI_WRITE_CMD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_write_cmd(uint32_t idx, uint8_t cmd)
{
}

static inline void trace_cpuhp_acpi_write_cmd(uint32_t idx, uint8_t cmd)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_write_cmd(idx, cmd);
    }
}

#define TRACE_CPUHP_ACPI_READ_CMD_DATA_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_read_cmd_data(uint32_t idx, uint32_t data)
{
}

static inline void trace_cpuhp_acpi_read_cmd_data(uint32_t idx, uint32_t data)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_read_cmd_data(idx, data);
    }
}

#define TRACE_CPUHP_ACPI_CPU_HAS_EVENTS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_cpu_has_events(uint32_t idx, bool ins, bool rm)
{
}

static inline void trace_cpuhp_acpi_cpu_has_events(uint32_t idx, bool ins, bool rm)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_cpu_has_events(idx, ins, rm);
    }
}

#define TRACE_CPUHP_ACPI_CLEAR_INSERTING_EVT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_clear_inserting_evt(uint32_t idx)
{
}

static inline void trace_cpuhp_acpi_clear_inserting_evt(uint32_t idx)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_clear_inserting_evt(idx);
    }
}

#define TRACE_CPUHP_ACPI_CLEAR_REMOVE_EVT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_clear_remove_evt(uint32_t idx)
{
}

static inline void trace_cpuhp_acpi_clear_remove_evt(uint32_t idx)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_clear_remove_evt(idx);
    }
}

#define TRACE_CPUHP_ACPI_EJECTING_INVALID_CPU_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_ejecting_invalid_cpu(uint32_t idx)
{
}

static inline void trace_cpuhp_acpi_ejecting_invalid_cpu(uint32_t idx)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_ejecting_invalid_cpu(idx);
    }
}

#define TRACE_CPUHP_ACPI_EJECTING_CPU_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_ejecting_cpu(uint32_t idx)
{
}

static inline void trace_cpuhp_acpi_ejecting_cpu(uint32_t idx)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_ejecting_cpu(idx);
    }
}

#define TRACE_CPUHP_ACPI_WRITE_OST_EV_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_write_ost_ev(uint32_t slot, uint32_t ev)
{
}

static inline void trace_cpuhp_acpi_write_ost_ev(uint32_t slot, uint32_t ev)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_write_ost_ev(slot, ev);
    }
}

#define TRACE_CPUHP_ACPI_WRITE_OST_STATUS_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_cpuhp_acpi_write_ost_status(uint32_t slot, uint32_t st)
{
}

static inline void trace_cpuhp_acpi_write_ost_status(uint32_t slot, uint32_t st)
{
    if (true) {
        _nocheck__trace_cpuhp_acpi_write_ost_status(slot, st);
    }
}

#define TRACE_TCO_TIMER_RELOAD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_tco_timer_reload(int ticks, int msec)
{
}

static inline void trace_tco_timer_reload(int ticks, int msec)
{
    if (true) {
        _nocheck__trace_tco_timer_reload(ticks, msec);
    }
}

#define TRACE_TCO_TIMER_EXPIRED_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_tco_timer_expired(int timeouts_no, bool strap, bool no_reboot)
{
}

static inline void trace_tco_timer_expired(int timeouts_no, bool strap, bool no_reboot)
{
    if (true) {
        _nocheck__trace_tco_timer_expired(timeouts_no, strap, no_reboot);
    }
}
#endif /* TRACE_HW_ACPI_GENERATED_TRACERS_H */
