/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_HW_S390X_GENERATED_TRACERS_H
#define TRACE_HW_S390X_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_CSS_ENABLE_FACILITY_EVENT;
extern TraceEvent _TRACE_CSS_CRW_EVENT;
extern TraceEvent _TRACE_CSS_CHPID_ADD_EVENT;
extern TraceEvent _TRACE_CSS_NEW_IMAGE_EVENT;
extern TraceEvent _TRACE_CSS_ASSIGN_SUBCH_EVENT;
extern TraceEvent _TRACE_CSS_IO_INTERRUPT_EVENT;
extern TraceEvent _TRACE_CSS_ADAPTER_INTERRUPT_EVENT;
extern TraceEvent _TRACE_CSS_DO_SIC_EVENT;
extern TraceEvent _TRACE_VIRTIO_CCW_INTERPRET_CCW_EVENT;
extern TraceEvent _TRACE_VIRTIO_CCW_NEW_DEVICE_EVENT;
extern TraceEvent _TRACE_VIRTIO_CCW_SET_IND_EVENT;
extern uint16_t _TRACE_CSS_ENABLE_FACILITY_DSTATE;
extern uint16_t _TRACE_CSS_CRW_DSTATE;
extern uint16_t _TRACE_CSS_CHPID_ADD_DSTATE;
extern uint16_t _TRACE_CSS_NEW_IMAGE_DSTATE;
extern uint16_t _TRACE_CSS_ASSIGN_SUBCH_DSTATE;
extern uint16_t _TRACE_CSS_IO_INTERRUPT_DSTATE;
extern uint16_t _TRACE_CSS_ADAPTER_INTERRUPT_DSTATE;
extern uint16_t _TRACE_CSS_DO_SIC_DSTATE;
extern uint16_t _TRACE_VIRTIO_CCW_INTERPRET_CCW_DSTATE;
extern uint16_t _TRACE_VIRTIO_CCW_NEW_DEVICE_DSTATE;
extern uint16_t _TRACE_VIRTIO_CCW_SET_IND_DSTATE;
#define TRACE_CSS_ENABLE_FACILITY_ENABLED 1
#define TRACE_CSS_CRW_ENABLED 1
#define TRACE_CSS_CHPID_ADD_ENABLED 1
#define TRACE_CSS_NEW_IMAGE_ENABLED 1
#define TRACE_CSS_ASSIGN_SUBCH_ENABLED 1
#define TRACE_CSS_IO_INTERRUPT_ENABLED 1
#define TRACE_CSS_ADAPTER_INTERRUPT_ENABLED 1
#define TRACE_CSS_DO_SIC_ENABLED 1
#define TRACE_VIRTIO_CCW_INTERPRET_CCW_ENABLED 1
#define TRACE_VIRTIO_CCW_NEW_DEVICE_ENABLED 1
#define TRACE_VIRTIO_CCW_SET_IND_ENABLED 1

#define TRACE_CSS_ENABLE_FACILITY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_enable_facility(const char * facility)
{
}

static inline void trace_css_enable_facility(const char * facility)
{
    if (true) {
        _nocheck__trace_css_enable_facility(facility);
    }
}

#define TRACE_CSS_CRW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_crw(uint8_t rsc, uint8_t erc, uint16_t rsid, const char * chained)
{
}

static inline void trace_css_crw(uint8_t rsc, uint8_t erc, uint16_t rsid, const char * chained)
{
    if (true) {
        _nocheck__trace_css_crw(rsc, erc, rsid, chained);
    }
}

#define TRACE_CSS_CHPID_ADD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_chpid_add(uint8_t cssid, uint8_t chpid, uint8_t type)
{
}

static inline void trace_css_chpid_add(uint8_t cssid, uint8_t chpid, uint8_t type)
{
    if (true) {
        _nocheck__trace_css_chpid_add(cssid, chpid, type);
    }
}

#define TRACE_CSS_NEW_IMAGE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_new_image(uint8_t cssid, const char * default_cssid)
{
}

static inline void trace_css_new_image(uint8_t cssid, const char * default_cssid)
{
    if (true) {
        _nocheck__trace_css_new_image(cssid, default_cssid);
    }
}

#define TRACE_CSS_ASSIGN_SUBCH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_assign_subch(const char * do_assign, uint8_t cssid, uint8_t ssid, uint16_t schid, uint16_t devno)
{
}

static inline void trace_css_assign_subch(const char * do_assign, uint8_t cssid, uint8_t ssid, uint16_t schid, uint16_t devno)
{
    if (true) {
        _nocheck__trace_css_assign_subch(do_assign, cssid, ssid, schid, devno);
    }
}

#define TRACE_CSS_IO_INTERRUPT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_io_interrupt(int cssid, int ssid, int schid, uint32_t intparm, uint8_t isc, const char * conditional)
{
}

static inline void trace_css_io_interrupt(int cssid, int ssid, int schid, uint32_t intparm, uint8_t isc, const char * conditional)
{
    if (true) {
        _nocheck__trace_css_io_interrupt(cssid, ssid, schid, intparm, isc, conditional);
    }
}

#define TRACE_CSS_ADAPTER_INTERRUPT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_adapter_interrupt(uint8_t isc)
{
}

static inline void trace_css_adapter_interrupt(uint8_t isc)
{
    if (true) {
        _nocheck__trace_css_adapter_interrupt(isc);
    }
}

#define TRACE_CSS_DO_SIC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_css_do_sic(uint16_t mode, uint8_t isc)
{
}

static inline void trace_css_do_sic(uint16_t mode, uint8_t isc)
{
    if (true) {
        _nocheck__trace_css_do_sic(mode, isc);
    }
}

#define TRACE_VIRTIO_CCW_INTERPRET_CCW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_virtio_ccw_interpret_ccw(int cssid, int ssid, int schid, int cmd_code)
{
}

static inline void trace_virtio_ccw_interpret_ccw(int cssid, int ssid, int schid, int cmd_code)
{
    if (true) {
        _nocheck__trace_virtio_ccw_interpret_ccw(cssid, ssid, schid, cmd_code);
    }
}

#define TRACE_VIRTIO_CCW_NEW_DEVICE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_virtio_ccw_new_device(int cssid, int ssid, int schid, int devno, const char * devno_mode)
{
}

static inline void trace_virtio_ccw_new_device(int cssid, int ssid, int schid, int devno, const char * devno_mode)
{
    if (true) {
        _nocheck__trace_virtio_ccw_new_device(cssid, ssid, schid, devno, devno_mode);
    }
}

#define TRACE_VIRTIO_CCW_SET_IND_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_virtio_ccw_set_ind(uint64_t ind_loc, uint8_t ind_old, uint8_t ind_new)
{
}

static inline void trace_virtio_ccw_set_ind(uint64_t ind_loc, uint8_t ind_old, uint8_t ind_new)
{
    if (true) {
        _nocheck__trace_virtio_ccw_set_ind(ind_loc, ind_old, ind_new);
    }
}
#endif /* TRACE_HW_S390X_GENERATED_TRACERS_H */
