/* This file is autogenerated by tracetool, do not edit. */

#ifndef TRACE_IO_GENERATED_TRACERS_H
#define TRACE_IO_GENERATED_TRACERS_H

#include "qemu-common.h"
#include "trace/control.h"

extern TraceEvent _TRACE_QIO_TASK_NEW_EVENT;
extern TraceEvent _TRACE_QIO_TASK_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_START_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_RUN_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_EXIT_EVENT;
extern TraceEvent _TRACE_QIO_TASK_THREAD_RESULT_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_NEW_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_NEW_FD_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_FILE_NEW_FD_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_FILE_NEW_PATH_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_NEW_SERVER_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_NEW_PID_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_ABORT_EVENT;
extern TraceEvent _TRACE_QIO_CHANNEL_COMMAND_WAIT_EVENT;
extern uint16_t _TRACE_QIO_TASK_NEW_DSTATE;
extern uint16_t _TRACE_QIO_TASK_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_START_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_RUN_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_EXIT_DSTATE;
extern uint16_t _TRACE_QIO_TASK_THREAD_RESULT_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_NEW_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_NEW_FD_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_FILE_NEW_FD_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_FILE_NEW_PATH_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_NEW_SERVER_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_NEW_PID_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_ABORT_DSTATE;
extern uint16_t _TRACE_QIO_CHANNEL_COMMAND_WAIT_DSTATE;
#define TRACE_QIO_TASK_NEW_ENABLED 1
#define TRACE_QIO_TASK_COMPLETE_ENABLED 1
#define TRACE_QIO_TASK_THREAD_START_ENABLED 1
#define TRACE_QIO_TASK_THREAD_RUN_ENABLED 1
#define TRACE_QIO_TASK_THREAD_EXIT_ENABLED 1
#define TRACE_QIO_TASK_THREAD_RESULT_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_NEW_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_NEW_FD_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_FILE_NEW_FD_ENABLED 1
#define TRACE_QIO_CHANNEL_FILE_NEW_PATH_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_NEW_SERVER_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_ENABLED 1
#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_ENABLED 1
#define TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_NEW_PID_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_ABORT_ENABLED 1
#define TRACE_QIO_CHANNEL_COMMAND_WAIT_ENABLED 1

#define TRACE_QIO_TASK_NEW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_task_new(void * task, void * source, void * func, void * opaque)
{
}

static inline void trace_qio_task_new(void * task, void * source, void * func, void * opaque)
{
    if (true) {
        _nocheck__trace_qio_task_new(task, source, func, opaque);
    }
}

#define TRACE_QIO_TASK_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_task_complete(void * task)
{
}

static inline void trace_qio_task_complete(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_complete(task);
    }
}

#define TRACE_QIO_TASK_THREAD_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_task_thread_start(void * task, void * worker, void * opaque)
{
}

static inline void trace_qio_task_thread_start(void * task, void * worker, void * opaque)
{
    if (true) {
        _nocheck__trace_qio_task_thread_start(task, worker, opaque);
    }
}

#define TRACE_QIO_TASK_THREAD_RUN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_task_thread_run(void * task)
{
}

static inline void trace_qio_task_thread_run(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_thread_run(task);
    }
}

#define TRACE_QIO_TASK_THREAD_EXIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_task_thread_exit(void * task)
{
}

static inline void trace_qio_task_thread_exit(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_thread_exit(task);
    }
}

#define TRACE_QIO_TASK_THREAD_RESULT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_task_thread_result(void * task)
{
}

static inline void trace_qio_task_thread_result(void * task)
{
    if (true) {
        _nocheck__trace_qio_task_thread_result(task);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_NEW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_new(void * ioc)
{
}

static inline void trace_qio_channel_socket_new(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_new(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_NEW_FD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_new_fd(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_new_fd(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_new_fd(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_SYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_sync(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_connect_sync(void * ioc, void * addr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_sync(ioc, addr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_ASYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_async(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_connect_async(void * ioc, void * addr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_async(ioc, addr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_FAIL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_connect_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_CONNECT_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_connect_complete(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_connect_complete(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_connect_complete(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_SYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_sync(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_listen_sync(void * ioc, void * addr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_sync(ioc, addr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_ASYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_async(void * ioc, void * addr)
{
}

static inline void trace_qio_channel_socket_listen_async(void * ioc, void * addr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_async(ioc, addr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_FAIL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_listen_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_LISTEN_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_listen_complete(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_listen_complete(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_listen_complete(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_SYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_sync(void * ioc, void * localAddr, void * remoteAddr)
{
}

static inline void trace_qio_channel_socket_dgram_sync(void * ioc, void * localAddr, void * remoteAddr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_sync(ioc, localAddr, remoteAddr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_ASYNC_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_async(void * ioc, void * localAddr, void * remoteAddr)
{
}

static inline void trace_qio_channel_socket_dgram_async(void * ioc, void * localAddr, void * remoteAddr)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_async(ioc, localAddr, remoteAddr);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_FAIL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_dgram_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_DGRAM_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_dgram_complete(void * ioc, int fd)
{
}

static inline void trace_qio_channel_socket_dgram_complete(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_dgram_complete(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_accept(void * ioc)
{
}

static inline void trace_qio_channel_socket_accept(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_accept(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_FAIL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_accept_fail(void * ioc)
{
}

static inline void trace_qio_channel_socket_accept_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_accept_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_SOCKET_ACCEPT_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_socket_accept_complete(void * ioc, void * cioc, int fd)
{
}

static inline void trace_qio_channel_socket_accept_complete(void * ioc, void * cioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_socket_accept_complete(ioc, cioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_FILE_NEW_FD_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_file_new_fd(void * ioc, int fd)
{
}

static inline void trace_qio_channel_file_new_fd(void * ioc, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_file_new_fd(ioc, fd);
    }
}

#define TRACE_QIO_CHANNEL_FILE_NEW_PATH_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_file_new_path(void * ioc, const char * path, int flags, int mode, int fd)
{
}

static inline void trace_qio_channel_file_new_path(void * ioc, const char * path, int flags, int mode, int fd)
{
    if (true) {
        _nocheck__trace_qio_channel_file_new_path(ioc, path, flags, mode, fd);
    }
}

#define TRACE_QIO_CHANNEL_TLS_NEW_CLIENT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_new_client(void * ioc, void * master, void * creds, const char * hostname)
{
}

static inline void trace_qio_channel_tls_new_client(void * ioc, void * master, void * creds, const char * hostname)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_new_client(ioc, master, creds, hostname);
    }
}

#define TRACE_QIO_CHANNEL_TLS_NEW_SERVER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_new_server(void * ioc, void * master, void * creds, const char * aclname)
{
}

static inline void trace_qio_channel_tls_new_server(void * ioc, void * master, void * creds, const char * aclname)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_new_server(ioc, master, creds, aclname);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_start(void * ioc)
{
}

static inline void trace_qio_channel_tls_handshake_start(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_start(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_pending(void * ioc, int status)
{
}

static inline void trace_qio_channel_tls_handshake_pending(void * ioc, int status)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_pending(ioc, status);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_FAIL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_fail(void * ioc)
{
}

static inline void trace_qio_channel_tls_handshake_fail(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_fail(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_handshake_complete(void * ioc)
{
}

static inline void trace_qio_channel_tls_handshake_complete(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_handshake_complete(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_ALLOW_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_credentials_allow(void * ioc)
{
}

static inline void trace_qio_channel_tls_credentials_allow(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_credentials_allow(ioc);
    }
}

#define TRACE_QIO_CHANNEL_TLS_CREDENTIALS_DENY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_tls_credentials_deny(void * ioc)
{
}

static inline void trace_qio_channel_tls_credentials_deny(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_tls_credentials_deny(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_NEW_SERVER_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_new_server(void * ioc, void * master)
{
}

static inline void trace_qio_channel_websock_new_server(void * ioc, void * master)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_new_server(ioc, master);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_START_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_start(void * ioc)
{
}

static inline void trace_qio_channel_websock_handshake_start(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_start(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_PENDING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_pending(void * ioc, int status)
{
}

static inline void trace_qio_channel_websock_handshake_pending(void * ioc, int status)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_pending(ioc, status);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_REPLY_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_reply(void * ioc)
{
}

static inline void trace_qio_channel_websock_handshake_reply(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_reply(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_FAIL_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_fail(void * ioc, const char * msg)
{
}

static inline void trace_qio_channel_websock_handshake_fail(void * ioc, const char * msg)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_fail(ioc, msg);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HANDSHAKE_COMPLETE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_handshake_complete(void * ioc)
{
}

static inline void trace_qio_channel_websock_handshake_complete(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_handshake_complete(ioc);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_GREETING_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_http_greeting(void * ioc, const char * greeting)
{
}

static inline void trace_qio_channel_websock_http_greeting(void * ioc, const char * greeting)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_http_greeting(ioc, greeting);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HTTP_REQUEST_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_http_request(void * ioc, const char * protocols, const char * version, const char * host, const char * connection, const char * upgrade, const char * key)
{
}

static inline void trace_qio_channel_websock_http_request(void * ioc, const char * protocols, const char * version, const char * host, const char * connection, const char * upgrade, const char * key)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_http_request(ioc, protocols, version, host, connection, upgrade, key);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_PARTIAL_DECODE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_header_partial_decode(void * ioc, size_t payloadlen, unsigned char fin, unsigned char opcode, unsigned char has_mask)
{
}

static inline void trace_qio_channel_websock_header_partial_decode(void * ioc, size_t payloadlen, unsigned char fin, unsigned char opcode, unsigned char has_mask)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_header_partial_decode(ioc, payloadlen, fin, opcode, has_mask);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_HEADER_FULL_DECODE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_header_full_decode(void * ioc, size_t headerlen, size_t payloadlen, uint32_t mask)
{
}

static inline void trace_qio_channel_websock_header_full_decode(void * ioc, size_t headerlen, size_t payloadlen, uint32_t mask)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_header_full_decode(ioc, headerlen, payloadlen, mask);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_PAYLOAD_DECODE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_payload_decode(void * ioc, uint8_t opcode, size_t payload_remain)
{
}

static inline void trace_qio_channel_websock_payload_decode(void * ioc, uint8_t opcode, size_t payload_remain)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_payload_decode(ioc, opcode, payload_remain);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_ENCODE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_encode(void * ioc, uint8_t opcode, size_t payloadlen, size_t headerlen)
{
}

static inline void trace_qio_channel_websock_encode(void * ioc, uint8_t opcode, size_t payloadlen, size_t headerlen)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_encode(ioc, opcode, payloadlen, headerlen);
    }
}

#define TRACE_QIO_CHANNEL_WEBSOCK_CLOSE_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_websock_close(void * ioc)
{
}

static inline void trace_qio_channel_websock_close(void * ioc)
{
    if (true) {
        _nocheck__trace_qio_channel_websock_close(ioc);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_NEW_PID_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_command_new_pid(void * ioc, int writefd, int readfd, int pid)
{
}

static inline void trace_qio_channel_command_new_pid(void * ioc, int writefd, int readfd, int pid)
{
    if (true) {
        _nocheck__trace_qio_channel_command_new_pid(ioc, writefd, readfd, pid);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_NEW_SPAWN_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_command_new_spawn(void * ioc, const char * binary, int flags)
{
}

static inline void trace_qio_channel_command_new_spawn(void * ioc, const char * binary, int flags)
{
    if (true) {
        _nocheck__trace_qio_channel_command_new_spawn(ioc, binary, flags);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_ABORT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_command_abort(void * ioc, int pid)
{
}

static inline void trace_qio_channel_command_abort(void * ioc, int pid)
{
    if (true) {
        _nocheck__trace_qio_channel_command_abort(ioc, pid);
    }
}

#define TRACE_QIO_CHANNEL_COMMAND_WAIT_BACKEND_DSTATE() ( \
    false)

static inline void _nocheck__trace_qio_channel_command_wait(void * ioc, int pid, int ret, int status)
{
}

static inline void trace_qio_channel_command_wait(void * ioc, int pid, int ret, int status)
{
    if (true) {
        _nocheck__trace_qio_channel_command_wait(ioc, pid, ret, status);
    }
}
#endif /* TRACE_IO_GENERATED_TRACERS_H */
