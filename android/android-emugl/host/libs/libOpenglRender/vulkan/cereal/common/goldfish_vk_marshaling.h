// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module goldfish_vk_marshaling
// (header) generated by android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/genvk.py -registry android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/vk.xml cereal -o android/android-emugl/host/libs/libOpenglRender/vulkan/cereal
// Please do not modify directly;
// re-run android/scripts/generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing genvk.py and vk.xml
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
// python3 $VULKAN_REGISTRY_XML_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o $CEREAL_OUTPUT_DIR

#pragma once

#include <vulkan.h>

namespace goldfish_vk {

class VulkanStream;

#ifdef VK_VERSION_1_0
void marshal_VkApplicationInfo(
    VulkanStream* vkStream,
    const VkApplicationInfo* forMarshaling);

void unmarshal_VkApplicationInfo(
    VulkanStream* vkStream,
    VkApplicationInfo* forUnmarshaling);

void marshal_VkInstanceCreateInfo(
    VulkanStream* vkStream,
    const VkInstanceCreateInfo* forMarshaling);

void unmarshal_VkInstanceCreateInfo(
    VulkanStream* vkStream,
    VkInstanceCreateInfo* forUnmarshaling);

void marshal_VkAllocationCallbacks(
    VulkanStream* vkStream,
    const VkAllocationCallbacks* forMarshaling);

void unmarshal_VkAllocationCallbacks(
    VulkanStream* vkStream,
    VkAllocationCallbacks* forUnmarshaling);

VkResult marshal_vkCreateInstance(
    VulkanStream* vkStream,
    const VkInstanceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance* pInstance);

VkResult unmarshal_vkCreateInstance(
    VulkanStream* vkStream,
    const VkInstanceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance* pInstance);

void marshal_vkDestroyInstance(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyInstance(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkEnumeratePhysicalDevices(
    VulkanStream* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices);

VkResult unmarshal_vkEnumeratePhysicalDevices(
    VulkanStream* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices);

void marshal_VkPhysicalDeviceFeatures(
    VulkanStream* vkStream,
    const VkPhysicalDeviceFeatures* forMarshaling);

void unmarshal_VkPhysicalDeviceFeatures(
    VulkanStream* vkStream,
    VkPhysicalDeviceFeatures* forUnmarshaling);

void marshal_vkGetPhysicalDeviceFeatures(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures);

void unmarshal_vkGetPhysicalDeviceFeatures(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures);

void marshal_VkFormatProperties(
    VulkanStream* vkStream,
    const VkFormatProperties* forMarshaling);

void unmarshal_VkFormatProperties(
    VulkanStream* vkStream,
    VkFormatProperties* forUnmarshaling);

void marshal_vkGetPhysicalDeviceFormatProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties);

void unmarshal_vkGetPhysicalDeviceFormatProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties);

void marshal_VkExtent3D(
    VulkanStream* vkStream,
    const VkExtent3D* forMarshaling);

void unmarshal_VkExtent3D(
    VulkanStream* vkStream,
    VkExtent3D* forUnmarshaling);

void marshal_VkImageFormatProperties(
    VulkanStream* vkStream,
    const VkImageFormatProperties* forMarshaling);

void unmarshal_VkImageFormatProperties(
    VulkanStream* vkStream,
    VkImageFormatProperties* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceImageFormatProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties);

VkResult unmarshal_vkGetPhysicalDeviceImageFormatProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties);

void marshal_VkPhysicalDeviceLimits(
    VulkanStream* vkStream,
    const VkPhysicalDeviceLimits* forMarshaling);

void unmarshal_VkPhysicalDeviceLimits(
    VulkanStream* vkStream,
    VkPhysicalDeviceLimits* forUnmarshaling);

void marshal_VkPhysicalDeviceSparseProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceSparseProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceSparseProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceSparseProperties* forUnmarshaling);

void marshal_VkPhysicalDeviceProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceProperties* forUnmarshaling);

void marshal_vkGetPhysicalDeviceProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties);

void unmarshal_vkGetPhysicalDeviceProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties);

void marshal_VkQueueFamilyProperties(
    VulkanStream* vkStream,
    const VkQueueFamilyProperties* forMarshaling);

void unmarshal_VkQueueFamilyProperties(
    VulkanStream* vkStream,
    VkQueueFamilyProperties* forUnmarshaling);

void marshal_vkGetPhysicalDeviceQueueFamilyProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties);

void unmarshal_vkGetPhysicalDeviceQueueFamilyProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties);

void marshal_VkMemoryType(
    VulkanStream* vkStream,
    const VkMemoryType* forMarshaling);

void unmarshal_VkMemoryType(
    VulkanStream* vkStream,
    VkMemoryType* forUnmarshaling);

void marshal_VkMemoryHeap(
    VulkanStream* vkStream,
    const VkMemoryHeap* forMarshaling);

void unmarshal_VkMemoryHeap(
    VulkanStream* vkStream,
    VkMemoryHeap* forUnmarshaling);

void marshal_VkPhysicalDeviceMemoryProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceMemoryProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceMemoryProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceMemoryProperties* forUnmarshaling);

void marshal_vkGetPhysicalDeviceMemoryProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties);

void unmarshal_vkGetPhysicalDeviceMemoryProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties);

PFN_vkVoidFunction marshal_vkGetInstanceProcAddr(
    VulkanStream* vkStream,
    VkInstance instance,
    const char* pName);

PFN_vkVoidFunction unmarshal_vkGetInstanceProcAddr(
    VulkanStream* vkStream,
    VkInstance instance,
    const char* pName);

PFN_vkVoidFunction marshal_vkGetDeviceProcAddr(
    VulkanStream* vkStream,
    VkDevice device,
    const char* pName);

PFN_vkVoidFunction unmarshal_vkGetDeviceProcAddr(
    VulkanStream* vkStream,
    VkDevice device,
    const char* pName);

void marshal_VkDeviceQueueCreateInfo(
    VulkanStream* vkStream,
    const VkDeviceQueueCreateInfo* forMarshaling);

void unmarshal_VkDeviceQueueCreateInfo(
    VulkanStream* vkStream,
    VkDeviceQueueCreateInfo* forUnmarshaling);

void marshal_VkDeviceCreateInfo(
    VulkanStream* vkStream,
    const VkDeviceCreateInfo* forMarshaling);

void unmarshal_VkDeviceCreateInfo(
    VulkanStream* vkStream,
    VkDeviceCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateDevice(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkDeviceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice* pDevice);

VkResult unmarshal_vkCreateDevice(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkDeviceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice* pDevice);

void marshal_vkDestroyDevice(
    VulkanStream* vkStream,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyDevice(
    VulkanStream* vkStream,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkExtensionProperties(
    VulkanStream* vkStream,
    const VkExtensionProperties* forMarshaling);

void unmarshal_VkExtensionProperties(
    VulkanStream* vkStream,
    VkExtensionProperties* forUnmarshaling);

VkResult marshal_vkEnumerateInstanceExtensionProperties(
    VulkanStream* vkStream,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties);

VkResult unmarshal_vkEnumerateInstanceExtensionProperties(
    VulkanStream* vkStream,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties);

VkResult marshal_vkEnumerateDeviceExtensionProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties);

VkResult unmarshal_vkEnumerateDeviceExtensionProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties);

void marshal_VkLayerProperties(
    VulkanStream* vkStream,
    const VkLayerProperties* forMarshaling);

void unmarshal_VkLayerProperties(
    VulkanStream* vkStream,
    VkLayerProperties* forUnmarshaling);

VkResult marshal_vkEnumerateInstanceLayerProperties(
    VulkanStream* vkStream,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties);

VkResult unmarshal_vkEnumerateInstanceLayerProperties(
    VulkanStream* vkStream,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties);

VkResult marshal_vkEnumerateDeviceLayerProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties);

VkResult unmarshal_vkEnumerateDeviceLayerProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties);

void marshal_vkGetDeviceQueue(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t queueFamilyIndex,
    uint32_t queueIndex,
    VkQueue* pQueue);

void unmarshal_vkGetDeviceQueue(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t queueFamilyIndex,
    uint32_t queueIndex,
    VkQueue* pQueue);

void marshal_VkSubmitInfo(
    VulkanStream* vkStream,
    const VkSubmitInfo* forMarshaling);

void unmarshal_VkSubmitInfo(
    VulkanStream* vkStream,
    VkSubmitInfo* forUnmarshaling);

VkResult marshal_vkQueueSubmit(
    VulkanStream* vkStream,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence);

VkResult unmarshal_vkQueueSubmit(
    VulkanStream* vkStream,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence);

VkResult marshal_vkQueueWaitIdle(
    VulkanStream* vkStream,
    VkQueue queue);

VkResult unmarshal_vkQueueWaitIdle(
    VulkanStream* vkStream,
    VkQueue queue);

VkResult marshal_vkDeviceWaitIdle(
    VulkanStream* vkStream,
    VkDevice device);

VkResult unmarshal_vkDeviceWaitIdle(
    VulkanStream* vkStream,
    VkDevice device);

void marshal_VkMemoryAllocateInfo(
    VulkanStream* vkStream,
    const VkMemoryAllocateInfo* forMarshaling);

void unmarshal_VkMemoryAllocateInfo(
    VulkanStream* vkStream,
    VkMemoryAllocateInfo* forUnmarshaling);

VkResult marshal_vkAllocateMemory(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryAllocateInfo* pAllocateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDeviceMemory* pMemory);

VkResult unmarshal_vkAllocateMemory(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryAllocateInfo* pAllocateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDeviceMemory* pMemory);

void marshal_vkFreeMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkFreeMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkMapMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData);

VkResult unmarshal_vkMapMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData);

void marshal_vkUnmapMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory);

void unmarshal_vkUnmapMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory);

void marshal_VkMappedMemoryRange(
    VulkanStream* vkStream,
    const VkMappedMemoryRange* forMarshaling);

void unmarshal_VkMappedMemoryRange(
    VulkanStream* vkStream,
    VkMappedMemoryRange* forUnmarshaling);

VkResult marshal_vkFlushMappedMemoryRanges(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges);

VkResult unmarshal_vkFlushMappedMemoryRanges(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges);

VkResult marshal_vkInvalidateMappedMemoryRanges(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges);

VkResult unmarshal_vkInvalidateMappedMemoryRanges(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges);

void marshal_vkGetDeviceMemoryCommitment(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes);

void unmarshal_vkGetDeviceMemoryCommitment(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes);

VkResult marshal_vkBindBufferMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset);

VkResult unmarshal_vkBindBufferMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset);

VkResult marshal_vkBindImageMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset);

VkResult unmarshal_vkBindImageMemory(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset);

void marshal_VkMemoryRequirements(
    VulkanStream* vkStream,
    const VkMemoryRequirements* forMarshaling);

void unmarshal_VkMemoryRequirements(
    VulkanStream* vkStream,
    VkMemoryRequirements* forUnmarshaling);

void marshal_vkGetBufferMemoryRequirements(
    VulkanStream* vkStream,
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements);

void unmarshal_vkGetBufferMemoryRequirements(
    VulkanStream* vkStream,
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements);

void marshal_vkGetImageMemoryRequirements(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements);

void unmarshal_vkGetImageMemoryRequirements(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements);

void marshal_VkSparseImageFormatProperties(
    VulkanStream* vkStream,
    const VkSparseImageFormatProperties* forMarshaling);

void unmarshal_VkSparseImageFormatProperties(
    VulkanStream* vkStream,
    VkSparseImageFormatProperties* forUnmarshaling);

void marshal_VkSparseImageMemoryRequirements(
    VulkanStream* vkStream,
    const VkSparseImageMemoryRequirements* forMarshaling);

void unmarshal_VkSparseImageMemoryRequirements(
    VulkanStream* vkStream,
    VkSparseImageMemoryRequirements* forUnmarshaling);

void marshal_vkGetImageSparseMemoryRequirements(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements);

void unmarshal_vkGetImageSparseMemoryRequirements(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements);

void marshal_vkGetPhysicalDeviceSparseImageFormatProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties* pProperties);

void unmarshal_vkGetPhysicalDeviceSparseImageFormatProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties* pProperties);

void marshal_VkSparseMemoryBind(
    VulkanStream* vkStream,
    const VkSparseMemoryBind* forMarshaling);

void unmarshal_VkSparseMemoryBind(
    VulkanStream* vkStream,
    VkSparseMemoryBind* forUnmarshaling);

void marshal_VkSparseBufferMemoryBindInfo(
    VulkanStream* vkStream,
    const VkSparseBufferMemoryBindInfo* forMarshaling);

void unmarshal_VkSparseBufferMemoryBindInfo(
    VulkanStream* vkStream,
    VkSparseBufferMemoryBindInfo* forUnmarshaling);

void marshal_VkSparseImageOpaqueMemoryBindInfo(
    VulkanStream* vkStream,
    const VkSparseImageOpaqueMemoryBindInfo* forMarshaling);

void unmarshal_VkSparseImageOpaqueMemoryBindInfo(
    VulkanStream* vkStream,
    VkSparseImageOpaqueMemoryBindInfo* forUnmarshaling);

void marshal_VkImageSubresource(
    VulkanStream* vkStream,
    const VkImageSubresource* forMarshaling);

void unmarshal_VkImageSubresource(
    VulkanStream* vkStream,
    VkImageSubresource* forUnmarshaling);

void marshal_VkOffset3D(
    VulkanStream* vkStream,
    const VkOffset3D* forMarshaling);

void unmarshal_VkOffset3D(
    VulkanStream* vkStream,
    VkOffset3D* forUnmarshaling);

void marshal_VkSparseImageMemoryBind(
    VulkanStream* vkStream,
    const VkSparseImageMemoryBind* forMarshaling);

void unmarshal_VkSparseImageMemoryBind(
    VulkanStream* vkStream,
    VkSparseImageMemoryBind* forUnmarshaling);

void marshal_VkSparseImageMemoryBindInfo(
    VulkanStream* vkStream,
    const VkSparseImageMemoryBindInfo* forMarshaling);

void unmarshal_VkSparseImageMemoryBindInfo(
    VulkanStream* vkStream,
    VkSparseImageMemoryBindInfo* forUnmarshaling);

void marshal_VkBindSparseInfo(
    VulkanStream* vkStream,
    const VkBindSparseInfo* forMarshaling);

void unmarshal_VkBindSparseInfo(
    VulkanStream* vkStream,
    VkBindSparseInfo* forUnmarshaling);

VkResult marshal_vkQueueBindSparse(
    VulkanStream* vkStream,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence);

VkResult unmarshal_vkQueueBindSparse(
    VulkanStream* vkStream,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence);

void marshal_VkFenceCreateInfo(
    VulkanStream* vkStream,
    const VkFenceCreateInfo* forMarshaling);

void unmarshal_VkFenceCreateInfo(
    VulkanStream* vkStream,
    VkFenceCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateFence(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFenceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence);

VkResult unmarshal_vkCreateFence(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFenceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence);

void marshal_vkDestroyFence(
    VulkanStream* vkStream,
    VkDevice device,
    VkFence fence,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyFence(
    VulkanStream* vkStream,
    VkDevice device,
    VkFence fence,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkResetFences(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences);

VkResult unmarshal_vkResetFences(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences);

VkResult marshal_vkGetFenceStatus(
    VulkanStream* vkStream,
    VkDevice device,
    VkFence fence);

VkResult unmarshal_vkGetFenceStatus(
    VulkanStream* vkStream,
    VkDevice device,
    VkFence fence);

VkResult marshal_vkWaitForFences(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences,
    VkBool32 waitAll,
    uint64_t timeout);

VkResult unmarshal_vkWaitForFences(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences,
    VkBool32 waitAll,
    uint64_t timeout);

void marshal_VkSemaphoreCreateInfo(
    VulkanStream* vkStream,
    const VkSemaphoreCreateInfo* forMarshaling);

void unmarshal_VkSemaphoreCreateInfo(
    VulkanStream* vkStream,
    VkSemaphoreCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateSemaphore(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSemaphoreCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSemaphore* pSemaphore);

VkResult unmarshal_vkCreateSemaphore(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSemaphoreCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSemaphore* pSemaphore);

void marshal_vkDestroySemaphore(
    VulkanStream* vkStream,
    VkDevice device,
    VkSemaphore semaphore,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroySemaphore(
    VulkanStream* vkStream,
    VkDevice device,
    VkSemaphore semaphore,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkEventCreateInfo(
    VulkanStream* vkStream,
    const VkEventCreateInfo* forMarshaling);

void unmarshal_VkEventCreateInfo(
    VulkanStream* vkStream,
    VkEventCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateEvent(
    VulkanStream* vkStream,
    VkDevice device,
    const VkEventCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkEvent* pEvent);

VkResult unmarshal_vkCreateEvent(
    VulkanStream* vkStream,
    VkDevice device,
    const VkEventCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkEvent* pEvent);

void marshal_vkDestroyEvent(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyEvent(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkGetEventStatus(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event);

VkResult unmarshal_vkGetEventStatus(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event);

VkResult marshal_vkSetEvent(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event);

VkResult unmarshal_vkSetEvent(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event);

VkResult marshal_vkResetEvent(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event);

VkResult unmarshal_vkResetEvent(
    VulkanStream* vkStream,
    VkDevice device,
    VkEvent event);

void marshal_VkQueryPoolCreateInfo(
    VulkanStream* vkStream,
    const VkQueryPoolCreateInfo* forMarshaling);

void unmarshal_VkQueryPoolCreateInfo(
    VulkanStream* vkStream,
    VkQueryPoolCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateQueryPool(
    VulkanStream* vkStream,
    VkDevice device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkQueryPool* pQueryPool);

VkResult unmarshal_vkCreateQueryPool(
    VulkanStream* vkStream,
    VkDevice device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkQueryPool* pQueryPool);

void marshal_vkDestroyQueryPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkQueryPool queryPool,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyQueryPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkQueryPool queryPool,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkGetQueryPoolResults(
    VulkanStream* vkStream,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags);

VkResult unmarshal_vkGetQueryPoolResults(
    VulkanStream* vkStream,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags);

void marshal_VkBufferCreateInfo(
    VulkanStream* vkStream,
    const VkBufferCreateInfo* forMarshaling);

void unmarshal_VkBufferCreateInfo(
    VulkanStream* vkStream,
    VkBufferCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateBuffer(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer);

VkResult unmarshal_vkCreateBuffer(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer);

void marshal_vkDestroyBuffer(
    VulkanStream* vkStream,
    VkDevice device,
    VkBuffer buffer,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyBuffer(
    VulkanStream* vkStream,
    VkDevice device,
    VkBuffer buffer,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkBufferViewCreateInfo(
    VulkanStream* vkStream,
    const VkBufferViewCreateInfo* forMarshaling);

void unmarshal_VkBufferViewCreateInfo(
    VulkanStream* vkStream,
    VkBufferViewCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateBufferView(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferView* pView);

VkResult unmarshal_vkCreateBufferView(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferView* pView);

void marshal_vkDestroyBufferView(
    VulkanStream* vkStream,
    VkDevice device,
    VkBufferView bufferView,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyBufferView(
    VulkanStream* vkStream,
    VkDevice device,
    VkBufferView bufferView,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkImageCreateInfo(
    VulkanStream* vkStream,
    const VkImageCreateInfo* forMarshaling);

void unmarshal_VkImageCreateInfo(
    VulkanStream* vkStream,
    VkImageCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateImage(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage);

VkResult unmarshal_vkCreateImage(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage);

void marshal_vkDestroyImage(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyImage(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkSubresourceLayout(
    VulkanStream* vkStream,
    const VkSubresourceLayout* forMarshaling);

void unmarshal_VkSubresourceLayout(
    VulkanStream* vkStream,
    VkSubresourceLayout* forUnmarshaling);

void marshal_vkGetImageSubresourceLayout(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout* pLayout);

void unmarshal_vkGetImageSubresourceLayout(
    VulkanStream* vkStream,
    VkDevice device,
    VkImage image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout* pLayout);

void marshal_VkComponentMapping(
    VulkanStream* vkStream,
    const VkComponentMapping* forMarshaling);

void unmarshal_VkComponentMapping(
    VulkanStream* vkStream,
    VkComponentMapping* forUnmarshaling);

void marshal_VkImageSubresourceRange(
    VulkanStream* vkStream,
    const VkImageSubresourceRange* forMarshaling);

void unmarshal_VkImageSubresourceRange(
    VulkanStream* vkStream,
    VkImageSubresourceRange* forUnmarshaling);

void marshal_VkImageViewCreateInfo(
    VulkanStream* vkStream,
    const VkImageViewCreateInfo* forMarshaling);

void unmarshal_VkImageViewCreateInfo(
    VulkanStream* vkStream,
    VkImageViewCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateImageView(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImageView* pView);

VkResult unmarshal_vkCreateImageView(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImageView* pView);

void marshal_vkDestroyImageView(
    VulkanStream* vkStream,
    VkDevice device,
    VkImageView imageView,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyImageView(
    VulkanStream* vkStream,
    VkDevice device,
    VkImageView imageView,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkShaderModuleCreateInfo(
    VulkanStream* vkStream,
    const VkShaderModuleCreateInfo* forMarshaling);

void unmarshal_VkShaderModuleCreateInfo(
    VulkanStream* vkStream,
    VkShaderModuleCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateShaderModule(
    VulkanStream* vkStream,
    VkDevice device,
    const VkShaderModuleCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkShaderModule* pShaderModule);

VkResult unmarshal_vkCreateShaderModule(
    VulkanStream* vkStream,
    VkDevice device,
    const VkShaderModuleCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkShaderModule* pShaderModule);

void marshal_vkDestroyShaderModule(
    VulkanStream* vkStream,
    VkDevice device,
    VkShaderModule shaderModule,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyShaderModule(
    VulkanStream* vkStream,
    VkDevice device,
    VkShaderModule shaderModule,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkPipelineCacheCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineCacheCreateInfo* forMarshaling);

void unmarshal_VkPipelineCacheCreateInfo(
    VulkanStream* vkStream,
    VkPipelineCacheCreateInfo* forUnmarshaling);

VkResult marshal_vkCreatePipelineCache(
    VulkanStream* vkStream,
    VkDevice device,
    const VkPipelineCacheCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineCache* pPipelineCache);

VkResult unmarshal_vkCreatePipelineCache(
    VulkanStream* vkStream,
    VkDevice device,
    const VkPipelineCacheCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineCache* pPipelineCache);

void marshal_vkDestroyPipelineCache(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyPipelineCache(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkGetPipelineCacheData(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData);

VkResult unmarshal_vkGetPipelineCacheData(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData);

VkResult marshal_vkMergePipelineCaches(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache dstCache,
    uint32_t srcCacheCount,
    const VkPipelineCache* pSrcCaches);

VkResult unmarshal_vkMergePipelineCaches(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache dstCache,
    uint32_t srcCacheCount,
    const VkPipelineCache* pSrcCaches);

void marshal_VkSpecializationMapEntry(
    VulkanStream* vkStream,
    const VkSpecializationMapEntry* forMarshaling);

void unmarshal_VkSpecializationMapEntry(
    VulkanStream* vkStream,
    VkSpecializationMapEntry* forUnmarshaling);

void marshal_VkSpecializationInfo(
    VulkanStream* vkStream,
    const VkSpecializationInfo* forMarshaling);

void unmarshal_VkSpecializationInfo(
    VulkanStream* vkStream,
    VkSpecializationInfo* forUnmarshaling);

void marshal_VkPipelineShaderStageCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineShaderStageCreateInfo* forMarshaling);

void unmarshal_VkPipelineShaderStageCreateInfo(
    VulkanStream* vkStream,
    VkPipelineShaderStageCreateInfo* forUnmarshaling);

void marshal_VkVertexInputBindingDescription(
    VulkanStream* vkStream,
    const VkVertexInputBindingDescription* forMarshaling);

void unmarshal_VkVertexInputBindingDescription(
    VulkanStream* vkStream,
    VkVertexInputBindingDescription* forUnmarshaling);

void marshal_VkVertexInputAttributeDescription(
    VulkanStream* vkStream,
    const VkVertexInputAttributeDescription* forMarshaling);

void unmarshal_VkVertexInputAttributeDescription(
    VulkanStream* vkStream,
    VkVertexInputAttributeDescription* forUnmarshaling);

void marshal_VkPipelineVertexInputStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineVertexInputStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineVertexInputStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineVertexInputStateCreateInfo* forUnmarshaling);

void marshal_VkPipelineInputAssemblyStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineInputAssemblyStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineInputAssemblyStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineInputAssemblyStateCreateInfo* forUnmarshaling);

void marshal_VkPipelineTessellationStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineTessellationStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineTessellationStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineTessellationStateCreateInfo* forUnmarshaling);

void marshal_VkViewport(
    VulkanStream* vkStream,
    const VkViewport* forMarshaling);

void unmarshal_VkViewport(
    VulkanStream* vkStream,
    VkViewport* forUnmarshaling);

void marshal_VkOffset2D(
    VulkanStream* vkStream,
    const VkOffset2D* forMarshaling);

void unmarshal_VkOffset2D(
    VulkanStream* vkStream,
    VkOffset2D* forUnmarshaling);

void marshal_VkExtent2D(
    VulkanStream* vkStream,
    const VkExtent2D* forMarshaling);

void unmarshal_VkExtent2D(
    VulkanStream* vkStream,
    VkExtent2D* forUnmarshaling);

void marshal_VkRect2D(
    VulkanStream* vkStream,
    const VkRect2D* forMarshaling);

void unmarshal_VkRect2D(
    VulkanStream* vkStream,
    VkRect2D* forUnmarshaling);

void marshal_VkPipelineViewportStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineViewportStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineViewportStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineViewportStateCreateInfo* forUnmarshaling);

void marshal_VkPipelineRasterizationStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineRasterizationStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineRasterizationStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineRasterizationStateCreateInfo* forUnmarshaling);

void marshal_VkPipelineMultisampleStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineMultisampleStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineMultisampleStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineMultisampleStateCreateInfo* forUnmarshaling);

void marshal_VkStencilOpState(
    VulkanStream* vkStream,
    const VkStencilOpState* forMarshaling);

void unmarshal_VkStencilOpState(
    VulkanStream* vkStream,
    VkStencilOpState* forUnmarshaling);

void marshal_VkPipelineDepthStencilStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineDepthStencilStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineDepthStencilStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineDepthStencilStateCreateInfo* forUnmarshaling);

void marshal_VkPipelineColorBlendAttachmentState(
    VulkanStream* vkStream,
    const VkPipelineColorBlendAttachmentState* forMarshaling);

void unmarshal_VkPipelineColorBlendAttachmentState(
    VulkanStream* vkStream,
    VkPipelineColorBlendAttachmentState* forUnmarshaling);

void marshal_VkPipelineColorBlendStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineColorBlendStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineColorBlendStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineColorBlendStateCreateInfo* forUnmarshaling);

void marshal_VkPipelineDynamicStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineDynamicStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineDynamicStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineDynamicStateCreateInfo* forUnmarshaling);

void marshal_VkGraphicsPipelineCreateInfo(
    VulkanStream* vkStream,
    const VkGraphicsPipelineCreateInfo* forMarshaling);

void unmarshal_VkGraphicsPipelineCreateInfo(
    VulkanStream* vkStream,
    VkGraphicsPipelineCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateGraphicsPipelines(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines);

VkResult unmarshal_vkCreateGraphicsPipelines(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines);

void marshal_VkComputePipelineCreateInfo(
    VulkanStream* vkStream,
    const VkComputePipelineCreateInfo* forMarshaling);

void unmarshal_VkComputePipelineCreateInfo(
    VulkanStream* vkStream,
    VkComputePipelineCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateComputePipelines(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkComputePipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines);

VkResult unmarshal_vkCreateComputePipelines(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkComputePipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines);

void marshal_vkDestroyPipeline(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipeline pipeline,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyPipeline(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipeline pipeline,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkPushConstantRange(
    VulkanStream* vkStream,
    const VkPushConstantRange* forMarshaling);

void unmarshal_VkPushConstantRange(
    VulkanStream* vkStream,
    VkPushConstantRange* forUnmarshaling);

void marshal_VkPipelineLayoutCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineLayoutCreateInfo* forMarshaling);

void unmarshal_VkPipelineLayoutCreateInfo(
    VulkanStream* vkStream,
    VkPipelineLayoutCreateInfo* forUnmarshaling);

VkResult marshal_vkCreatePipelineLayout(
    VulkanStream* vkStream,
    VkDevice device,
    const VkPipelineLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineLayout* pPipelineLayout);

VkResult unmarshal_vkCreatePipelineLayout(
    VulkanStream* vkStream,
    VkDevice device,
    const VkPipelineLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineLayout* pPipelineLayout);

void marshal_vkDestroyPipelineLayout(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyPipelineLayout(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkSamplerCreateInfo(
    VulkanStream* vkStream,
    const VkSamplerCreateInfo* forMarshaling);

void unmarshal_VkSamplerCreateInfo(
    VulkanStream* vkStream,
    VkSamplerCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateSampler(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSamplerCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSampler* pSampler);

VkResult unmarshal_vkCreateSampler(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSamplerCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSampler* pSampler);

void marshal_vkDestroySampler(
    VulkanStream* vkStream,
    VkDevice device,
    VkSampler sampler,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroySampler(
    VulkanStream* vkStream,
    VkDevice device,
    VkSampler sampler,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkDescriptorSetLayoutBinding(
    VulkanStream* vkStream,
    const VkDescriptorSetLayoutBinding* forMarshaling);

void unmarshal_VkDescriptorSetLayoutBinding(
    VulkanStream* vkStream,
    VkDescriptorSetLayoutBinding* forUnmarshaling);

void marshal_VkDescriptorSetLayoutCreateInfo(
    VulkanStream* vkStream,
    const VkDescriptorSetLayoutCreateInfo* forMarshaling);

void unmarshal_VkDescriptorSetLayoutCreateInfo(
    VulkanStream* vkStream,
    VkDescriptorSetLayoutCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateDescriptorSetLayout(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorSetLayout* pSetLayout);

VkResult unmarshal_vkCreateDescriptorSetLayout(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorSetLayout* pSetLayout);

void marshal_vkDestroyDescriptorSetLayout(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyDescriptorSetLayout(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkDescriptorPoolSize(
    VulkanStream* vkStream,
    const VkDescriptorPoolSize* forMarshaling);

void unmarshal_VkDescriptorPoolSize(
    VulkanStream* vkStream,
    VkDescriptorPoolSize* forUnmarshaling);

void marshal_VkDescriptorPoolCreateInfo(
    VulkanStream* vkStream,
    const VkDescriptorPoolCreateInfo* forMarshaling);

void unmarshal_VkDescriptorPoolCreateInfo(
    VulkanStream* vkStream,
    VkDescriptorPoolCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateDescriptorPool(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorPool* pDescriptorPool);

VkResult unmarshal_vkCreateDescriptorPool(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorPool* pDescriptorPool);

void marshal_vkDestroyDescriptorPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyDescriptorPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkResetDescriptorPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags);

VkResult unmarshal_vkResetDescriptorPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags);

void marshal_VkDescriptorSetAllocateInfo(
    VulkanStream* vkStream,
    const VkDescriptorSetAllocateInfo* forMarshaling);

void unmarshal_VkDescriptorSetAllocateInfo(
    VulkanStream* vkStream,
    VkDescriptorSetAllocateInfo* forUnmarshaling);

VkResult marshal_vkAllocateDescriptorSets(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets);

VkResult unmarshal_vkAllocateDescriptorSets(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets);

VkResult marshal_vkFreeDescriptorSets(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets);

VkResult unmarshal_vkFreeDescriptorSets(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets);

void marshal_VkDescriptorImageInfo(
    VulkanStream* vkStream,
    const VkDescriptorImageInfo* forMarshaling);

void unmarshal_VkDescriptorImageInfo(
    VulkanStream* vkStream,
    VkDescriptorImageInfo* forUnmarshaling);

void marshal_VkDescriptorBufferInfo(
    VulkanStream* vkStream,
    const VkDescriptorBufferInfo* forMarshaling);

void unmarshal_VkDescriptorBufferInfo(
    VulkanStream* vkStream,
    VkDescriptorBufferInfo* forUnmarshaling);

void marshal_VkWriteDescriptorSet(
    VulkanStream* vkStream,
    const VkWriteDescriptorSet* forMarshaling);

void unmarshal_VkWriteDescriptorSet(
    VulkanStream* vkStream,
    VkWriteDescriptorSet* forUnmarshaling);

void marshal_VkCopyDescriptorSet(
    VulkanStream* vkStream,
    const VkCopyDescriptorSet* forMarshaling);

void unmarshal_VkCopyDescriptorSet(
    VulkanStream* vkStream,
    VkCopyDescriptorSet* forUnmarshaling);

void marshal_vkUpdateDescriptorSets(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet* pDescriptorCopies);

void unmarshal_vkUpdateDescriptorSets(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet* pDescriptorCopies);

void marshal_VkFramebufferCreateInfo(
    VulkanStream* vkStream,
    const VkFramebufferCreateInfo* forMarshaling);

void unmarshal_VkFramebufferCreateInfo(
    VulkanStream* vkStream,
    VkFramebufferCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateFramebuffer(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFramebufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFramebuffer* pFramebuffer);

VkResult unmarshal_vkCreateFramebuffer(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFramebufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFramebuffer* pFramebuffer);

void marshal_vkDestroyFramebuffer(
    VulkanStream* vkStream,
    VkDevice device,
    VkFramebuffer framebuffer,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyFramebuffer(
    VulkanStream* vkStream,
    VkDevice device,
    VkFramebuffer framebuffer,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkAttachmentDescription(
    VulkanStream* vkStream,
    const VkAttachmentDescription* forMarshaling);

void unmarshal_VkAttachmentDescription(
    VulkanStream* vkStream,
    VkAttachmentDescription* forUnmarshaling);

void marshal_VkAttachmentReference(
    VulkanStream* vkStream,
    const VkAttachmentReference* forMarshaling);

void unmarshal_VkAttachmentReference(
    VulkanStream* vkStream,
    VkAttachmentReference* forUnmarshaling);

void marshal_VkSubpassDescription(
    VulkanStream* vkStream,
    const VkSubpassDescription* forMarshaling);

void unmarshal_VkSubpassDescription(
    VulkanStream* vkStream,
    VkSubpassDescription* forUnmarshaling);

void marshal_VkSubpassDependency(
    VulkanStream* vkStream,
    const VkSubpassDependency* forMarshaling);

void unmarshal_VkSubpassDependency(
    VulkanStream* vkStream,
    VkSubpassDependency* forUnmarshaling);

void marshal_VkRenderPassCreateInfo(
    VulkanStream* vkStream,
    const VkRenderPassCreateInfo* forMarshaling);

void unmarshal_VkRenderPassCreateInfo(
    VulkanStream* vkStream,
    VkRenderPassCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateRenderPass(
    VulkanStream* vkStream,
    VkDevice device,
    const VkRenderPassCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass);

VkResult unmarshal_vkCreateRenderPass(
    VulkanStream* vkStream,
    VkDevice device,
    const VkRenderPassCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass);

void marshal_vkDestroyRenderPass(
    VulkanStream* vkStream,
    VkDevice device,
    VkRenderPass renderPass,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyRenderPass(
    VulkanStream* vkStream,
    VkDevice device,
    VkRenderPass renderPass,
    const VkAllocationCallbacks* pAllocator);

void marshal_vkGetRenderAreaGranularity(
    VulkanStream* vkStream,
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity);

void unmarshal_vkGetRenderAreaGranularity(
    VulkanStream* vkStream,
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity);

void marshal_VkCommandPoolCreateInfo(
    VulkanStream* vkStream,
    const VkCommandPoolCreateInfo* forMarshaling);

void unmarshal_VkCommandPoolCreateInfo(
    VulkanStream* vkStream,
    VkCommandPoolCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    const VkCommandPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCommandPool* pCommandPool);

VkResult unmarshal_vkCreateCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    const VkCommandPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCommandPool* pCommandPool);

void marshal_vkDestroyCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkResetCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags);

VkResult unmarshal_vkResetCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags);

void marshal_VkCommandBufferAllocateInfo(
    VulkanStream* vkStream,
    const VkCommandBufferAllocateInfo* forMarshaling);

void unmarshal_VkCommandBufferAllocateInfo(
    VulkanStream* vkStream,
    VkCommandBufferAllocateInfo* forUnmarshaling);

VkResult marshal_vkAllocateCommandBuffers(
    VulkanStream* vkStream,
    VkDevice device,
    const VkCommandBufferAllocateInfo* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers);

VkResult unmarshal_vkAllocateCommandBuffers(
    VulkanStream* vkStream,
    VkDevice device,
    const VkCommandBufferAllocateInfo* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers);

void marshal_vkFreeCommandBuffers(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers);

void unmarshal_vkFreeCommandBuffers(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers);

void marshal_VkCommandBufferInheritanceInfo(
    VulkanStream* vkStream,
    const VkCommandBufferInheritanceInfo* forMarshaling);

void unmarshal_VkCommandBufferInheritanceInfo(
    VulkanStream* vkStream,
    VkCommandBufferInheritanceInfo* forUnmarshaling);

void marshal_VkCommandBufferBeginInfo(
    VulkanStream* vkStream,
    const VkCommandBufferBeginInfo* forMarshaling);

void unmarshal_VkCommandBufferBeginInfo(
    VulkanStream* vkStream,
    VkCommandBufferBeginInfo* forUnmarshaling);

VkResult marshal_vkBeginCommandBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo);

VkResult unmarshal_vkBeginCommandBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo);

VkResult marshal_vkEndCommandBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

VkResult unmarshal_vkEndCommandBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

VkResult marshal_vkResetCommandBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags);

VkResult unmarshal_vkResetCommandBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags);

void marshal_vkCmdBindPipeline(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline);

void unmarshal_vkCmdBindPipeline(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline);

void marshal_vkCmdSetViewport(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewport* pViewports);

void unmarshal_vkCmdSetViewport(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewport* pViewports);

void marshal_vkCmdSetScissor(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstScissor,
    uint32_t scissorCount,
    const VkRect2D* pScissors);

void unmarshal_vkCmdSetScissor(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstScissor,
    uint32_t scissorCount,
    const VkRect2D* pScissors);

void marshal_vkCmdSetLineWidth(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    float lineWidth);

void unmarshal_vkCmdSetLineWidth(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    float lineWidth);

void marshal_vkCmdSetDepthBias(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor);

void unmarshal_vkCmdSetDepthBias(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor);

void marshal_vkCmdSetBlendConstants(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const float blendConstants);

void unmarshal_vkCmdSetBlendConstants(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const float blendConstants);

void marshal_vkCmdSetDepthBounds(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds);

void unmarshal_vkCmdSetDepthBounds(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds);

void marshal_vkCmdSetStencilCompareMask(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t compareMask);

void unmarshal_vkCmdSetStencilCompareMask(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t compareMask);

void marshal_vkCmdSetStencilWriteMask(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t writeMask);

void unmarshal_vkCmdSetStencilWriteMask(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t writeMask);

void marshal_vkCmdSetStencilReference(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t reference);

void unmarshal_vkCmdSetStencilReference(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t reference);

void marshal_vkCmdBindDescriptorSets(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t firstSet,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    uint32_t dynamicOffsetCount,
    const uint32_t* pDynamicOffsets);

void unmarshal_vkCmdBindDescriptorSets(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t firstSet,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    uint32_t dynamicOffsetCount,
    const uint32_t* pDynamicOffsets);

void marshal_vkCmdBindIndexBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType);

void unmarshal_vkCmdBindIndexBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType);

void marshal_vkCmdBindVertexBuffers(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets);

void unmarshal_vkCmdBindVertexBuffers(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets);

void marshal_vkCmdDraw(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t vertexCount,
    uint32_t instanceCount,
    uint32_t firstVertex,
    uint32_t firstInstance);

void unmarshal_vkCmdDraw(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t vertexCount,
    uint32_t instanceCount,
    uint32_t firstVertex,
    uint32_t firstInstance);

void marshal_vkCmdDrawIndexed(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t indexCount,
    uint32_t instanceCount,
    uint32_t firstIndex,
    int32_t vertexOffset,
    uint32_t firstInstance);

void unmarshal_vkCmdDrawIndexed(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t indexCount,
    uint32_t instanceCount,
    uint32_t firstIndex,
    int32_t vertexOffset,
    uint32_t firstInstance);

void marshal_vkCmdDrawIndirect(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride);

void unmarshal_vkCmdDrawIndirect(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride);

void marshal_vkCmdDrawIndexedIndirect(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride);

void unmarshal_vkCmdDrawIndexedIndirect(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride);

void marshal_vkCmdDispatch(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ);

void unmarshal_vkCmdDispatch(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ);

void marshal_vkCmdDispatchIndirect(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset);

void unmarshal_vkCmdDispatchIndirect(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset);

void marshal_VkBufferCopy(
    VulkanStream* vkStream,
    const VkBufferCopy* forMarshaling);

void unmarshal_VkBufferCopy(
    VulkanStream* vkStream,
    VkBufferCopy* forUnmarshaling);

void marshal_vkCmdCopyBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferCopy* pRegions);

void unmarshal_vkCmdCopyBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferCopy* pRegions);

void marshal_VkImageSubresourceLayers(
    VulkanStream* vkStream,
    const VkImageSubresourceLayers* forMarshaling);

void unmarshal_VkImageSubresourceLayers(
    VulkanStream* vkStream,
    VkImageSubresourceLayers* forUnmarshaling);

void marshal_VkImageCopy(
    VulkanStream* vkStream,
    const VkImageCopy* forMarshaling);

void unmarshal_VkImageCopy(
    VulkanStream* vkStream,
    VkImageCopy* forUnmarshaling);

void marshal_vkCmdCopyImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageCopy* pRegions);

void unmarshal_vkCmdCopyImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageCopy* pRegions);

void marshal_VkImageBlit(
    VulkanStream* vkStream,
    const VkImageBlit* forMarshaling);

void unmarshal_VkImageBlit(
    VulkanStream* vkStream,
    VkImageBlit* forUnmarshaling);

void marshal_vkCmdBlitImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageBlit* pRegions,
    VkFilter filter);

void unmarshal_vkCmdBlitImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageBlit* pRegions,
    VkFilter filter);

void marshal_VkBufferImageCopy(
    VulkanStream* vkStream,
    const VkBufferImageCopy* forMarshaling);

void unmarshal_VkBufferImageCopy(
    VulkanStream* vkStream,
    VkBufferImageCopy* forUnmarshaling);

void marshal_vkCmdCopyBufferToImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions);

void unmarshal_vkCmdCopyBufferToImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions);

void marshal_vkCmdCopyImageToBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions);

void unmarshal_vkCmdCopyImageToBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions);

void marshal_vkCmdUpdateBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const void* pData);

void unmarshal_vkCmdUpdateBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const void* pData);

void marshal_vkCmdFillBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint32_t data);

void unmarshal_vkCmdFillBuffer(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint32_t data);

void marshal_VkClearColorValue(
    VulkanStream* vkStream,
    const VkClearColorValue* forMarshaling);

void unmarshal_VkClearColorValue(
    VulkanStream* vkStream,
    VkClearColorValue* forUnmarshaling);

void marshal_vkCmdClearColorImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearColorValue* pColor,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges);

void unmarshal_vkCmdClearColorImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearColorValue* pColor,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges);

void marshal_VkClearDepthStencilValue(
    VulkanStream* vkStream,
    const VkClearDepthStencilValue* forMarshaling);

void unmarshal_VkClearDepthStencilValue(
    VulkanStream* vkStream,
    VkClearDepthStencilValue* forUnmarshaling);

void marshal_vkCmdClearDepthStencilImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearDepthStencilValue* pDepthStencil,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges);

void unmarshal_vkCmdClearDepthStencilImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearDepthStencilValue* pDepthStencil,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges);

void marshal_VkClearValue(
    VulkanStream* vkStream,
    const VkClearValue* forMarshaling);

void unmarshal_VkClearValue(
    VulkanStream* vkStream,
    VkClearValue* forUnmarshaling);

void marshal_VkClearAttachment(
    VulkanStream* vkStream,
    const VkClearAttachment* forMarshaling);

void unmarshal_VkClearAttachment(
    VulkanStream* vkStream,
    VkClearAttachment* forUnmarshaling);

void marshal_VkClearRect(
    VulkanStream* vkStream,
    const VkClearRect* forMarshaling);

void unmarshal_VkClearRect(
    VulkanStream* vkStream,
    VkClearRect* forUnmarshaling);

void marshal_vkCmdClearAttachments(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkClearAttachment* pAttachments,
    uint32_t rectCount,
    const VkClearRect* pRects);

void unmarshal_vkCmdClearAttachments(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkClearAttachment* pAttachments,
    uint32_t rectCount,
    const VkClearRect* pRects);

void marshal_VkImageResolve(
    VulkanStream* vkStream,
    const VkImageResolve* forMarshaling);

void unmarshal_VkImageResolve(
    VulkanStream* vkStream,
    VkImageResolve* forUnmarshaling);

void marshal_vkCmdResolveImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageResolve* pRegions);

void unmarshal_vkCmdResolveImage(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageResolve* pRegions);

void marshal_vkCmdSetEvent(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask);

void unmarshal_vkCmdSetEvent(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask);

void marshal_vkCmdResetEvent(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask);

void unmarshal_vkCmdResetEvent(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask);

void marshal_VkMemoryBarrier(
    VulkanStream* vkStream,
    const VkMemoryBarrier* forMarshaling);

void unmarshal_VkMemoryBarrier(
    VulkanStream* vkStream,
    VkMemoryBarrier* forUnmarshaling);

void marshal_VkBufferMemoryBarrier(
    VulkanStream* vkStream,
    const VkBufferMemoryBarrier* forMarshaling);

void unmarshal_VkBufferMemoryBarrier(
    VulkanStream* vkStream,
    VkBufferMemoryBarrier* forUnmarshaling);

void marshal_VkImageMemoryBarrier(
    VulkanStream* vkStream,
    const VkImageMemoryBarrier* forMarshaling);

void unmarshal_VkImageMemoryBarrier(
    VulkanStream* vkStream,
    VkImageMemoryBarrier* forUnmarshaling);

void marshal_vkCmdWaitEvents(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers);

void unmarshal_vkCmdWaitEvents(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers);

void marshal_vkCmdPipelineBarrier(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers);

void unmarshal_vkCmdPipelineBarrier(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers);

void marshal_vkCmdBeginQuery(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags);

void unmarshal_vkCmdBeginQuery(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags);

void marshal_vkCmdEndQuery(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query);

void unmarshal_vkCmdEndQuery(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query);

void marshal_vkCmdResetQueryPool(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount);

void unmarshal_vkCmdResetQueryPool(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount);

void marshal_vkCmdWriteTimestamp(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint32_t query);

void unmarshal_vkCmdWriteTimestamp(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint32_t query);

void marshal_vkCmdCopyQueryPoolResults(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags);

void unmarshal_vkCmdCopyQueryPoolResults(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags);

void marshal_vkCmdPushConstants(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint32_t offset,
    uint32_t size,
    const void* pValues);

void unmarshal_vkCmdPushConstants(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint32_t offset,
    uint32_t size,
    const void* pValues);

void marshal_VkRenderPassBeginInfo(
    VulkanStream* vkStream,
    const VkRenderPassBeginInfo* forMarshaling);

void unmarshal_VkRenderPassBeginInfo(
    VulkanStream* vkStream,
    VkRenderPassBeginInfo* forUnmarshaling);

void marshal_vkCmdBeginRenderPass(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    VkSubpassContents contents);

void unmarshal_vkCmdBeginRenderPass(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    VkSubpassContents contents);

void marshal_vkCmdNextSubpass(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents);

void unmarshal_vkCmdNextSubpass(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents);

void marshal_vkCmdEndRenderPass(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

void unmarshal_vkCmdEndRenderPass(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

void marshal_vkCmdExecuteCommands(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers);

void unmarshal_vkCmdExecuteCommands(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers);

void marshal_VkDispatchIndirectCommand(
    VulkanStream* vkStream,
    const VkDispatchIndirectCommand* forMarshaling);

void unmarshal_VkDispatchIndirectCommand(
    VulkanStream* vkStream,
    VkDispatchIndirectCommand* forUnmarshaling);

void marshal_VkDrawIndexedIndirectCommand(
    VulkanStream* vkStream,
    const VkDrawIndexedIndirectCommand* forMarshaling);

void unmarshal_VkDrawIndexedIndirectCommand(
    VulkanStream* vkStream,
    VkDrawIndexedIndirectCommand* forUnmarshaling);

void marshal_VkDrawIndirectCommand(
    VulkanStream* vkStream,
    const VkDrawIndirectCommand* forMarshaling);

void unmarshal_VkDrawIndirectCommand(
    VulkanStream* vkStream,
    VkDrawIndirectCommand* forUnmarshaling);

void marshal_VkBaseOutStructure(
    VulkanStream* vkStream,
    const VkBaseOutStructure* forMarshaling);

void unmarshal_VkBaseOutStructure(
    VulkanStream* vkStream,
    VkBaseOutStructure* forUnmarshaling);

void marshal_VkBaseInStructure(
    VulkanStream* vkStream,
    const VkBaseInStructure* forMarshaling);

void unmarshal_VkBaseInStructure(
    VulkanStream* vkStream,
    VkBaseInStructure* forUnmarshaling);

#endif
#ifdef VK_VERSION_1_1
VkResult marshal_vkEnumerateInstanceVersion(
    VulkanStream* vkStream,
    uint32_t* pApiVersion);

VkResult unmarshal_vkEnumerateInstanceVersion(
    VulkanStream* vkStream,
    uint32_t* pApiVersion);

void marshal_VkPhysicalDeviceSubgroupProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceSubgroupProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceSubgroupProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceSubgroupProperties* forUnmarshaling);

void marshal_VkBindBufferMemoryInfo(
    VulkanStream* vkStream,
    const VkBindBufferMemoryInfo* forMarshaling);

void unmarshal_VkBindBufferMemoryInfo(
    VulkanStream* vkStream,
    VkBindBufferMemoryInfo* forUnmarshaling);

void marshal_VkBindImageMemoryInfo(
    VulkanStream* vkStream,
    const VkBindImageMemoryInfo* forMarshaling);

void unmarshal_VkBindImageMemoryInfo(
    VulkanStream* vkStream,
    VkBindImageMemoryInfo* forUnmarshaling);

VkResult marshal_vkBindBufferMemory2(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos);

VkResult unmarshal_vkBindBufferMemory2(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos);

VkResult marshal_vkBindImageMemory2(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos);

VkResult unmarshal_vkBindImageMemory2(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos);

void marshal_VkPhysicalDevice16BitStorageFeatures(
    VulkanStream* vkStream,
    const VkPhysicalDevice16BitStorageFeatures* forMarshaling);

void unmarshal_VkPhysicalDevice16BitStorageFeatures(
    VulkanStream* vkStream,
    VkPhysicalDevice16BitStorageFeatures* forUnmarshaling);

void marshal_VkMemoryDedicatedRequirements(
    VulkanStream* vkStream,
    const VkMemoryDedicatedRequirements* forMarshaling);

void unmarshal_VkMemoryDedicatedRequirements(
    VulkanStream* vkStream,
    VkMemoryDedicatedRequirements* forUnmarshaling);

void marshal_VkMemoryDedicatedAllocateInfo(
    VulkanStream* vkStream,
    const VkMemoryDedicatedAllocateInfo* forMarshaling);

void unmarshal_VkMemoryDedicatedAllocateInfo(
    VulkanStream* vkStream,
    VkMemoryDedicatedAllocateInfo* forUnmarshaling);

void marshal_VkMemoryAllocateFlagsInfo(
    VulkanStream* vkStream,
    const VkMemoryAllocateFlagsInfo* forMarshaling);

void unmarshal_VkMemoryAllocateFlagsInfo(
    VulkanStream* vkStream,
    VkMemoryAllocateFlagsInfo* forUnmarshaling);

void marshal_VkDeviceGroupRenderPassBeginInfo(
    VulkanStream* vkStream,
    const VkDeviceGroupRenderPassBeginInfo* forMarshaling);

void unmarshal_VkDeviceGroupRenderPassBeginInfo(
    VulkanStream* vkStream,
    VkDeviceGroupRenderPassBeginInfo* forUnmarshaling);

void marshal_VkDeviceGroupCommandBufferBeginInfo(
    VulkanStream* vkStream,
    const VkDeviceGroupCommandBufferBeginInfo* forMarshaling);

void unmarshal_VkDeviceGroupCommandBufferBeginInfo(
    VulkanStream* vkStream,
    VkDeviceGroupCommandBufferBeginInfo* forUnmarshaling);

void marshal_VkDeviceGroupSubmitInfo(
    VulkanStream* vkStream,
    const VkDeviceGroupSubmitInfo* forMarshaling);

void unmarshal_VkDeviceGroupSubmitInfo(
    VulkanStream* vkStream,
    VkDeviceGroupSubmitInfo* forUnmarshaling);

void marshal_VkDeviceGroupBindSparseInfo(
    VulkanStream* vkStream,
    const VkDeviceGroupBindSparseInfo* forMarshaling);

void unmarshal_VkDeviceGroupBindSparseInfo(
    VulkanStream* vkStream,
    VkDeviceGroupBindSparseInfo* forUnmarshaling);

void marshal_vkGetDeviceGroupPeerMemoryFeatures(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

void unmarshal_vkGetDeviceGroupPeerMemoryFeatures(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

void marshal_vkCmdSetDeviceMask(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask);

void unmarshal_vkCmdSetDeviceMask(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask);

void marshal_vkCmdDispatchBase(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ);

void unmarshal_vkCmdDispatchBase(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ);

void marshal_VkBindBufferMemoryDeviceGroupInfo(
    VulkanStream* vkStream,
    const VkBindBufferMemoryDeviceGroupInfo* forMarshaling);

void unmarshal_VkBindBufferMemoryDeviceGroupInfo(
    VulkanStream* vkStream,
    VkBindBufferMemoryDeviceGroupInfo* forUnmarshaling);

void marshal_VkBindImageMemoryDeviceGroupInfo(
    VulkanStream* vkStream,
    const VkBindImageMemoryDeviceGroupInfo* forMarshaling);

void unmarshal_VkBindImageMemoryDeviceGroupInfo(
    VulkanStream* vkStream,
    VkBindImageMemoryDeviceGroupInfo* forUnmarshaling);

void marshal_VkPhysicalDeviceGroupProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceGroupProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceGroupProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceGroupProperties* forUnmarshaling);

void marshal_VkDeviceGroupDeviceCreateInfo(
    VulkanStream* vkStream,
    const VkDeviceGroupDeviceCreateInfo* forMarshaling);

void unmarshal_VkDeviceGroupDeviceCreateInfo(
    VulkanStream* vkStream,
    VkDeviceGroupDeviceCreateInfo* forUnmarshaling);

VkResult marshal_vkEnumeratePhysicalDeviceGroups(
    VulkanStream* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

VkResult unmarshal_vkEnumeratePhysicalDeviceGroups(
    VulkanStream* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

void marshal_VkBufferMemoryRequirementsInfo2(
    VulkanStream* vkStream,
    const VkBufferMemoryRequirementsInfo2* forMarshaling);

void unmarshal_VkBufferMemoryRequirementsInfo2(
    VulkanStream* vkStream,
    VkBufferMemoryRequirementsInfo2* forUnmarshaling);

void marshal_VkImageMemoryRequirementsInfo2(
    VulkanStream* vkStream,
    const VkImageMemoryRequirementsInfo2* forMarshaling);

void unmarshal_VkImageMemoryRequirementsInfo2(
    VulkanStream* vkStream,
    VkImageMemoryRequirementsInfo2* forUnmarshaling);

void marshal_VkImageSparseMemoryRequirementsInfo2(
    VulkanStream* vkStream,
    const VkImageSparseMemoryRequirementsInfo2* forMarshaling);

void unmarshal_VkImageSparseMemoryRequirementsInfo2(
    VulkanStream* vkStream,
    VkImageSparseMemoryRequirementsInfo2* forUnmarshaling);

void marshal_VkMemoryRequirements2(
    VulkanStream* vkStream,
    const VkMemoryRequirements2* forMarshaling);

void unmarshal_VkMemoryRequirements2(
    VulkanStream* vkStream,
    VkMemoryRequirements2* forUnmarshaling);

void marshal_VkSparseImageMemoryRequirements2(
    VulkanStream* vkStream,
    const VkSparseImageMemoryRequirements2* forMarshaling);

void unmarshal_VkSparseImageMemoryRequirements2(
    VulkanStream* vkStream,
    VkSparseImageMemoryRequirements2* forUnmarshaling);

void marshal_vkGetImageMemoryRequirements2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void unmarshal_vkGetImageMemoryRequirements2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void marshal_vkGetBufferMemoryRequirements2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void unmarshal_vkGetBufferMemoryRequirements2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void marshal_vkGetImageSparseMemoryRequirements2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

void unmarshal_vkGetImageSparseMemoryRequirements2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

void marshal_VkPhysicalDeviceFeatures2(
    VulkanStream* vkStream,
    const VkPhysicalDeviceFeatures2* forMarshaling);

void unmarshal_VkPhysicalDeviceFeatures2(
    VulkanStream* vkStream,
    VkPhysicalDeviceFeatures2* forUnmarshaling);

void marshal_VkPhysicalDeviceProperties2(
    VulkanStream* vkStream,
    const VkPhysicalDeviceProperties2* forMarshaling);

void unmarshal_VkPhysicalDeviceProperties2(
    VulkanStream* vkStream,
    VkPhysicalDeviceProperties2* forUnmarshaling);

void marshal_VkFormatProperties2(
    VulkanStream* vkStream,
    const VkFormatProperties2* forMarshaling);

void unmarshal_VkFormatProperties2(
    VulkanStream* vkStream,
    VkFormatProperties2* forUnmarshaling);

void marshal_VkImageFormatProperties2(
    VulkanStream* vkStream,
    const VkImageFormatProperties2* forMarshaling);

void unmarshal_VkImageFormatProperties2(
    VulkanStream* vkStream,
    VkImageFormatProperties2* forUnmarshaling);

void marshal_VkPhysicalDeviceImageFormatInfo2(
    VulkanStream* vkStream,
    const VkPhysicalDeviceImageFormatInfo2* forMarshaling);

void unmarshal_VkPhysicalDeviceImageFormatInfo2(
    VulkanStream* vkStream,
    VkPhysicalDeviceImageFormatInfo2* forUnmarshaling);

void marshal_VkQueueFamilyProperties2(
    VulkanStream* vkStream,
    const VkQueueFamilyProperties2* forMarshaling);

void unmarshal_VkQueueFamilyProperties2(
    VulkanStream* vkStream,
    VkQueueFamilyProperties2* forUnmarshaling);

void marshal_VkPhysicalDeviceMemoryProperties2(
    VulkanStream* vkStream,
    const VkPhysicalDeviceMemoryProperties2* forMarshaling);

void unmarshal_VkPhysicalDeviceMemoryProperties2(
    VulkanStream* vkStream,
    VkPhysicalDeviceMemoryProperties2* forUnmarshaling);

void marshal_VkSparseImageFormatProperties2(
    VulkanStream* vkStream,
    const VkSparseImageFormatProperties2* forMarshaling);

void unmarshal_VkSparseImageFormatProperties2(
    VulkanStream* vkStream,
    VkSparseImageFormatProperties2* forUnmarshaling);

void marshal_VkPhysicalDeviceSparseImageFormatInfo2(
    VulkanStream* vkStream,
    const VkPhysicalDeviceSparseImageFormatInfo2* forMarshaling);

void unmarshal_VkPhysicalDeviceSparseImageFormatInfo2(
    VulkanStream* vkStream,
    VkPhysicalDeviceSparseImageFormatInfo2* forUnmarshaling);

void marshal_vkGetPhysicalDeviceFeatures2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures);

void unmarshal_vkGetPhysicalDeviceFeatures2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures);

void marshal_vkGetPhysicalDeviceProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties);

void unmarshal_vkGetPhysicalDeviceProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties);

void marshal_vkGetPhysicalDeviceFormatProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties);

void unmarshal_vkGetPhysicalDeviceFormatProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties);

VkResult marshal_vkGetPhysicalDeviceImageFormatProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties);

VkResult unmarshal_vkGetPhysicalDeviceImageFormatProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties);

void marshal_vkGetPhysicalDeviceQueueFamilyProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties);

void unmarshal_vkGetPhysicalDeviceQueueFamilyProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties);

void marshal_vkGetPhysicalDeviceMemoryProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties);

void unmarshal_vkGetPhysicalDeviceMemoryProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties);

void marshal_vkGetPhysicalDeviceSparseImageFormatProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties);

void unmarshal_vkGetPhysicalDeviceSparseImageFormatProperties2(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties);

void marshal_vkTrimCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags);

void unmarshal_vkTrimCommandPool(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags);

void marshal_VkPhysicalDevicePointClippingProperties(
    VulkanStream* vkStream,
    const VkPhysicalDevicePointClippingProperties* forMarshaling);

void unmarshal_VkPhysicalDevicePointClippingProperties(
    VulkanStream* vkStream,
    VkPhysicalDevicePointClippingProperties* forUnmarshaling);

void marshal_VkInputAttachmentAspectReference(
    VulkanStream* vkStream,
    const VkInputAttachmentAspectReference* forMarshaling);

void unmarshal_VkInputAttachmentAspectReference(
    VulkanStream* vkStream,
    VkInputAttachmentAspectReference* forUnmarshaling);

void marshal_VkRenderPassInputAttachmentAspectCreateInfo(
    VulkanStream* vkStream,
    const VkRenderPassInputAttachmentAspectCreateInfo* forMarshaling);

void unmarshal_VkRenderPassInputAttachmentAspectCreateInfo(
    VulkanStream* vkStream,
    VkRenderPassInputAttachmentAspectCreateInfo* forUnmarshaling);

void marshal_VkImageViewUsageCreateInfo(
    VulkanStream* vkStream,
    const VkImageViewUsageCreateInfo* forMarshaling);

void unmarshal_VkImageViewUsageCreateInfo(
    VulkanStream* vkStream,
    VkImageViewUsageCreateInfo* forUnmarshaling);

void marshal_VkPipelineTessellationDomainOriginStateCreateInfo(
    VulkanStream* vkStream,
    const VkPipelineTessellationDomainOriginStateCreateInfo* forMarshaling);

void unmarshal_VkPipelineTessellationDomainOriginStateCreateInfo(
    VulkanStream* vkStream,
    VkPipelineTessellationDomainOriginStateCreateInfo* forUnmarshaling);

void marshal_VkRenderPassMultiviewCreateInfo(
    VulkanStream* vkStream,
    const VkRenderPassMultiviewCreateInfo* forMarshaling);

void unmarshal_VkRenderPassMultiviewCreateInfo(
    VulkanStream* vkStream,
    VkRenderPassMultiviewCreateInfo* forUnmarshaling);

void marshal_VkPhysicalDeviceMultiviewFeatures(
    VulkanStream* vkStream,
    const VkPhysicalDeviceMultiviewFeatures* forMarshaling);

void unmarshal_VkPhysicalDeviceMultiviewFeatures(
    VulkanStream* vkStream,
    VkPhysicalDeviceMultiviewFeatures* forUnmarshaling);

void marshal_VkPhysicalDeviceMultiviewProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceMultiviewProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceMultiviewProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceMultiviewProperties* forUnmarshaling);

void marshal_VkPhysicalDeviceVariablePointerFeatures(
    VulkanStream* vkStream,
    const VkPhysicalDeviceVariablePointerFeatures* forMarshaling);

void unmarshal_VkPhysicalDeviceVariablePointerFeatures(
    VulkanStream* vkStream,
    VkPhysicalDeviceVariablePointerFeatures* forUnmarshaling);

void marshal_VkPhysicalDeviceProtectedMemoryFeatures(
    VulkanStream* vkStream,
    const VkPhysicalDeviceProtectedMemoryFeatures* forMarshaling);

void unmarshal_VkPhysicalDeviceProtectedMemoryFeatures(
    VulkanStream* vkStream,
    VkPhysicalDeviceProtectedMemoryFeatures* forUnmarshaling);

void marshal_VkPhysicalDeviceProtectedMemoryProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceProtectedMemoryProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceProtectedMemoryProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceProtectedMemoryProperties* forUnmarshaling);

void marshal_VkDeviceQueueInfo2(
    VulkanStream* vkStream,
    const VkDeviceQueueInfo2* forMarshaling);

void unmarshal_VkDeviceQueueInfo2(
    VulkanStream* vkStream,
    VkDeviceQueueInfo2* forUnmarshaling);

void marshal_VkProtectedSubmitInfo(
    VulkanStream* vkStream,
    const VkProtectedSubmitInfo* forMarshaling);

void unmarshal_VkProtectedSubmitInfo(
    VulkanStream* vkStream,
    VkProtectedSubmitInfo* forUnmarshaling);

void marshal_vkGetDeviceQueue2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDeviceQueueInfo2* pQueueInfo,
    VkQueue* pQueue);

void unmarshal_vkGetDeviceQueue2(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDeviceQueueInfo2* pQueueInfo,
    VkQueue* pQueue);

void marshal_VkSamplerYcbcrConversionCreateInfo(
    VulkanStream* vkStream,
    const VkSamplerYcbcrConversionCreateInfo* forMarshaling);

void unmarshal_VkSamplerYcbcrConversionCreateInfo(
    VulkanStream* vkStream,
    VkSamplerYcbcrConversionCreateInfo* forUnmarshaling);

void marshal_VkSamplerYcbcrConversionInfo(
    VulkanStream* vkStream,
    const VkSamplerYcbcrConversionInfo* forMarshaling);

void unmarshal_VkSamplerYcbcrConversionInfo(
    VulkanStream* vkStream,
    VkSamplerYcbcrConversionInfo* forUnmarshaling);

void marshal_VkBindImagePlaneMemoryInfo(
    VulkanStream* vkStream,
    const VkBindImagePlaneMemoryInfo* forMarshaling);

void unmarshal_VkBindImagePlaneMemoryInfo(
    VulkanStream* vkStream,
    VkBindImagePlaneMemoryInfo* forUnmarshaling);

void marshal_VkImagePlaneMemoryRequirementsInfo(
    VulkanStream* vkStream,
    const VkImagePlaneMemoryRequirementsInfo* forMarshaling);

void unmarshal_VkImagePlaneMemoryRequirementsInfo(
    VulkanStream* vkStream,
    VkImagePlaneMemoryRequirementsInfo* forUnmarshaling);

void marshal_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VulkanStream* vkStream,
    const VkPhysicalDeviceSamplerYcbcrConversionFeatures* forMarshaling);

void unmarshal_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    VulkanStream* vkStream,
    VkPhysicalDeviceSamplerYcbcrConversionFeatures* forUnmarshaling);

void marshal_VkSamplerYcbcrConversionImageFormatProperties(
    VulkanStream* vkStream,
    const VkSamplerYcbcrConversionImageFormatProperties* forMarshaling);

void unmarshal_VkSamplerYcbcrConversionImageFormatProperties(
    VulkanStream* vkStream,
    VkSamplerYcbcrConversionImageFormatProperties* forUnmarshaling);

VkResult marshal_vkCreateSamplerYcbcrConversion(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion);

VkResult unmarshal_vkCreateSamplerYcbcrConversion(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion);

void marshal_vkDestroySamplerYcbcrConversion(
    VulkanStream* vkStream,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroySamplerYcbcrConversion(
    VulkanStream* vkStream,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator);

void marshal_VkDescriptorUpdateTemplateEntry(
    VulkanStream* vkStream,
    const VkDescriptorUpdateTemplateEntry* forMarshaling);

void unmarshal_VkDescriptorUpdateTemplateEntry(
    VulkanStream* vkStream,
    VkDescriptorUpdateTemplateEntry* forUnmarshaling);

void marshal_VkDescriptorUpdateTemplateCreateInfo(
    VulkanStream* vkStream,
    const VkDescriptorUpdateTemplateCreateInfo* forMarshaling);

void unmarshal_VkDescriptorUpdateTemplateCreateInfo(
    VulkanStream* vkStream,
    VkDescriptorUpdateTemplateCreateInfo* forUnmarshaling);

VkResult marshal_vkCreateDescriptorUpdateTemplate(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);

VkResult unmarshal_vkCreateDescriptorUpdateTemplate(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);

void marshal_vkDestroyDescriptorUpdateTemplate(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyDescriptorUpdateTemplate(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator);

void marshal_vkUpdateDescriptorSetWithTemplate(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData);

void unmarshal_vkUpdateDescriptorSetWithTemplate(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData);

void marshal_VkExternalMemoryProperties(
    VulkanStream* vkStream,
    const VkExternalMemoryProperties* forMarshaling);

void unmarshal_VkExternalMemoryProperties(
    VulkanStream* vkStream,
    VkExternalMemoryProperties* forUnmarshaling);

void marshal_VkPhysicalDeviceExternalImageFormatInfo(
    VulkanStream* vkStream,
    const VkPhysicalDeviceExternalImageFormatInfo* forMarshaling);

void unmarshal_VkPhysicalDeviceExternalImageFormatInfo(
    VulkanStream* vkStream,
    VkPhysicalDeviceExternalImageFormatInfo* forUnmarshaling);

void marshal_VkExternalImageFormatProperties(
    VulkanStream* vkStream,
    const VkExternalImageFormatProperties* forMarshaling);

void unmarshal_VkExternalImageFormatProperties(
    VulkanStream* vkStream,
    VkExternalImageFormatProperties* forUnmarshaling);

void marshal_VkPhysicalDeviceExternalBufferInfo(
    VulkanStream* vkStream,
    const VkPhysicalDeviceExternalBufferInfo* forMarshaling);

void unmarshal_VkPhysicalDeviceExternalBufferInfo(
    VulkanStream* vkStream,
    VkPhysicalDeviceExternalBufferInfo* forUnmarshaling);

void marshal_VkExternalBufferProperties(
    VulkanStream* vkStream,
    const VkExternalBufferProperties* forMarshaling);

void unmarshal_VkExternalBufferProperties(
    VulkanStream* vkStream,
    VkExternalBufferProperties* forUnmarshaling);

void marshal_VkPhysicalDeviceIDProperties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceIDProperties* forMarshaling);

void unmarshal_VkPhysicalDeviceIDProperties(
    VulkanStream* vkStream,
    VkPhysicalDeviceIDProperties* forUnmarshaling);

void marshal_vkGetPhysicalDeviceExternalBufferProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties);

void unmarshal_vkGetPhysicalDeviceExternalBufferProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties);

void marshal_VkExternalMemoryImageCreateInfo(
    VulkanStream* vkStream,
    const VkExternalMemoryImageCreateInfo* forMarshaling);

void unmarshal_VkExternalMemoryImageCreateInfo(
    VulkanStream* vkStream,
    VkExternalMemoryImageCreateInfo* forUnmarshaling);

void marshal_VkExternalMemoryBufferCreateInfo(
    VulkanStream* vkStream,
    const VkExternalMemoryBufferCreateInfo* forMarshaling);

void unmarshal_VkExternalMemoryBufferCreateInfo(
    VulkanStream* vkStream,
    VkExternalMemoryBufferCreateInfo* forUnmarshaling);

void marshal_VkExportMemoryAllocateInfo(
    VulkanStream* vkStream,
    const VkExportMemoryAllocateInfo* forMarshaling);

void unmarshal_VkExportMemoryAllocateInfo(
    VulkanStream* vkStream,
    VkExportMemoryAllocateInfo* forUnmarshaling);

void marshal_VkPhysicalDeviceExternalFenceInfo(
    VulkanStream* vkStream,
    const VkPhysicalDeviceExternalFenceInfo* forMarshaling);

void unmarshal_VkPhysicalDeviceExternalFenceInfo(
    VulkanStream* vkStream,
    VkPhysicalDeviceExternalFenceInfo* forUnmarshaling);

void marshal_VkExternalFenceProperties(
    VulkanStream* vkStream,
    const VkExternalFenceProperties* forMarshaling);

void unmarshal_VkExternalFenceProperties(
    VulkanStream* vkStream,
    VkExternalFenceProperties* forUnmarshaling);

void marshal_vkGetPhysicalDeviceExternalFenceProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties);

void unmarshal_vkGetPhysicalDeviceExternalFenceProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties);

void marshal_VkExportFenceCreateInfo(
    VulkanStream* vkStream,
    const VkExportFenceCreateInfo* forMarshaling);

void unmarshal_VkExportFenceCreateInfo(
    VulkanStream* vkStream,
    VkExportFenceCreateInfo* forUnmarshaling);

void marshal_VkExportSemaphoreCreateInfo(
    VulkanStream* vkStream,
    const VkExportSemaphoreCreateInfo* forMarshaling);

void unmarshal_VkExportSemaphoreCreateInfo(
    VulkanStream* vkStream,
    VkExportSemaphoreCreateInfo* forUnmarshaling);

void marshal_VkPhysicalDeviceExternalSemaphoreInfo(
    VulkanStream* vkStream,
    const VkPhysicalDeviceExternalSemaphoreInfo* forMarshaling);

void unmarshal_VkPhysicalDeviceExternalSemaphoreInfo(
    VulkanStream* vkStream,
    VkPhysicalDeviceExternalSemaphoreInfo* forUnmarshaling);

void marshal_VkExternalSemaphoreProperties(
    VulkanStream* vkStream,
    const VkExternalSemaphoreProperties* forMarshaling);

void unmarshal_VkExternalSemaphoreProperties(
    VulkanStream* vkStream,
    VkExternalSemaphoreProperties* forUnmarshaling);

void marshal_vkGetPhysicalDeviceExternalSemaphoreProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

void unmarshal_vkGetPhysicalDeviceExternalSemaphoreProperties(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

void marshal_VkPhysicalDeviceMaintenance3Properties(
    VulkanStream* vkStream,
    const VkPhysicalDeviceMaintenance3Properties* forMarshaling);

void unmarshal_VkPhysicalDeviceMaintenance3Properties(
    VulkanStream* vkStream,
    VkPhysicalDeviceMaintenance3Properties* forUnmarshaling);

void marshal_VkDescriptorSetLayoutSupport(
    VulkanStream* vkStream,
    const VkDescriptorSetLayoutSupport* forMarshaling);

void unmarshal_VkDescriptorSetLayoutSupport(
    VulkanStream* vkStream,
    VkDescriptorSetLayoutSupport* forUnmarshaling);

void marshal_vkGetDescriptorSetLayoutSupport(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport);

void unmarshal_vkGetDescriptorSetLayoutSupport(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport);

void marshal_VkPhysicalDeviceShaderDrawParameterFeatures(
    VulkanStream* vkStream,
    const VkPhysicalDeviceShaderDrawParameterFeatures* forMarshaling);

void unmarshal_VkPhysicalDeviceShaderDrawParameterFeatures(
    VulkanStream* vkStream,
    VkPhysicalDeviceShaderDrawParameterFeatures* forUnmarshaling);

#endif
#ifdef VK_KHR_surface
void marshal_vkDestroySurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    VkSurfaceKHR surface,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroySurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    VkSurfaceKHR surface,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkGetPhysicalDeviceSurfaceSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported);

VkResult unmarshal_vkGetPhysicalDeviceSurfaceSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported);

void marshal_VkSurfaceCapabilitiesKHR(
    VulkanStream* vkStream,
    const VkSurfaceCapabilitiesKHR* forMarshaling);

void unmarshal_VkSurfaceCapabilitiesKHR(
    VulkanStream* vkStream,
    VkSurfaceCapabilitiesKHR* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);

VkResult unmarshal_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities);

void marshal_VkSurfaceFormatKHR(
    VulkanStream* vkStream,
    const VkSurfaceFormatKHR* forMarshaling);

void unmarshal_VkSurfaceFormatKHR(
    VulkanStream* vkStream,
    VkSurfaceFormatKHR* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceSurfaceFormatsKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats);

VkResult unmarshal_vkGetPhysicalDeviceSurfaceFormatsKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats);

VkResult marshal_vkGetPhysicalDeviceSurfacePresentModesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes);

VkResult unmarshal_vkGetPhysicalDeviceSurfacePresentModesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes);

#endif
#ifdef VK_KHR_swapchain
void marshal_VkSwapchainCreateInfoKHR(
    VulkanStream* vkStream,
    const VkSwapchainCreateInfoKHR* forMarshaling);

void unmarshal_VkSwapchainCreateInfoKHR(
    VulkanStream* vkStream,
    VkSwapchainCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateSwapchainKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSwapchainCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchain);

VkResult unmarshal_vkCreateSwapchainKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSwapchainCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchain);

void marshal_vkDestroySwapchainKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroySwapchainKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkGetSwapchainImagesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pSwapchainImageCount,
    VkImage* pSwapchainImages);

VkResult unmarshal_vkGetSwapchainImagesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pSwapchainImageCount,
    VkImage* pSwapchainImages);

VkResult marshal_vkAcquireNextImageKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint32_t* pImageIndex);

VkResult unmarshal_vkAcquireNextImageKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint32_t* pImageIndex);

void marshal_VkPresentInfoKHR(
    VulkanStream* vkStream,
    const VkPresentInfoKHR* forMarshaling);

void unmarshal_VkPresentInfoKHR(
    VulkanStream* vkStream,
    VkPresentInfoKHR* forUnmarshaling);

VkResult marshal_vkQueuePresentKHR(
    VulkanStream* vkStream,
    VkQueue queue,
    const VkPresentInfoKHR* pPresentInfo);

VkResult unmarshal_vkQueuePresentKHR(
    VulkanStream* vkStream,
    VkQueue queue,
    const VkPresentInfoKHR* pPresentInfo);

void marshal_VkImageSwapchainCreateInfoKHR(
    VulkanStream* vkStream,
    const VkImageSwapchainCreateInfoKHR* forMarshaling);

void unmarshal_VkImageSwapchainCreateInfoKHR(
    VulkanStream* vkStream,
    VkImageSwapchainCreateInfoKHR* forUnmarshaling);

void marshal_VkBindImageMemorySwapchainInfoKHR(
    VulkanStream* vkStream,
    const VkBindImageMemorySwapchainInfoKHR* forMarshaling);

void unmarshal_VkBindImageMemorySwapchainInfoKHR(
    VulkanStream* vkStream,
    VkBindImageMemorySwapchainInfoKHR* forUnmarshaling);

void marshal_VkAcquireNextImageInfoKHR(
    VulkanStream* vkStream,
    const VkAcquireNextImageInfoKHR* forMarshaling);

void unmarshal_VkAcquireNextImageInfoKHR(
    VulkanStream* vkStream,
    VkAcquireNextImageInfoKHR* forUnmarshaling);

void marshal_VkDeviceGroupPresentCapabilitiesKHR(
    VulkanStream* vkStream,
    const VkDeviceGroupPresentCapabilitiesKHR* forMarshaling);

void unmarshal_VkDeviceGroupPresentCapabilitiesKHR(
    VulkanStream* vkStream,
    VkDeviceGroupPresentCapabilitiesKHR* forUnmarshaling);

void marshal_VkDeviceGroupPresentInfoKHR(
    VulkanStream* vkStream,
    const VkDeviceGroupPresentInfoKHR* forMarshaling);

void unmarshal_VkDeviceGroupPresentInfoKHR(
    VulkanStream* vkStream,
    VkDeviceGroupPresentInfoKHR* forUnmarshaling);

void marshal_VkDeviceGroupSwapchainCreateInfoKHR(
    VulkanStream* vkStream,
    const VkDeviceGroupSwapchainCreateInfoKHR* forMarshaling);

void unmarshal_VkDeviceGroupSwapchainCreateInfoKHR(
    VulkanStream* vkStream,
    VkDeviceGroupSwapchainCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkGetDeviceGroupPresentCapabilitiesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);

VkResult unmarshal_vkGetDeviceGroupPresentCapabilitiesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities);

VkResult marshal_vkGetDeviceGroupSurfacePresentModesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes);

VkResult unmarshal_vkGetDeviceGroupSurfacePresentModesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes);

VkResult marshal_vkGetPhysicalDevicePresentRectanglesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pRectCount,
    VkRect2D* pRects);

VkResult unmarshal_vkGetPhysicalDevicePresentRectanglesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pRectCount,
    VkRect2D* pRects);

VkResult marshal_vkAcquireNextImage2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkAcquireNextImageInfoKHR* pAcquireInfo,
    uint32_t* pImageIndex);

VkResult unmarshal_vkAcquireNextImage2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkAcquireNextImageInfoKHR* pAcquireInfo,
    uint32_t* pImageIndex);

#endif
#ifdef VK_KHR_display
void marshal_VkDisplayPropertiesKHR(
    VulkanStream* vkStream,
    const VkDisplayPropertiesKHR* forMarshaling);

void unmarshal_VkDisplayPropertiesKHR(
    VulkanStream* vkStream,
    VkDisplayPropertiesKHR* forUnmarshaling);

void marshal_VkDisplayModeParametersKHR(
    VulkanStream* vkStream,
    const VkDisplayModeParametersKHR* forMarshaling);

void unmarshal_VkDisplayModeParametersKHR(
    VulkanStream* vkStream,
    VkDisplayModeParametersKHR* forUnmarshaling);

void marshal_VkDisplayModePropertiesKHR(
    VulkanStream* vkStream,
    const VkDisplayModePropertiesKHR* forMarshaling);

void unmarshal_VkDisplayModePropertiesKHR(
    VulkanStream* vkStream,
    VkDisplayModePropertiesKHR* forUnmarshaling);

void marshal_VkDisplayModeCreateInfoKHR(
    VulkanStream* vkStream,
    const VkDisplayModeCreateInfoKHR* forMarshaling);

void unmarshal_VkDisplayModeCreateInfoKHR(
    VulkanStream* vkStream,
    VkDisplayModeCreateInfoKHR* forUnmarshaling);

void marshal_VkDisplayPlaneCapabilitiesKHR(
    VulkanStream* vkStream,
    const VkDisplayPlaneCapabilitiesKHR* forMarshaling);

void unmarshal_VkDisplayPlaneCapabilitiesKHR(
    VulkanStream* vkStream,
    VkDisplayPlaneCapabilitiesKHR* forUnmarshaling);

void marshal_VkDisplayPlanePropertiesKHR(
    VulkanStream* vkStream,
    const VkDisplayPlanePropertiesKHR* forMarshaling);

void unmarshal_VkDisplayPlanePropertiesKHR(
    VulkanStream* vkStream,
    VkDisplayPlanePropertiesKHR* forUnmarshaling);

void marshal_VkDisplaySurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    const VkDisplaySurfaceCreateInfoKHR* forMarshaling);

void unmarshal_VkDisplaySurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    VkDisplaySurfaceCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceDisplayPropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties);

VkResult unmarshal_vkGetPhysicalDeviceDisplayPropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties);

VkResult marshal_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties);

VkResult unmarshal_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties);

VkResult marshal_vkGetDisplayPlaneSupportedDisplaysKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t planeIndex,
    uint32_t* pDisplayCount,
    VkDisplayKHR* pDisplays);

VkResult unmarshal_vkGetDisplayPlaneSupportedDisplaysKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t planeIndex,
    uint32_t* pDisplayCount,
    VkDisplayKHR* pDisplays);

VkResult marshal_vkGetDisplayModePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties);

VkResult unmarshal_vkGetDisplayModePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties);

VkResult marshal_vkCreateDisplayModeKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDisplayModeKHR* pMode);

VkResult unmarshal_vkCreateDisplayModeKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDisplayModeKHR* pMode);

VkResult marshal_vkGetDisplayPlaneCapabilitiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities);

VkResult unmarshal_vkGetDisplayPlaneCapabilitiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities);

VkResult marshal_vkCreateDisplayPlaneSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateDisplayPlaneSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

#endif
#ifdef VK_KHR_display_swapchain
void marshal_VkDisplayPresentInfoKHR(
    VulkanStream* vkStream,
    const VkDisplayPresentInfoKHR* forMarshaling);

void unmarshal_VkDisplayPresentInfoKHR(
    VulkanStream* vkStream,
    VkDisplayPresentInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateSharedSwapchainsKHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchains);

VkResult unmarshal_vkCreateSharedSwapchainsKHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchains);

#endif
#ifdef VK_KHR_xlib_surface
void marshal_VkXlibSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    const VkXlibSurfaceCreateInfoKHR* forMarshaling);

void unmarshal_VkXlibSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    VkXlibSurfaceCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateXlibSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateXlibSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkBool32 marshal_vkGetPhysicalDeviceXlibPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    Display* dpy,
    VisualID visualID);

VkBool32 unmarshal_vkGetPhysicalDeviceXlibPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    Display* dpy,
    VisualID visualID);

#endif
#ifdef VK_KHR_xcb_surface
void marshal_VkXcbSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    const VkXcbSurfaceCreateInfoKHR* forMarshaling);

void unmarshal_VkXcbSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    VkXcbSurfaceCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateXcbSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateXcbSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkBool32 marshal_vkGetPhysicalDeviceXcbPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    xcb_connection_t* connection,
    xcb_visualid_t visual_id);

VkBool32 unmarshal_vkGetPhysicalDeviceXcbPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    xcb_connection_t* connection,
    xcb_visualid_t visual_id);

#endif
#ifdef VK_KHR_wayland_surface
void marshal_VkWaylandSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    const VkWaylandSurfaceCreateInfoKHR* forMarshaling);

void unmarshal_VkWaylandSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    VkWaylandSurfaceCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateWaylandSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateWaylandSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkBool32 marshal_vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    wl_display* display);

VkBool32 unmarshal_vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    wl_display* display);

#endif
#ifdef VK_KHR_mir_surface
void marshal_VkMirSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    const VkMirSurfaceCreateInfoKHR* forMarshaling);

void unmarshal_VkMirSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    VkMirSurfaceCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateMirSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkMirSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateMirSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkMirSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkBool32 marshal_vkGetPhysicalDeviceMirPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    MirConnection* connection);

VkBool32 unmarshal_vkGetPhysicalDeviceMirPresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    MirConnection* connection);

#endif
#ifdef VK_KHR_android_surface
void marshal_VkAndroidSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    const VkAndroidSurfaceCreateInfoKHR* forMarshaling);

void unmarshal_VkAndroidSurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    VkAndroidSurfaceCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateAndroidSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateAndroidSurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

#endif
#ifdef VK_KHR_win32_surface
void marshal_VkWin32SurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    const VkWin32SurfaceCreateInfoKHR* forMarshaling);

void unmarshal_VkWin32SurfaceCreateInfoKHR(
    VulkanStream* vkStream,
    VkWin32SurfaceCreateInfoKHR* forUnmarshaling);

VkResult marshal_vkCreateWin32SurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateWin32SurfaceKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkBool32 marshal_vkGetPhysicalDeviceWin32PresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex);

VkBool32 unmarshal_vkGetPhysicalDeviceWin32PresentationSupportKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex);

#endif
#ifdef VK_KHR_sampler_mirror_clamp_to_edge
#endif
#ifdef VK_KHR_multiview
#endif
#ifdef VK_KHR_get_physical_device_properties2
void marshal_vkGetPhysicalDeviceFeatures2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures);

void unmarshal_vkGetPhysicalDeviceFeatures2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures);

void marshal_vkGetPhysicalDeviceProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties);

void unmarshal_vkGetPhysicalDeviceProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties);

void marshal_vkGetPhysicalDeviceFormatProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties);

void unmarshal_vkGetPhysicalDeviceFormatProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties);

VkResult marshal_vkGetPhysicalDeviceImageFormatProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties);

VkResult unmarshal_vkGetPhysicalDeviceImageFormatProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties);

void marshal_vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties);

void unmarshal_vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties);

void marshal_vkGetPhysicalDeviceMemoryProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties);

void unmarshal_vkGetPhysicalDeviceMemoryProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties);

void marshal_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties);

void unmarshal_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties);

#endif
#ifdef VK_KHR_device_group
void marshal_vkGetDeviceGroupPeerMemoryFeaturesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

void unmarshal_vkGetDeviceGroupPeerMemoryFeaturesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures);

void marshal_vkCmdSetDeviceMaskKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask);

void unmarshal_vkCmdSetDeviceMaskKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask);

void marshal_vkCmdDispatchBaseKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ);

void unmarshal_vkCmdDispatchBaseKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ);

#endif
#ifdef VK_KHR_shader_draw_parameters
#endif
#ifdef VK_KHR_maintenance1
void marshal_vkTrimCommandPoolKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags);

void unmarshal_vkTrimCommandPoolKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags);

#endif
#ifdef VK_KHR_device_group_creation
VkResult marshal_vkEnumeratePhysicalDeviceGroupsKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

VkResult unmarshal_vkEnumeratePhysicalDeviceGroupsKHR(
    VulkanStream* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties);

#endif
#ifdef VK_KHR_external_memory_capabilities
void marshal_vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties);

void unmarshal_vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties);

#endif
#ifdef VK_KHR_external_memory
#endif
#ifdef VK_KHR_external_memory_win32
void marshal_VkImportMemoryWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkImportMemoryWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkImportMemoryWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkImportMemoryWin32HandleInfoKHR* forUnmarshaling);

void marshal_VkExportMemoryWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkExportMemoryWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkExportMemoryWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkExportMemoryWin32HandleInfoKHR* forUnmarshaling);

void marshal_VkMemoryWin32HandlePropertiesKHR(
    VulkanStream* vkStream,
    const VkMemoryWin32HandlePropertiesKHR* forMarshaling);

void unmarshal_VkMemoryWin32HandlePropertiesKHR(
    VulkanStream* vkStream,
    VkMemoryWin32HandlePropertiesKHR* forUnmarshaling);

void marshal_VkMemoryGetWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkMemoryGetWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkMemoryGetWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkMemoryGetWin32HandleInfoKHR* forUnmarshaling);

VkResult marshal_vkGetMemoryWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle);

VkResult unmarshal_vkGetMemoryWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle);

VkResult marshal_vkGetMemoryWin32HandlePropertiesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);

VkResult unmarshal_vkGetMemoryWin32HandlePropertiesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties);

#endif
#ifdef VK_KHR_external_memory_fd
void marshal_VkImportMemoryFdInfoKHR(
    VulkanStream* vkStream,
    const VkImportMemoryFdInfoKHR* forMarshaling);

void unmarshal_VkImportMemoryFdInfoKHR(
    VulkanStream* vkStream,
    VkImportMemoryFdInfoKHR* forUnmarshaling);

void marshal_VkMemoryFdPropertiesKHR(
    VulkanStream* vkStream,
    const VkMemoryFdPropertiesKHR* forMarshaling);

void unmarshal_VkMemoryFdPropertiesKHR(
    VulkanStream* vkStream,
    VkMemoryFdPropertiesKHR* forUnmarshaling);

void marshal_VkMemoryGetFdInfoKHR(
    VulkanStream* vkStream,
    const VkMemoryGetFdInfoKHR* forMarshaling);

void unmarshal_VkMemoryGetFdInfoKHR(
    VulkanStream* vkStream,
    VkMemoryGetFdInfoKHR* forUnmarshaling);

VkResult marshal_vkGetMemoryFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryGetFdInfoKHR* pGetFdInfo,
    int* pFd);

VkResult unmarshal_vkGetMemoryFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryGetFdInfoKHR* pGetFdInfo,
    int* pFd);

VkResult marshal_vkGetMemoryFdPropertiesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties);

VkResult unmarshal_vkGetMemoryFdPropertiesKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties);

#endif
#ifdef VK_KHR_win32_keyed_mutex
void marshal_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VulkanStream* vkStream,
    const VkWin32KeyedMutexAcquireReleaseInfoKHR* forMarshaling);

void unmarshal_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    VulkanStream* vkStream,
    VkWin32KeyedMutexAcquireReleaseInfoKHR* forUnmarshaling);

#endif
#ifdef VK_KHR_external_semaphore_capabilities
void marshal_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

void unmarshal_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties);

#endif
#ifdef VK_KHR_external_semaphore
#endif
#ifdef VK_KHR_external_semaphore_win32
void marshal_VkImportSemaphoreWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkImportSemaphoreWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkImportSemaphoreWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkImportSemaphoreWin32HandleInfoKHR* forUnmarshaling);

void marshal_VkExportSemaphoreWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkExportSemaphoreWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkExportSemaphoreWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkExportSemaphoreWin32HandleInfoKHR* forUnmarshaling);

void marshal_VkD3D12FenceSubmitInfoKHR(
    VulkanStream* vkStream,
    const VkD3D12FenceSubmitInfoKHR* forMarshaling);

void unmarshal_VkD3D12FenceSubmitInfoKHR(
    VulkanStream* vkStream,
    VkD3D12FenceSubmitInfoKHR* forUnmarshaling);

void marshal_VkSemaphoreGetWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkSemaphoreGetWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkSemaphoreGetWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkSemaphoreGetWin32HandleInfoKHR* forUnmarshaling);

VkResult marshal_vkImportSemaphoreWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);

VkResult unmarshal_vkImportSemaphoreWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo);

VkResult marshal_vkGetSemaphoreWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle);

VkResult unmarshal_vkGetSemaphoreWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle);

#endif
#ifdef VK_KHR_external_semaphore_fd
void marshal_VkImportSemaphoreFdInfoKHR(
    VulkanStream* vkStream,
    const VkImportSemaphoreFdInfoKHR* forMarshaling);

void unmarshal_VkImportSemaphoreFdInfoKHR(
    VulkanStream* vkStream,
    VkImportSemaphoreFdInfoKHR* forUnmarshaling);

void marshal_VkSemaphoreGetFdInfoKHR(
    VulkanStream* vkStream,
    const VkSemaphoreGetFdInfoKHR* forMarshaling);

void unmarshal_VkSemaphoreGetFdInfoKHR(
    VulkanStream* vkStream,
    VkSemaphoreGetFdInfoKHR* forUnmarshaling);

VkResult marshal_vkImportSemaphoreFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);

VkResult unmarshal_vkImportSemaphoreFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo);

VkResult marshal_vkGetSemaphoreFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
    int* pFd);

VkResult unmarshal_vkGetSemaphoreFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
    int* pFd);

#endif
#ifdef VK_KHR_push_descriptor
void marshal_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VulkanStream* vkStream,
    const VkPhysicalDevicePushDescriptorPropertiesKHR* forMarshaling);

void unmarshal_VkPhysicalDevicePushDescriptorPropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevicePushDescriptorPropertiesKHR* forUnmarshaling);

void marshal_vkCmdPushDescriptorSetKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t set,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites);

void unmarshal_vkCmdPushDescriptorSetKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t set,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites);

void marshal_vkCmdPushDescriptorSetWithTemplateKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint32_t set,
    const void* pData);

void unmarshal_vkCmdPushDescriptorSetWithTemplateKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint32_t set,
    const void* pData);

#endif
#ifdef VK_KHR_16bit_storage
#endif
#ifdef VK_KHR_incremental_present
void marshal_VkRectLayerKHR(
    VulkanStream* vkStream,
    const VkRectLayerKHR* forMarshaling);

void unmarshal_VkRectLayerKHR(
    VulkanStream* vkStream,
    VkRectLayerKHR* forUnmarshaling);

void marshal_VkPresentRegionKHR(
    VulkanStream* vkStream,
    const VkPresentRegionKHR* forMarshaling);

void unmarshal_VkPresentRegionKHR(
    VulkanStream* vkStream,
    VkPresentRegionKHR* forUnmarshaling);

void marshal_VkPresentRegionsKHR(
    VulkanStream* vkStream,
    const VkPresentRegionsKHR* forMarshaling);

void unmarshal_VkPresentRegionsKHR(
    VulkanStream* vkStream,
    VkPresentRegionsKHR* forUnmarshaling);

#endif
#ifdef VK_KHR_descriptor_update_template
VkResult marshal_vkCreateDescriptorUpdateTemplateKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);

VkResult unmarshal_vkCreateDescriptorUpdateTemplateKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate);

void marshal_vkDestroyDescriptorUpdateTemplateKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyDescriptorUpdateTemplateKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator);

void marshal_vkUpdateDescriptorSetWithTemplateKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData);

void unmarshal_vkUpdateDescriptorSetWithTemplateKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData);

#endif
#ifdef VK_KHR_create_renderpass2
void marshal_VkAttachmentDescription2KHR(
    VulkanStream* vkStream,
    const VkAttachmentDescription2KHR* forMarshaling);

void unmarshal_VkAttachmentDescription2KHR(
    VulkanStream* vkStream,
    VkAttachmentDescription2KHR* forUnmarshaling);

void marshal_VkAttachmentReference2KHR(
    VulkanStream* vkStream,
    const VkAttachmentReference2KHR* forMarshaling);

void unmarshal_VkAttachmentReference2KHR(
    VulkanStream* vkStream,
    VkAttachmentReference2KHR* forUnmarshaling);

void marshal_VkSubpassDescription2KHR(
    VulkanStream* vkStream,
    const VkSubpassDescription2KHR* forMarshaling);

void unmarshal_VkSubpassDescription2KHR(
    VulkanStream* vkStream,
    VkSubpassDescription2KHR* forUnmarshaling);

void marshal_VkSubpassDependency2KHR(
    VulkanStream* vkStream,
    const VkSubpassDependency2KHR* forMarshaling);

void unmarshal_VkSubpassDependency2KHR(
    VulkanStream* vkStream,
    VkSubpassDependency2KHR* forUnmarshaling);

void marshal_VkRenderPassCreateInfo2KHR(
    VulkanStream* vkStream,
    const VkRenderPassCreateInfo2KHR* forMarshaling);

void unmarshal_VkRenderPassCreateInfo2KHR(
    VulkanStream* vkStream,
    VkRenderPassCreateInfo2KHR* forUnmarshaling);

VkResult marshal_vkCreateRenderPass2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkRenderPassCreateInfo2KHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass);

VkResult unmarshal_vkCreateRenderPass2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkRenderPassCreateInfo2KHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass);

void marshal_VkSubpassBeginInfoKHR(
    VulkanStream* vkStream,
    const VkSubpassBeginInfoKHR* forMarshaling);

void unmarshal_VkSubpassBeginInfoKHR(
    VulkanStream* vkStream,
    VkSubpassBeginInfoKHR* forUnmarshaling);

void marshal_vkCmdBeginRenderPass2KHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo);

void unmarshal_vkCmdBeginRenderPass2KHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo);

void marshal_VkSubpassEndInfoKHR(
    VulkanStream* vkStream,
    const VkSubpassEndInfoKHR* forMarshaling);

void unmarshal_VkSubpassEndInfoKHR(
    VulkanStream* vkStream,
    VkSubpassEndInfoKHR* forUnmarshaling);

void marshal_vkCmdNextSubpass2KHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo,
    const VkSubpassEndInfoKHR* pSubpassEndInfo);

void unmarshal_vkCmdNextSubpass2KHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo,
    const VkSubpassEndInfoKHR* pSubpassEndInfo);

void marshal_vkCmdEndRenderPass2KHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfoKHR* pSubpassEndInfo);

void unmarshal_vkCmdEndRenderPass2KHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfoKHR* pSubpassEndInfo);

#endif
#ifdef VK_KHR_shared_presentable_image
void marshal_VkSharedPresentSurfaceCapabilitiesKHR(
    VulkanStream* vkStream,
    const VkSharedPresentSurfaceCapabilitiesKHR* forMarshaling);

void unmarshal_VkSharedPresentSurfaceCapabilitiesKHR(
    VulkanStream* vkStream,
    VkSharedPresentSurfaceCapabilitiesKHR* forUnmarshaling);

VkResult marshal_vkGetSwapchainStatusKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain);

VkResult unmarshal_vkGetSwapchainStatusKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain);

#endif
#ifdef VK_KHR_external_fence_capabilities
void marshal_vkGetPhysicalDeviceExternalFencePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties);

void unmarshal_vkGetPhysicalDeviceExternalFencePropertiesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties);

#endif
#ifdef VK_KHR_external_fence
#endif
#ifdef VK_KHR_external_fence_win32
void marshal_VkImportFenceWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkImportFenceWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkImportFenceWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkImportFenceWin32HandleInfoKHR* forUnmarshaling);

void marshal_VkExportFenceWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkExportFenceWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkExportFenceWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkExportFenceWin32HandleInfoKHR* forUnmarshaling);

void marshal_VkFenceGetWin32HandleInfoKHR(
    VulkanStream* vkStream,
    const VkFenceGetWin32HandleInfoKHR* forMarshaling);

void unmarshal_VkFenceGetWin32HandleInfoKHR(
    VulkanStream* vkStream,
    VkFenceGetWin32HandleInfoKHR* forUnmarshaling);

VkResult marshal_vkImportFenceWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);

VkResult unmarshal_vkImportFenceWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo);

VkResult marshal_vkGetFenceWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle);

VkResult unmarshal_vkGetFenceWin32HandleKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle);

#endif
#ifdef VK_KHR_external_fence_fd
void marshal_VkImportFenceFdInfoKHR(
    VulkanStream* vkStream,
    const VkImportFenceFdInfoKHR* forMarshaling);

void unmarshal_VkImportFenceFdInfoKHR(
    VulkanStream* vkStream,
    VkImportFenceFdInfoKHR* forUnmarshaling);

void marshal_VkFenceGetFdInfoKHR(
    VulkanStream* vkStream,
    const VkFenceGetFdInfoKHR* forMarshaling);

void unmarshal_VkFenceGetFdInfoKHR(
    VulkanStream* vkStream,
    VkFenceGetFdInfoKHR* forUnmarshaling);

VkResult marshal_vkImportFenceFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportFenceFdInfoKHR* pImportFenceFdInfo);

VkResult unmarshal_vkImportFenceFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImportFenceFdInfoKHR* pImportFenceFdInfo);

VkResult marshal_vkGetFenceFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFenceGetFdInfoKHR* pGetFdInfo,
    int* pFd);

VkResult unmarshal_vkGetFenceFdKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkFenceGetFdInfoKHR* pGetFdInfo,
    int* pFd);

#endif
#ifdef VK_KHR_maintenance2
#endif
#ifdef VK_KHR_get_surface_capabilities2
void marshal_VkPhysicalDeviceSurfaceInfo2KHR(
    VulkanStream* vkStream,
    const VkPhysicalDeviceSurfaceInfo2KHR* forMarshaling);

void unmarshal_VkPhysicalDeviceSurfaceInfo2KHR(
    VulkanStream* vkStream,
    VkPhysicalDeviceSurfaceInfo2KHR* forUnmarshaling);

void marshal_VkSurfaceCapabilities2KHR(
    VulkanStream* vkStream,
    const VkSurfaceCapabilities2KHR* forMarshaling);

void unmarshal_VkSurfaceCapabilities2KHR(
    VulkanStream* vkStream,
    VkSurfaceCapabilities2KHR* forUnmarshaling);

void marshal_VkSurfaceFormat2KHR(
    VulkanStream* vkStream,
    const VkSurfaceFormat2KHR* forMarshaling);

void unmarshal_VkSurfaceFormat2KHR(
    VulkanStream* vkStream,
    VkSurfaceFormat2KHR* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities);

VkResult unmarshal_vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities);

VkResult marshal_vkGetPhysicalDeviceSurfaceFormats2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats);

VkResult unmarshal_vkGetPhysicalDeviceSurfaceFormats2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats);

#endif
#ifdef VK_KHR_variable_pointers
#endif
#ifdef VK_KHR_get_display_properties2
void marshal_VkDisplayProperties2KHR(
    VulkanStream* vkStream,
    const VkDisplayProperties2KHR* forMarshaling);

void unmarshal_VkDisplayProperties2KHR(
    VulkanStream* vkStream,
    VkDisplayProperties2KHR* forUnmarshaling);

void marshal_VkDisplayPlaneProperties2KHR(
    VulkanStream* vkStream,
    const VkDisplayPlaneProperties2KHR* forMarshaling);

void unmarshal_VkDisplayPlaneProperties2KHR(
    VulkanStream* vkStream,
    VkDisplayPlaneProperties2KHR* forUnmarshaling);

void marshal_VkDisplayModeProperties2KHR(
    VulkanStream* vkStream,
    const VkDisplayModeProperties2KHR* forMarshaling);

void unmarshal_VkDisplayModeProperties2KHR(
    VulkanStream* vkStream,
    VkDisplayModeProperties2KHR* forUnmarshaling);

void marshal_VkDisplayPlaneInfo2KHR(
    VulkanStream* vkStream,
    const VkDisplayPlaneInfo2KHR* forMarshaling);

void unmarshal_VkDisplayPlaneInfo2KHR(
    VulkanStream* vkStream,
    VkDisplayPlaneInfo2KHR* forUnmarshaling);

void marshal_VkDisplayPlaneCapabilities2KHR(
    VulkanStream* vkStream,
    const VkDisplayPlaneCapabilities2KHR* forMarshaling);

void unmarshal_VkDisplayPlaneCapabilities2KHR(
    VulkanStream* vkStream,
    VkDisplayPlaneCapabilities2KHR* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceDisplayProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayProperties2KHR* pProperties);

VkResult unmarshal_vkGetPhysicalDeviceDisplayProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayProperties2KHR* pProperties);

VkResult marshal_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties);

VkResult unmarshal_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties);

VkResult marshal_vkGetDisplayModeProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties);

VkResult unmarshal_vkGetDisplayModeProperties2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties);

VkResult marshal_vkGetDisplayPlaneCapabilities2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities);

VkResult unmarshal_vkGetDisplayPlaneCapabilities2KHR(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities);

#endif
#ifdef VK_KHR_dedicated_allocation
#endif
#ifdef VK_KHR_storage_buffer_storage_class
#endif
#ifdef VK_KHR_relaxed_block_layout
#endif
#ifdef VK_KHR_get_memory_requirements2
void marshal_vkGetImageMemoryRequirements2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void unmarshal_vkGetImageMemoryRequirements2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void marshal_vkGetBufferMemoryRequirements2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void unmarshal_vkGetBufferMemoryRequirements2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements);

void marshal_vkGetImageSparseMemoryRequirements2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

void unmarshal_vkGetImageSparseMemoryRequirements2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements);

#endif
#ifdef VK_KHR_image_format_list
void marshal_VkImageFormatListCreateInfoKHR(
    VulkanStream* vkStream,
    const VkImageFormatListCreateInfoKHR* forMarshaling);

void unmarshal_VkImageFormatListCreateInfoKHR(
    VulkanStream* vkStream,
    VkImageFormatListCreateInfoKHR* forUnmarshaling);

#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
VkResult marshal_vkCreateSamplerYcbcrConversionKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion);

VkResult unmarshal_vkCreateSamplerYcbcrConversionKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion);

void marshal_vkDestroySamplerYcbcrConversionKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroySamplerYcbcrConversionKHR(
    VulkanStream* vkStream,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator);

#endif
#ifdef VK_KHR_bind_memory2
VkResult marshal_vkBindBufferMemory2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos);

VkResult unmarshal_vkBindBufferMemory2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos);

VkResult marshal_vkBindImageMemory2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos);

VkResult unmarshal_vkBindImageMemory2KHR(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos);

#endif
#ifdef VK_KHR_maintenance3
void marshal_vkGetDescriptorSetLayoutSupportKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport);

void unmarshal_vkGetDescriptorSetLayoutSupportKHR(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport);

#endif
#ifdef VK_KHR_draw_indirect_count
void marshal_vkCmdDrawIndirectCountKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

void unmarshal_vkCmdDrawIndirectCountKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

void marshal_vkCmdDrawIndexedIndirectCountKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

void unmarshal_vkCmdDrawIndexedIndirectCountKHR(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

#endif
#ifdef VK_KHR_8bit_storage
void marshal_VkPhysicalDevice8BitStorageFeaturesKHR(
    VulkanStream* vkStream,
    const VkPhysicalDevice8BitStorageFeaturesKHR* forMarshaling);

void unmarshal_VkPhysicalDevice8BitStorageFeaturesKHR(
    VulkanStream* vkStream,
    VkPhysicalDevice8BitStorageFeaturesKHR* forUnmarshaling);

#endif
#ifdef VK_EXT_debug_report
void marshal_VkDebugReportCallbackCreateInfoEXT(
    VulkanStream* vkStream,
    const VkDebugReportCallbackCreateInfoEXT* forMarshaling);

void unmarshal_VkDebugReportCallbackCreateInfoEXT(
    VulkanStream* vkStream,
    VkDebugReportCallbackCreateInfoEXT* forUnmarshaling);

VkResult marshal_vkCreateDebugReportCallbackEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugReportCallbackEXT* pCallback);

VkResult unmarshal_vkCreateDebugReportCallbackEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugReportCallbackEXT* pCallback);

void marshal_vkDestroyDebugReportCallbackEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyDebugReportCallbackEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks* pAllocator);

void marshal_vkDebugReportMessageEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    uint64_t object,
    size_t location,
    int32_t messageCode,
    const char* pLayerPrefix,
    const char* pMessage);

void unmarshal_vkDebugReportMessageEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    uint64_t object,
    size_t location,
    int32_t messageCode,
    const char* pLayerPrefix,
    const char* pMessage);

#endif
#ifdef VK_NV_glsl_shader
#endif
#ifdef VK_EXT_depth_range_unrestricted
#endif
#ifdef VK_IMG_filter_cubic
#endif
#ifdef VK_AMD_rasterization_order
void marshal_VkPipelineRasterizationStateRasterizationOrderAMD(
    VulkanStream* vkStream,
    const VkPipelineRasterizationStateRasterizationOrderAMD* forMarshaling);

void unmarshal_VkPipelineRasterizationStateRasterizationOrderAMD(
    VulkanStream* vkStream,
    VkPipelineRasterizationStateRasterizationOrderAMD* forUnmarshaling);

#endif
#ifdef VK_AMD_shader_trinary_minmax
#endif
#ifdef VK_AMD_shader_explicit_vertex_parameter
#endif
#ifdef VK_EXT_debug_marker
void marshal_VkDebugMarkerObjectNameInfoEXT(
    VulkanStream* vkStream,
    const VkDebugMarkerObjectNameInfoEXT* forMarshaling);

void unmarshal_VkDebugMarkerObjectNameInfoEXT(
    VulkanStream* vkStream,
    VkDebugMarkerObjectNameInfoEXT* forUnmarshaling);

void marshal_VkDebugMarkerObjectTagInfoEXT(
    VulkanStream* vkStream,
    const VkDebugMarkerObjectTagInfoEXT* forMarshaling);

void unmarshal_VkDebugMarkerObjectTagInfoEXT(
    VulkanStream* vkStream,
    VkDebugMarkerObjectTagInfoEXT* forUnmarshaling);

void marshal_VkDebugMarkerMarkerInfoEXT(
    VulkanStream* vkStream,
    const VkDebugMarkerMarkerInfoEXT* forMarshaling);

void unmarshal_VkDebugMarkerMarkerInfoEXT(
    VulkanStream* vkStream,
    VkDebugMarkerMarkerInfoEXT* forUnmarshaling);

VkResult marshal_vkDebugMarkerSetObjectTagEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugMarkerObjectTagInfoEXT* pTagInfo);

VkResult unmarshal_vkDebugMarkerSetObjectTagEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugMarkerObjectTagInfoEXT* pTagInfo);

VkResult marshal_vkDebugMarkerSetObjectNameEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugMarkerObjectNameInfoEXT* pNameInfo);

VkResult unmarshal_vkDebugMarkerSetObjectNameEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugMarkerObjectNameInfoEXT* pNameInfo);

void marshal_vkCmdDebugMarkerBeginEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

void unmarshal_vkCmdDebugMarkerBeginEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

void marshal_vkCmdDebugMarkerEndEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

void unmarshal_vkCmdDebugMarkerEndEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

void marshal_vkCmdDebugMarkerInsertEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

void unmarshal_vkCmdDebugMarkerInsertEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo);

#endif
#ifdef VK_AMD_gcn_shader
#endif
#ifdef VK_NV_dedicated_allocation
void marshal_VkDedicatedAllocationImageCreateInfoNV(
    VulkanStream* vkStream,
    const VkDedicatedAllocationImageCreateInfoNV* forMarshaling);

void unmarshal_VkDedicatedAllocationImageCreateInfoNV(
    VulkanStream* vkStream,
    VkDedicatedAllocationImageCreateInfoNV* forUnmarshaling);

void marshal_VkDedicatedAllocationBufferCreateInfoNV(
    VulkanStream* vkStream,
    const VkDedicatedAllocationBufferCreateInfoNV* forMarshaling);

void unmarshal_VkDedicatedAllocationBufferCreateInfoNV(
    VulkanStream* vkStream,
    VkDedicatedAllocationBufferCreateInfoNV* forUnmarshaling);

void marshal_VkDedicatedAllocationMemoryAllocateInfoNV(
    VulkanStream* vkStream,
    const VkDedicatedAllocationMemoryAllocateInfoNV* forMarshaling);

void unmarshal_VkDedicatedAllocationMemoryAllocateInfoNV(
    VulkanStream* vkStream,
    VkDedicatedAllocationMemoryAllocateInfoNV* forUnmarshaling);

#endif
#ifdef VK_AMD_draw_indirect_count
void marshal_vkCmdDrawIndirectCountAMD(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

void unmarshal_vkCmdDrawIndirectCountAMD(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

void marshal_vkCmdDrawIndexedIndirectCountAMD(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

void unmarshal_vkCmdDrawIndexedIndirectCountAMD(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride);

#endif
#ifdef VK_AMD_negative_viewport_height
#endif
#ifdef VK_AMD_gpu_shader_half_float
#endif
#ifdef VK_AMD_shader_ballot
#endif
#ifdef VK_AMD_texture_gather_bias_lod
void marshal_VkTextureLODGatherFormatPropertiesAMD(
    VulkanStream* vkStream,
    const VkTextureLODGatherFormatPropertiesAMD* forMarshaling);

void unmarshal_VkTextureLODGatherFormatPropertiesAMD(
    VulkanStream* vkStream,
    VkTextureLODGatherFormatPropertiesAMD* forUnmarshaling);

#endif
#ifdef VK_AMD_shader_info
void marshal_VkShaderResourceUsageAMD(
    VulkanStream* vkStream,
    const VkShaderResourceUsageAMD* forMarshaling);

void unmarshal_VkShaderResourceUsageAMD(
    VulkanStream* vkStream,
    VkShaderResourceUsageAMD* forUnmarshaling);

void marshal_VkShaderStatisticsInfoAMD(
    VulkanStream* vkStream,
    const VkShaderStatisticsInfoAMD* forMarshaling);

void unmarshal_VkShaderStatisticsInfoAMD(
    VulkanStream* vkStream,
    VkShaderStatisticsInfoAMD* forUnmarshaling);

VkResult marshal_vkGetShaderInfoAMD(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo);

VkResult unmarshal_vkGetShaderInfoAMD(
    VulkanStream* vkStream,
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo);

#endif
#ifdef VK_AMD_shader_image_load_store_lod
#endif
#ifdef VK_IMG_format_pvrtc
#endif
#ifdef VK_NV_external_memory_capabilities
void marshal_VkExternalImageFormatPropertiesNV(
    VulkanStream* vkStream,
    const VkExternalImageFormatPropertiesNV* forMarshaling);

void unmarshal_VkExternalImageFormatPropertiesNV(
    VulkanStream* vkStream,
    VkExternalImageFormatPropertiesNV* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);

VkResult unmarshal_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties);

#endif
#ifdef VK_NV_external_memory
void marshal_VkExternalMemoryImageCreateInfoNV(
    VulkanStream* vkStream,
    const VkExternalMemoryImageCreateInfoNV* forMarshaling);

void unmarshal_VkExternalMemoryImageCreateInfoNV(
    VulkanStream* vkStream,
    VkExternalMemoryImageCreateInfoNV* forUnmarshaling);

void marshal_VkExportMemoryAllocateInfoNV(
    VulkanStream* vkStream,
    const VkExportMemoryAllocateInfoNV* forMarshaling);

void unmarshal_VkExportMemoryAllocateInfoNV(
    VulkanStream* vkStream,
    VkExportMemoryAllocateInfoNV* forUnmarshaling);

#endif
#ifdef VK_NV_external_memory_win32
void marshal_VkImportMemoryWin32HandleInfoNV(
    VulkanStream* vkStream,
    const VkImportMemoryWin32HandleInfoNV* forMarshaling);

void unmarshal_VkImportMemoryWin32HandleInfoNV(
    VulkanStream* vkStream,
    VkImportMemoryWin32HandleInfoNV* forUnmarshaling);

void marshal_VkExportMemoryWin32HandleInfoNV(
    VulkanStream* vkStream,
    const VkExportMemoryWin32HandleInfoNV* forMarshaling);

void unmarshal_VkExportMemoryWin32HandleInfoNV(
    VulkanStream* vkStream,
    VkExportMemoryWin32HandleInfoNV* forUnmarshaling);

VkResult marshal_vkGetMemoryWin32HandleNV(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkExternalMemoryHandleTypeFlagsNV handleType,
    HANDLE* pHandle);

VkResult unmarshal_vkGetMemoryWin32HandleNV(
    VulkanStream* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkExternalMemoryHandleTypeFlagsNV handleType,
    HANDLE* pHandle);

#endif
#ifdef VK_NV_win32_keyed_mutex
void marshal_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VulkanStream* vkStream,
    const VkWin32KeyedMutexAcquireReleaseInfoNV* forMarshaling);

void unmarshal_VkWin32KeyedMutexAcquireReleaseInfoNV(
    VulkanStream* vkStream,
    VkWin32KeyedMutexAcquireReleaseInfoNV* forUnmarshaling);

#endif
#ifdef VK_EXT_validation_flags
void marshal_VkValidationFlagsEXT(
    VulkanStream* vkStream,
    const VkValidationFlagsEXT* forMarshaling);

void unmarshal_VkValidationFlagsEXT(
    VulkanStream* vkStream,
    VkValidationFlagsEXT* forUnmarshaling);

#endif
#ifdef VK_NN_vi_surface
void marshal_VkViSurfaceCreateInfoNN(
    VulkanStream* vkStream,
    const VkViSurfaceCreateInfoNN* forMarshaling);

void unmarshal_VkViSurfaceCreateInfoNN(
    VulkanStream* vkStream,
    VkViSurfaceCreateInfoNN* forUnmarshaling);

VkResult marshal_vkCreateViSurfaceNN(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkViSurfaceCreateInfoNN* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateViSurfaceNN(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkViSurfaceCreateInfoNN* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

#endif
#ifdef VK_EXT_shader_subgroup_ballot
#endif
#ifdef VK_EXT_shader_subgroup_vote
#endif
#ifdef VK_EXT_conditional_rendering
void marshal_VkConditionalRenderingBeginInfoEXT(
    VulkanStream* vkStream,
    const VkConditionalRenderingBeginInfoEXT* forMarshaling);

void unmarshal_VkConditionalRenderingBeginInfoEXT(
    VulkanStream* vkStream,
    VkConditionalRenderingBeginInfoEXT* forUnmarshaling);

void marshal_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceConditionalRenderingFeaturesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceConditionalRenderingFeaturesEXT* forUnmarshaling);

void marshal_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VulkanStream* vkStream,
    const VkCommandBufferInheritanceConditionalRenderingInfoEXT* forMarshaling);

void unmarshal_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    VulkanStream* vkStream,
    VkCommandBufferInheritanceConditionalRenderingInfoEXT* forUnmarshaling);

void marshal_vkCmdBeginConditionalRenderingEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);

void unmarshal_vkCmdBeginConditionalRenderingEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin);

void marshal_vkCmdEndConditionalRenderingEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

void unmarshal_vkCmdEndConditionalRenderingEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

#endif
#ifdef VK_NVX_device_generated_commands
void marshal_VkDeviceGeneratedCommandsFeaturesNVX(
    VulkanStream* vkStream,
    const VkDeviceGeneratedCommandsFeaturesNVX* forMarshaling);

void unmarshal_VkDeviceGeneratedCommandsFeaturesNVX(
    VulkanStream* vkStream,
    VkDeviceGeneratedCommandsFeaturesNVX* forUnmarshaling);

void marshal_VkDeviceGeneratedCommandsLimitsNVX(
    VulkanStream* vkStream,
    const VkDeviceGeneratedCommandsLimitsNVX* forMarshaling);

void unmarshal_VkDeviceGeneratedCommandsLimitsNVX(
    VulkanStream* vkStream,
    VkDeviceGeneratedCommandsLimitsNVX* forUnmarshaling);

void marshal_VkIndirectCommandsTokenNVX(
    VulkanStream* vkStream,
    const VkIndirectCommandsTokenNVX* forMarshaling);

void unmarshal_VkIndirectCommandsTokenNVX(
    VulkanStream* vkStream,
    VkIndirectCommandsTokenNVX* forUnmarshaling);

void marshal_VkIndirectCommandsLayoutTokenNVX(
    VulkanStream* vkStream,
    const VkIndirectCommandsLayoutTokenNVX* forMarshaling);

void unmarshal_VkIndirectCommandsLayoutTokenNVX(
    VulkanStream* vkStream,
    VkIndirectCommandsLayoutTokenNVX* forUnmarshaling);

void marshal_VkIndirectCommandsLayoutCreateInfoNVX(
    VulkanStream* vkStream,
    const VkIndirectCommandsLayoutCreateInfoNVX* forMarshaling);

void unmarshal_VkIndirectCommandsLayoutCreateInfoNVX(
    VulkanStream* vkStream,
    VkIndirectCommandsLayoutCreateInfoNVX* forUnmarshaling);

void marshal_VkCmdProcessCommandsInfoNVX(
    VulkanStream* vkStream,
    const VkCmdProcessCommandsInfoNVX* forMarshaling);

void unmarshal_VkCmdProcessCommandsInfoNVX(
    VulkanStream* vkStream,
    VkCmdProcessCommandsInfoNVX* forUnmarshaling);

void marshal_VkCmdReserveSpaceForCommandsInfoNVX(
    VulkanStream* vkStream,
    const VkCmdReserveSpaceForCommandsInfoNVX* forMarshaling);

void unmarshal_VkCmdReserveSpaceForCommandsInfoNVX(
    VulkanStream* vkStream,
    VkCmdReserveSpaceForCommandsInfoNVX* forUnmarshaling);

void marshal_VkObjectTableCreateInfoNVX(
    VulkanStream* vkStream,
    const VkObjectTableCreateInfoNVX* forMarshaling);

void unmarshal_VkObjectTableCreateInfoNVX(
    VulkanStream* vkStream,
    VkObjectTableCreateInfoNVX* forUnmarshaling);

void marshal_VkObjectTableEntryNVX(
    VulkanStream* vkStream,
    const VkObjectTableEntryNVX* forMarshaling);

void unmarshal_VkObjectTableEntryNVX(
    VulkanStream* vkStream,
    VkObjectTableEntryNVX* forUnmarshaling);

void marshal_VkObjectTablePipelineEntryNVX(
    VulkanStream* vkStream,
    const VkObjectTablePipelineEntryNVX* forMarshaling);

void unmarshal_VkObjectTablePipelineEntryNVX(
    VulkanStream* vkStream,
    VkObjectTablePipelineEntryNVX* forUnmarshaling);

void marshal_VkObjectTableDescriptorSetEntryNVX(
    VulkanStream* vkStream,
    const VkObjectTableDescriptorSetEntryNVX* forMarshaling);

void unmarshal_VkObjectTableDescriptorSetEntryNVX(
    VulkanStream* vkStream,
    VkObjectTableDescriptorSetEntryNVX* forUnmarshaling);

void marshal_VkObjectTableVertexBufferEntryNVX(
    VulkanStream* vkStream,
    const VkObjectTableVertexBufferEntryNVX* forMarshaling);

void unmarshal_VkObjectTableVertexBufferEntryNVX(
    VulkanStream* vkStream,
    VkObjectTableVertexBufferEntryNVX* forUnmarshaling);

void marshal_VkObjectTableIndexBufferEntryNVX(
    VulkanStream* vkStream,
    const VkObjectTableIndexBufferEntryNVX* forMarshaling);

void unmarshal_VkObjectTableIndexBufferEntryNVX(
    VulkanStream* vkStream,
    VkObjectTableIndexBufferEntryNVX* forUnmarshaling);

void marshal_VkObjectTablePushConstantEntryNVX(
    VulkanStream* vkStream,
    const VkObjectTablePushConstantEntryNVX* forMarshaling);

void unmarshal_VkObjectTablePushConstantEntryNVX(
    VulkanStream* vkStream,
    VkObjectTablePushConstantEntryNVX* forUnmarshaling);

void marshal_vkCmdProcessCommandsNVX(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo);

void unmarshal_vkCmdProcessCommandsNVX(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo);

void marshal_vkCmdReserveSpaceForCommandsNVX(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo);

void unmarshal_vkCmdReserveSpaceForCommandsNVX(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo);

VkResult marshal_vkCreateIndirectCommandsLayoutNVX(
    VulkanStream* vkStream,
    VkDevice device,
    const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout);

VkResult unmarshal_vkCreateIndirectCommandsLayoutNVX(
    VulkanStream* vkStream,
    VkDevice device,
    const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout);

void marshal_vkDestroyIndirectCommandsLayoutNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkIndirectCommandsLayoutNVX indirectCommandsLayout,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyIndirectCommandsLayoutNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkIndirectCommandsLayoutNVX indirectCommandsLayout,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkCreateObjectTableNVX(
    VulkanStream* vkStream,
    VkDevice device,
    const VkObjectTableCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkObjectTableNVX* pObjectTable);

VkResult unmarshal_vkCreateObjectTableNVX(
    VulkanStream* vkStream,
    VkDevice device,
    const VkObjectTableCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkObjectTableNVX* pObjectTable);

void marshal_vkDestroyObjectTableNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyObjectTableNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkRegisterObjectsNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectTableEntryNVX* const* ppObjectTableEntries,
    const uint32_t* pObjectIndices);

VkResult unmarshal_vkRegisterObjectsNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectTableEntryNVX* const* ppObjectTableEntries,
    const uint32_t* pObjectIndices);

VkResult marshal_vkUnregisterObjectsNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectEntryTypeNVX* pObjectEntryTypes,
    const uint32_t* pObjectIndices);

VkResult unmarshal_vkUnregisterObjectsNVX(
    VulkanStream* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectEntryTypeNVX* pObjectEntryTypes,
    const uint32_t* pObjectIndices);

void marshal_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDeviceGeneratedCommandsFeaturesNVX* pFeatures,
    VkDeviceGeneratedCommandsLimitsNVX* pLimits);

void unmarshal_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDeviceGeneratedCommandsFeaturesNVX* pFeatures,
    VkDeviceGeneratedCommandsLimitsNVX* pLimits);

#endif
#ifdef VK_NV_clip_space_w_scaling
void marshal_VkViewportWScalingNV(
    VulkanStream* vkStream,
    const VkViewportWScalingNV* forMarshaling);

void unmarshal_VkViewportWScalingNV(
    VulkanStream* vkStream,
    VkViewportWScalingNV* forUnmarshaling);

void marshal_VkPipelineViewportWScalingStateCreateInfoNV(
    VulkanStream* vkStream,
    const VkPipelineViewportWScalingStateCreateInfoNV* forMarshaling);

void unmarshal_VkPipelineViewportWScalingStateCreateInfoNV(
    VulkanStream* vkStream,
    VkPipelineViewportWScalingStateCreateInfoNV* forUnmarshaling);

void marshal_vkCmdSetViewportWScalingNV(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewportWScalingNV* pViewportWScalings);

void unmarshal_vkCmdSetViewportWScalingNV(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewportWScalingNV* pViewportWScalings);

#endif
#ifdef VK_EXT_direct_mode_display
VkResult marshal_vkReleaseDisplayEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display);

VkResult unmarshal_vkReleaseDisplayEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display);

#endif
#ifdef VK_EXT_acquire_xlib_display
VkResult marshal_vkAcquireXlibDisplayEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    VkDisplayKHR display);

VkResult unmarshal_vkAcquireXlibDisplayEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    VkDisplayKHR display);

VkResult marshal_vkGetRandROutputDisplayEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    RROutput rrOutput,
    VkDisplayKHR* pDisplay);

VkResult unmarshal_vkGetRandROutputDisplayEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    RROutput rrOutput,
    VkDisplayKHR* pDisplay);

#endif
#ifdef VK_EXT_display_surface_counter
void marshal_VkSurfaceCapabilities2EXT(
    VulkanStream* vkStream,
    const VkSurfaceCapabilities2EXT* forMarshaling);

void unmarshal_VkSurfaceCapabilities2EXT(
    VulkanStream* vkStream,
    VkSurfaceCapabilities2EXT* forUnmarshaling);

VkResult marshal_vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities);

VkResult unmarshal_vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities);

#endif
#ifdef VK_EXT_display_control
void marshal_VkDisplayPowerInfoEXT(
    VulkanStream* vkStream,
    const VkDisplayPowerInfoEXT* forMarshaling);

void unmarshal_VkDisplayPowerInfoEXT(
    VulkanStream* vkStream,
    VkDisplayPowerInfoEXT* forUnmarshaling);

void marshal_VkDeviceEventInfoEXT(
    VulkanStream* vkStream,
    const VkDeviceEventInfoEXT* forMarshaling);

void unmarshal_VkDeviceEventInfoEXT(
    VulkanStream* vkStream,
    VkDeviceEventInfoEXT* forUnmarshaling);

void marshal_VkDisplayEventInfoEXT(
    VulkanStream* vkStream,
    const VkDisplayEventInfoEXT* forMarshaling);

void unmarshal_VkDisplayEventInfoEXT(
    VulkanStream* vkStream,
    VkDisplayEventInfoEXT* forUnmarshaling);

void marshal_VkSwapchainCounterCreateInfoEXT(
    VulkanStream* vkStream,
    const VkSwapchainCounterCreateInfoEXT* forMarshaling);

void unmarshal_VkSwapchainCounterCreateInfoEXT(
    VulkanStream* vkStream,
    VkSwapchainCounterCreateInfoEXT* forUnmarshaling);

VkResult marshal_vkDisplayPowerControlEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayPowerInfoEXT* pDisplayPowerInfo);

VkResult unmarshal_vkDisplayPowerControlEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayPowerInfoEXT* pDisplayPowerInfo);

VkResult marshal_vkRegisterDeviceEventEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDeviceEventInfoEXT* pDeviceEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence);

VkResult unmarshal_vkRegisterDeviceEventEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDeviceEventInfoEXT* pDeviceEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence);

VkResult marshal_vkRegisterDisplayEventEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayEventInfoEXT* pDisplayEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence);

VkResult unmarshal_vkRegisterDisplayEventEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayEventInfoEXT* pDisplayEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence);

VkResult marshal_vkGetSwapchainCounterEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    uint64_t* pCounterValue);

VkResult unmarshal_vkGetSwapchainCounterEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    uint64_t* pCounterValue);

#endif
#ifdef VK_GOOGLE_display_timing
void marshal_VkRefreshCycleDurationGOOGLE(
    VulkanStream* vkStream,
    const VkRefreshCycleDurationGOOGLE* forMarshaling);

void unmarshal_VkRefreshCycleDurationGOOGLE(
    VulkanStream* vkStream,
    VkRefreshCycleDurationGOOGLE* forUnmarshaling);

void marshal_VkPastPresentationTimingGOOGLE(
    VulkanStream* vkStream,
    const VkPastPresentationTimingGOOGLE* forMarshaling);

void unmarshal_VkPastPresentationTimingGOOGLE(
    VulkanStream* vkStream,
    VkPastPresentationTimingGOOGLE* forUnmarshaling);

void marshal_VkPresentTimeGOOGLE(
    VulkanStream* vkStream,
    const VkPresentTimeGOOGLE* forMarshaling);

void unmarshal_VkPresentTimeGOOGLE(
    VulkanStream* vkStream,
    VkPresentTimeGOOGLE* forUnmarshaling);

void marshal_VkPresentTimesInfoGOOGLE(
    VulkanStream* vkStream,
    const VkPresentTimesInfoGOOGLE* forMarshaling);

void unmarshal_VkPresentTimesInfoGOOGLE(
    VulkanStream* vkStream,
    VkPresentTimesInfoGOOGLE* forUnmarshaling);

VkResult marshal_vkGetRefreshCycleDurationGOOGLE(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);

VkResult unmarshal_vkGetRefreshCycleDurationGOOGLE(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties);

VkResult marshal_vkGetPastPresentationTimingGOOGLE(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings);

VkResult unmarshal_vkGetPastPresentationTimingGOOGLE(
    VulkanStream* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings);

#endif
#ifdef VK_NV_sample_mask_override_coverage
#endif
#ifdef VK_NV_geometry_shader_passthrough
#endif
#ifdef VK_NV_viewport_array2
#endif
#ifdef VK_NVX_multiview_per_view_attributes
void marshal_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VulkanStream* vkStream,
    const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* forMarshaling);

void unmarshal_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    VulkanStream* vkStream,
    VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* forUnmarshaling);

#endif
#ifdef VK_NV_viewport_swizzle
void marshal_VkViewportSwizzleNV(
    VulkanStream* vkStream,
    const VkViewportSwizzleNV* forMarshaling);

void unmarshal_VkViewportSwizzleNV(
    VulkanStream* vkStream,
    VkViewportSwizzleNV* forUnmarshaling);

void marshal_VkPipelineViewportSwizzleStateCreateInfoNV(
    VulkanStream* vkStream,
    const VkPipelineViewportSwizzleStateCreateInfoNV* forMarshaling);

void unmarshal_VkPipelineViewportSwizzleStateCreateInfoNV(
    VulkanStream* vkStream,
    VkPipelineViewportSwizzleStateCreateInfoNV* forUnmarshaling);

#endif
#ifdef VK_EXT_discard_rectangles
void marshal_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceDiscardRectanglePropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceDiscardRectanglePropertiesEXT* forUnmarshaling);

void marshal_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VulkanStream* vkStream,
    const VkPipelineDiscardRectangleStateCreateInfoEXT* forMarshaling);

void unmarshal_VkPipelineDiscardRectangleStateCreateInfoEXT(
    VulkanStream* vkStream,
    VkPipelineDiscardRectangleStateCreateInfoEXT* forUnmarshaling);

void marshal_vkCmdSetDiscardRectangleEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstDiscardRectangle,
    uint32_t discardRectangleCount,
    const VkRect2D* pDiscardRectangles);

void unmarshal_vkCmdSetDiscardRectangleEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstDiscardRectangle,
    uint32_t discardRectangleCount,
    const VkRect2D* pDiscardRectangles);

#endif
#ifdef VK_EXT_conservative_rasterization
void marshal_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceConservativeRasterizationPropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceConservativeRasterizationPropertiesEXT* forUnmarshaling);

void marshal_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VulkanStream* vkStream,
    const VkPipelineRasterizationConservativeStateCreateInfoEXT* forMarshaling);

void unmarshal_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    VulkanStream* vkStream,
    VkPipelineRasterizationConservativeStateCreateInfoEXT* forUnmarshaling);

#endif
#ifdef VK_EXT_swapchain_colorspace
#endif
#ifdef VK_EXT_hdr_metadata
void marshal_VkXYColorEXT(
    VulkanStream* vkStream,
    const VkXYColorEXT* forMarshaling);

void unmarshal_VkXYColorEXT(
    VulkanStream* vkStream,
    VkXYColorEXT* forUnmarshaling);

void marshal_VkHdrMetadataEXT(
    VulkanStream* vkStream,
    const VkHdrMetadataEXT* forMarshaling);

void unmarshal_VkHdrMetadataEXT(
    VulkanStream* vkStream,
    VkHdrMetadataEXT* forUnmarshaling);

void marshal_vkSetHdrMetadataEXT(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainKHR* pSwapchains,
    const VkHdrMetadataEXT* pMetadata);

void unmarshal_vkSetHdrMetadataEXT(
    VulkanStream* vkStream,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainKHR* pSwapchains,
    const VkHdrMetadataEXT* pMetadata);

#endif
#ifdef VK_MVK_ios_surface
void marshal_VkIOSSurfaceCreateInfoMVK(
    VulkanStream* vkStream,
    const VkIOSSurfaceCreateInfoMVK* forMarshaling);

void unmarshal_VkIOSSurfaceCreateInfoMVK(
    VulkanStream* vkStream,
    VkIOSSurfaceCreateInfoMVK* forUnmarshaling);

VkResult marshal_vkCreateIOSSurfaceMVK(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkIOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateIOSSurfaceMVK(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkIOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

#endif
#ifdef VK_MVK_macos_surface
void marshal_VkMacOSSurfaceCreateInfoMVK(
    VulkanStream* vkStream,
    const VkMacOSSurfaceCreateInfoMVK* forMarshaling);

void unmarshal_VkMacOSSurfaceCreateInfoMVK(
    VulkanStream* vkStream,
    VkMacOSSurfaceCreateInfoMVK* forUnmarshaling);

VkResult marshal_vkCreateMacOSSurfaceMVK(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkMacOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

VkResult unmarshal_vkCreateMacOSSurfaceMVK(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkMacOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface);

#endif
#ifdef VK_EXT_external_memory_dma_buf
#endif
#ifdef VK_EXT_queue_family_foreign
#endif
#ifdef VK_EXT_debug_utils
void marshal_VkDebugUtilsObjectNameInfoEXT(
    VulkanStream* vkStream,
    const VkDebugUtilsObjectNameInfoEXT* forMarshaling);

void unmarshal_VkDebugUtilsObjectNameInfoEXT(
    VulkanStream* vkStream,
    VkDebugUtilsObjectNameInfoEXT* forUnmarshaling);

void marshal_VkDebugUtilsObjectTagInfoEXT(
    VulkanStream* vkStream,
    const VkDebugUtilsObjectTagInfoEXT* forMarshaling);

void unmarshal_VkDebugUtilsObjectTagInfoEXT(
    VulkanStream* vkStream,
    VkDebugUtilsObjectTagInfoEXT* forUnmarshaling);

void marshal_VkDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    const VkDebugUtilsLabelEXT* forMarshaling);

void unmarshal_VkDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkDebugUtilsLabelEXT* forUnmarshaling);

void marshal_VkDebugUtilsMessengerCallbackDataEXT(
    VulkanStream* vkStream,
    const VkDebugUtilsMessengerCallbackDataEXT* forMarshaling);

void unmarshal_VkDebugUtilsMessengerCallbackDataEXT(
    VulkanStream* vkStream,
    VkDebugUtilsMessengerCallbackDataEXT* forUnmarshaling);

void marshal_VkDebugUtilsMessengerCreateInfoEXT(
    VulkanStream* vkStream,
    const VkDebugUtilsMessengerCreateInfoEXT* forMarshaling);

void unmarshal_VkDebugUtilsMessengerCreateInfoEXT(
    VulkanStream* vkStream,
    VkDebugUtilsMessengerCreateInfoEXT* forUnmarshaling);

VkResult marshal_vkSetDebugUtilsObjectNameEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugUtilsObjectNameInfoEXT* pNameInfo);

VkResult unmarshal_vkSetDebugUtilsObjectNameEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugUtilsObjectNameInfoEXT* pNameInfo);

VkResult marshal_vkSetDebugUtilsObjectTagEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugUtilsObjectTagInfoEXT* pTagInfo);

VkResult unmarshal_vkSetDebugUtilsObjectTagEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkDebugUtilsObjectTagInfoEXT* pTagInfo);

void marshal_vkQueueBeginDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo);

void unmarshal_vkQueueBeginDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo);

void marshal_vkQueueEndDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkQueue queue);

void unmarshal_vkQueueEndDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkQueue queue);

void marshal_vkQueueInsertDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo);

void unmarshal_vkQueueInsertDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo);

void marshal_vkCmdBeginDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo);

void unmarshal_vkCmdBeginDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo);

void marshal_vkCmdEndDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

void unmarshal_vkCmdEndDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer);

void marshal_vkCmdInsertDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo);

void unmarshal_vkCmdInsertDebugUtilsLabelEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo);

VkResult marshal_vkCreateDebugUtilsMessengerEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger);

VkResult unmarshal_vkCreateDebugUtilsMessengerEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger);

void marshal_vkDestroyDebugUtilsMessengerEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyDebugUtilsMessengerEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks* pAllocator);

void marshal_vkSubmitDebugUtilsMessageEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);

void unmarshal_vkSubmitDebugUtilsMessageEXT(
    VulkanStream* vkStream,
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData);

#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void marshal_VkAndroidHardwareBufferUsageANDROID(
    VulkanStream* vkStream,
    const VkAndroidHardwareBufferUsageANDROID* forMarshaling);

void unmarshal_VkAndroidHardwareBufferUsageANDROID(
    VulkanStream* vkStream,
    VkAndroidHardwareBufferUsageANDROID* forUnmarshaling);

void marshal_VkAndroidHardwareBufferPropertiesANDROID(
    VulkanStream* vkStream,
    const VkAndroidHardwareBufferPropertiesANDROID* forMarshaling);

void unmarshal_VkAndroidHardwareBufferPropertiesANDROID(
    VulkanStream* vkStream,
    VkAndroidHardwareBufferPropertiesANDROID* forUnmarshaling);

void marshal_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VulkanStream* vkStream,
    const VkAndroidHardwareBufferFormatPropertiesANDROID* forMarshaling);

void unmarshal_VkAndroidHardwareBufferFormatPropertiesANDROID(
    VulkanStream* vkStream,
    VkAndroidHardwareBufferFormatPropertiesANDROID* forUnmarshaling);

void marshal_VkImportAndroidHardwareBufferInfoANDROID(
    VulkanStream* vkStream,
    const VkImportAndroidHardwareBufferInfoANDROID* forMarshaling);

void unmarshal_VkImportAndroidHardwareBufferInfoANDROID(
    VulkanStream* vkStream,
    VkImportAndroidHardwareBufferInfoANDROID* forUnmarshaling);

void marshal_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VulkanStream* vkStream,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* forMarshaling);

void unmarshal_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    VulkanStream* vkStream,
    VkMemoryGetAndroidHardwareBufferInfoANDROID* forUnmarshaling);

void marshal_VkExternalFormatANDROID(
    VulkanStream* vkStream,
    const VkExternalFormatANDROID* forMarshaling);

void unmarshal_VkExternalFormatANDROID(
    VulkanStream* vkStream,
    VkExternalFormatANDROID* forUnmarshaling);

VkResult marshal_vkGetAndroidHardwareBufferPropertiesANDROID(
    VulkanStream* vkStream,
    VkDevice device,
    const AHardwareBuffer* buffer,
    VkAndroidHardwareBufferPropertiesANDROID* pProperties);

VkResult unmarshal_vkGetAndroidHardwareBufferPropertiesANDROID(
    VulkanStream* vkStream,
    VkDevice device,
    const AHardwareBuffer* buffer,
    VkAndroidHardwareBufferPropertiesANDROID* pProperties);

VkResult marshal_vkGetMemoryAndroidHardwareBufferANDROID(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    AHardwareBuffer** pBuffer);

VkResult unmarshal_vkGetMemoryAndroidHardwareBufferANDROID(
    VulkanStream* vkStream,
    VkDevice device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    AHardwareBuffer** pBuffer);

#endif
#ifdef VK_EXT_sampler_filter_minmax
void marshal_VkSamplerReductionModeCreateInfoEXT(
    VulkanStream* vkStream,
    const VkSamplerReductionModeCreateInfoEXT* forMarshaling);

void unmarshal_VkSamplerReductionModeCreateInfoEXT(
    VulkanStream* vkStream,
    VkSamplerReductionModeCreateInfoEXT* forUnmarshaling);

void marshal_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* forUnmarshaling);

#endif
#ifdef VK_AMD_gpu_shader_int16
#endif
#ifdef VK_AMD_mixed_attachment_samples
#endif
#ifdef VK_AMD_shader_fragment_mask
#endif
#ifdef VK_EXT_shader_stencil_export
#endif
#ifdef VK_EXT_sample_locations
void marshal_VkSampleLocationEXT(
    VulkanStream* vkStream,
    const VkSampleLocationEXT* forMarshaling);

void unmarshal_VkSampleLocationEXT(
    VulkanStream* vkStream,
    VkSampleLocationEXT* forUnmarshaling);

void marshal_VkSampleLocationsInfoEXT(
    VulkanStream* vkStream,
    const VkSampleLocationsInfoEXT* forMarshaling);

void unmarshal_VkSampleLocationsInfoEXT(
    VulkanStream* vkStream,
    VkSampleLocationsInfoEXT* forUnmarshaling);

void marshal_VkAttachmentSampleLocationsEXT(
    VulkanStream* vkStream,
    const VkAttachmentSampleLocationsEXT* forMarshaling);

void unmarshal_VkAttachmentSampleLocationsEXT(
    VulkanStream* vkStream,
    VkAttachmentSampleLocationsEXT* forUnmarshaling);

void marshal_VkSubpassSampleLocationsEXT(
    VulkanStream* vkStream,
    const VkSubpassSampleLocationsEXT* forMarshaling);

void unmarshal_VkSubpassSampleLocationsEXT(
    VulkanStream* vkStream,
    VkSubpassSampleLocationsEXT* forUnmarshaling);

void marshal_VkRenderPassSampleLocationsBeginInfoEXT(
    VulkanStream* vkStream,
    const VkRenderPassSampleLocationsBeginInfoEXT* forMarshaling);

void unmarshal_VkRenderPassSampleLocationsBeginInfoEXT(
    VulkanStream* vkStream,
    VkRenderPassSampleLocationsBeginInfoEXT* forUnmarshaling);

void marshal_VkPipelineSampleLocationsStateCreateInfoEXT(
    VulkanStream* vkStream,
    const VkPipelineSampleLocationsStateCreateInfoEXT* forMarshaling);

void unmarshal_VkPipelineSampleLocationsStateCreateInfoEXT(
    VulkanStream* vkStream,
    VkPipelineSampleLocationsStateCreateInfoEXT* forUnmarshaling);

void marshal_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceSampleLocationsPropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceSampleLocationsPropertiesEXT* forUnmarshaling);

void marshal_VkMultisamplePropertiesEXT(
    VulkanStream* vkStream,
    const VkMultisamplePropertiesEXT* forMarshaling);

void unmarshal_VkMultisamplePropertiesEXT(
    VulkanStream* vkStream,
    VkMultisamplePropertiesEXT* forUnmarshaling);

void marshal_vkCmdSetSampleLocationsEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT* pSampleLocationsInfo);

void unmarshal_vkCmdSetSampleLocationsEXT(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT* pSampleLocationsInfo);

void marshal_vkGetPhysicalDeviceMultisamplePropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties);

void unmarshal_vkGetPhysicalDeviceMultisamplePropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties);

#endif
#ifdef VK_EXT_blend_operation_advanced
void marshal_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* forUnmarshaling);

void marshal_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* forUnmarshaling);

void marshal_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VulkanStream* vkStream,
    const VkPipelineColorBlendAdvancedStateCreateInfoEXT* forMarshaling);

void unmarshal_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    VulkanStream* vkStream,
    VkPipelineColorBlendAdvancedStateCreateInfoEXT* forUnmarshaling);

#endif
#ifdef VK_NV_fragment_coverage_to_color
void marshal_VkPipelineCoverageToColorStateCreateInfoNV(
    VulkanStream* vkStream,
    const VkPipelineCoverageToColorStateCreateInfoNV* forMarshaling);

void unmarshal_VkPipelineCoverageToColorStateCreateInfoNV(
    VulkanStream* vkStream,
    VkPipelineCoverageToColorStateCreateInfoNV* forUnmarshaling);

#endif
#ifdef VK_NV_framebuffer_mixed_samples
void marshal_VkPipelineCoverageModulationStateCreateInfoNV(
    VulkanStream* vkStream,
    const VkPipelineCoverageModulationStateCreateInfoNV* forMarshaling);

void unmarshal_VkPipelineCoverageModulationStateCreateInfoNV(
    VulkanStream* vkStream,
    VkPipelineCoverageModulationStateCreateInfoNV* forUnmarshaling);

#endif
#ifdef VK_NV_fill_rectangle
#endif
#ifdef VK_EXT_post_depth_coverage
#endif
#ifdef VK_EXT_validation_cache
void marshal_VkValidationCacheCreateInfoEXT(
    VulkanStream* vkStream,
    const VkValidationCacheCreateInfoEXT* forMarshaling);

void unmarshal_VkValidationCacheCreateInfoEXT(
    VulkanStream* vkStream,
    VkValidationCacheCreateInfoEXT* forUnmarshaling);

void marshal_VkShaderModuleValidationCacheCreateInfoEXT(
    VulkanStream* vkStream,
    const VkShaderModuleValidationCacheCreateInfoEXT* forMarshaling);

void unmarshal_VkShaderModuleValidationCacheCreateInfoEXT(
    VulkanStream* vkStream,
    VkShaderModuleValidationCacheCreateInfoEXT* forUnmarshaling);

VkResult marshal_vkCreateValidationCacheEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkValidationCacheCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkValidationCacheEXT* pValidationCache);

VkResult unmarshal_vkCreateValidationCacheEXT(
    VulkanStream* vkStream,
    VkDevice device,
    const VkValidationCacheCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkValidationCacheEXT* pValidationCache);

void marshal_vkDestroyValidationCacheEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const VkAllocationCallbacks* pAllocator);

void unmarshal_vkDestroyValidationCacheEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const VkAllocationCallbacks* pAllocator);

VkResult marshal_vkMergeValidationCachesEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint32_t srcCacheCount,
    const VkValidationCacheEXT* pSrcCaches);

VkResult unmarshal_vkMergeValidationCachesEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint32_t srcCacheCount,
    const VkValidationCacheEXT* pSrcCaches);

VkResult marshal_vkGetValidationCacheDataEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData);

VkResult unmarshal_vkGetValidationCacheDataEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData);

#endif
#ifdef VK_EXT_descriptor_indexing
void marshal_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VulkanStream* vkStream,
    const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* forMarshaling);

void unmarshal_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    VulkanStream* vkStream,
    VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* forUnmarshaling);

void marshal_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceDescriptorIndexingFeaturesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceDescriptorIndexingFeaturesEXT* forUnmarshaling);

void marshal_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceDescriptorIndexingPropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceDescriptorIndexingPropertiesEXT* forUnmarshaling);

void marshal_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VulkanStream* vkStream,
    const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* forMarshaling);

void unmarshal_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    VulkanStream* vkStream,
    VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* forUnmarshaling);

void marshal_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VulkanStream* vkStream,
    const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* forMarshaling);

void unmarshal_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    VulkanStream* vkStream,
    VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* forUnmarshaling);

#endif
#ifdef VK_EXT_shader_viewport_index_layer
#endif
#ifdef VK_EXT_global_priority
void marshal_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VulkanStream* vkStream,
    const VkDeviceQueueGlobalPriorityCreateInfoEXT* forMarshaling);

void unmarshal_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    VulkanStream* vkStream,
    VkDeviceQueueGlobalPriorityCreateInfoEXT* forUnmarshaling);

#endif
#ifdef VK_EXT_external_memory_host
void marshal_VkImportMemoryHostPointerInfoEXT(
    VulkanStream* vkStream,
    const VkImportMemoryHostPointerInfoEXT* forMarshaling);

void unmarshal_VkImportMemoryHostPointerInfoEXT(
    VulkanStream* vkStream,
    VkImportMemoryHostPointerInfoEXT* forUnmarshaling);

void marshal_VkMemoryHostPointerPropertiesEXT(
    VulkanStream* vkStream,
    const VkMemoryHostPointerPropertiesEXT* forMarshaling);

void unmarshal_VkMemoryHostPointerPropertiesEXT(
    VulkanStream* vkStream,
    VkMemoryHostPointerPropertiesEXT* forUnmarshaling);

void marshal_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceExternalMemoryHostPropertiesEXT* forUnmarshaling);

VkResult marshal_vkGetMemoryHostPointerPropertiesEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const void* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);

VkResult unmarshal_vkGetMemoryHostPointerPropertiesEXT(
    VulkanStream* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const void* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties);

#endif
#ifdef VK_AMD_buffer_marker
void marshal_vkCmdWriteBufferMarkerAMD(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker);

void unmarshal_vkCmdWriteBufferMarkerAMD(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker);

#endif
#ifdef VK_AMD_shader_core_properties
void marshal_VkPhysicalDeviceShaderCorePropertiesAMD(
    VulkanStream* vkStream,
    const VkPhysicalDeviceShaderCorePropertiesAMD* forMarshaling);

void unmarshal_VkPhysicalDeviceShaderCorePropertiesAMD(
    VulkanStream* vkStream,
    VkPhysicalDeviceShaderCorePropertiesAMD* forUnmarshaling);

#endif
#ifdef VK_EXT_vertex_attribute_divisor
void marshal_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VulkanStream* vkStream,
    const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* forMarshaling);

void unmarshal_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    VulkanStream* vkStream,
    VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* forUnmarshaling);

void marshal_VkVertexInputBindingDivisorDescriptionEXT(
    VulkanStream* vkStream,
    const VkVertexInputBindingDivisorDescriptionEXT* forMarshaling);

void unmarshal_VkVertexInputBindingDivisorDescriptionEXT(
    VulkanStream* vkStream,
    VkVertexInputBindingDivisorDescriptionEXT* forUnmarshaling);

void marshal_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VulkanStream* vkStream,
    const VkPipelineVertexInputDivisorStateCreateInfoEXT* forMarshaling);

void unmarshal_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    VulkanStream* vkStream,
    VkPipelineVertexInputDivisorStateCreateInfoEXT* forUnmarshaling);

#endif
#ifdef VK_NV_shader_subgroup_partitioned
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void marshal_VkQueueFamilyCheckpointPropertiesNV(
    VulkanStream* vkStream,
    const VkQueueFamilyCheckpointPropertiesNV* forMarshaling);

void unmarshal_VkQueueFamilyCheckpointPropertiesNV(
    VulkanStream* vkStream,
    VkQueueFamilyCheckpointPropertiesNV* forUnmarshaling);

void marshal_VkCheckpointDataNV(
    VulkanStream* vkStream,
    const VkCheckpointDataNV* forMarshaling);

void unmarshal_VkCheckpointDataNV(
    VulkanStream* vkStream,
    VkCheckpointDataNV* forUnmarshaling);

void marshal_vkCmdSetCheckpointNV(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const void* pCheckpointMarker);

void unmarshal_vkCmdSetCheckpointNV(
    VulkanStream* vkStream,
    VkCommandBuffer commandBuffer,
    const void* pCheckpointMarker);

void marshal_vkGetQueueCheckpointDataNV(
    VulkanStream* vkStream,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData);

void unmarshal_vkGetQueueCheckpointDataNV(
    VulkanStream* vkStream,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData);

#endif

} // namespace goldfish_vk
