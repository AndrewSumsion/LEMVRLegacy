// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module goldfish_vk_unbox
// (header) generated by android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/genvk.py -registry android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/vk.xml cereal -o android/android-emugl/host/libs/libOpenglRender/vulkan/cereal
// Please do not modify directly;
// re-run android/scripts/generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing genvk.py and vk.xml
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
// python3 $VULKAN_REGISTRY_XML_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o $CEREAL_OUTPUT_DIR

#pragma once

#include <vulkan/vulkan.h>


#include "goldfish_vk_private_defs.h"
#include "goldfish_vk_extension_structs.h"

namespace android {
namespace base {
class BumpPool;
} // namespace base
} // namespace android

using android::base::BumpPool;



namespace goldfish_vk {

#ifdef VK_VERSION_1_0
VkApplicationInfo* unbox_VkApplicationInfo(
    BumpPool* pool,
    const VkApplicationInfo* toUnbox);

VkInstanceCreateInfo* unbox_VkInstanceCreateInfo(
    BumpPool* pool,
    const VkInstanceCreateInfo* toUnbox);

VkAllocationCallbacks* unbox_VkAllocationCallbacks(
    BumpPool* pool,
    const VkAllocationCallbacks* toUnbox);

VkPhysicalDeviceFeatures* unbox_VkPhysicalDeviceFeatures(
    BumpPool* pool,
    const VkPhysicalDeviceFeatures* toUnbox);

VkFormatProperties* unbox_VkFormatProperties(
    BumpPool* pool,
    const VkFormatProperties* toUnbox);

VkExtent3D* unbox_VkExtent3D(
    BumpPool* pool,
    const VkExtent3D* toUnbox);

VkImageFormatProperties* unbox_VkImageFormatProperties(
    BumpPool* pool,
    const VkImageFormatProperties* toUnbox);

VkPhysicalDeviceLimits* unbox_VkPhysicalDeviceLimits(
    BumpPool* pool,
    const VkPhysicalDeviceLimits* toUnbox);

VkPhysicalDeviceSparseProperties* unbox_VkPhysicalDeviceSparseProperties(
    BumpPool* pool,
    const VkPhysicalDeviceSparseProperties* toUnbox);

VkPhysicalDeviceProperties* unbox_VkPhysicalDeviceProperties(
    BumpPool* pool,
    const VkPhysicalDeviceProperties* toUnbox);

VkQueueFamilyProperties* unbox_VkQueueFamilyProperties(
    BumpPool* pool,
    const VkQueueFamilyProperties* toUnbox);

VkMemoryType* unbox_VkMemoryType(
    BumpPool* pool,
    const VkMemoryType* toUnbox);

VkMemoryHeap* unbox_VkMemoryHeap(
    BumpPool* pool,
    const VkMemoryHeap* toUnbox);

VkPhysicalDeviceMemoryProperties* unbox_VkPhysicalDeviceMemoryProperties(
    BumpPool* pool,
    const VkPhysicalDeviceMemoryProperties* toUnbox);

VkDeviceQueueCreateInfo* unbox_VkDeviceQueueCreateInfo(
    BumpPool* pool,
    const VkDeviceQueueCreateInfo* toUnbox);

VkDeviceCreateInfo* unbox_VkDeviceCreateInfo(
    BumpPool* pool,
    const VkDeviceCreateInfo* toUnbox);

VkExtensionProperties* unbox_VkExtensionProperties(
    BumpPool* pool,
    const VkExtensionProperties* toUnbox);

VkLayerProperties* unbox_VkLayerProperties(
    BumpPool* pool,
    const VkLayerProperties* toUnbox);

VkSubmitInfo* unbox_VkSubmitInfo(
    BumpPool* pool,
    const VkSubmitInfo* toUnbox);

VkMemoryAllocateInfo* unbox_VkMemoryAllocateInfo(
    BumpPool* pool,
    const VkMemoryAllocateInfo* toUnbox);

VkMappedMemoryRange* unbox_VkMappedMemoryRange(
    BumpPool* pool,
    const VkMappedMemoryRange* toUnbox);

VkMemoryRequirements* unbox_VkMemoryRequirements(
    BumpPool* pool,
    const VkMemoryRequirements* toUnbox);

VkSparseImageFormatProperties* unbox_VkSparseImageFormatProperties(
    BumpPool* pool,
    const VkSparseImageFormatProperties* toUnbox);

VkSparseImageMemoryRequirements* unbox_VkSparseImageMemoryRequirements(
    BumpPool* pool,
    const VkSparseImageMemoryRequirements* toUnbox);

VkSparseMemoryBind* unbox_VkSparseMemoryBind(
    BumpPool* pool,
    const VkSparseMemoryBind* toUnbox);

VkSparseBufferMemoryBindInfo* unbox_VkSparseBufferMemoryBindInfo(
    BumpPool* pool,
    const VkSparseBufferMemoryBindInfo* toUnbox);

VkSparseImageOpaqueMemoryBindInfo* unbox_VkSparseImageOpaqueMemoryBindInfo(
    BumpPool* pool,
    const VkSparseImageOpaqueMemoryBindInfo* toUnbox);

VkImageSubresource* unbox_VkImageSubresource(
    BumpPool* pool,
    const VkImageSubresource* toUnbox);

VkOffset3D* unbox_VkOffset3D(
    BumpPool* pool,
    const VkOffset3D* toUnbox);

VkSparseImageMemoryBind* unbox_VkSparseImageMemoryBind(
    BumpPool* pool,
    const VkSparseImageMemoryBind* toUnbox);

VkSparseImageMemoryBindInfo* unbox_VkSparseImageMemoryBindInfo(
    BumpPool* pool,
    const VkSparseImageMemoryBindInfo* toUnbox);

VkBindSparseInfo* unbox_VkBindSparseInfo(
    BumpPool* pool,
    const VkBindSparseInfo* toUnbox);

VkFenceCreateInfo* unbox_VkFenceCreateInfo(
    BumpPool* pool,
    const VkFenceCreateInfo* toUnbox);

VkSemaphoreCreateInfo* unbox_VkSemaphoreCreateInfo(
    BumpPool* pool,
    const VkSemaphoreCreateInfo* toUnbox);

VkEventCreateInfo* unbox_VkEventCreateInfo(
    BumpPool* pool,
    const VkEventCreateInfo* toUnbox);

VkQueryPoolCreateInfo* unbox_VkQueryPoolCreateInfo(
    BumpPool* pool,
    const VkQueryPoolCreateInfo* toUnbox);

VkBufferCreateInfo* unbox_VkBufferCreateInfo(
    BumpPool* pool,
    const VkBufferCreateInfo* toUnbox);

VkBufferViewCreateInfo* unbox_VkBufferViewCreateInfo(
    BumpPool* pool,
    const VkBufferViewCreateInfo* toUnbox);

VkImageCreateInfo* unbox_VkImageCreateInfo(
    BumpPool* pool,
    const VkImageCreateInfo* toUnbox);

VkSubresourceLayout* unbox_VkSubresourceLayout(
    BumpPool* pool,
    const VkSubresourceLayout* toUnbox);

VkComponentMapping* unbox_VkComponentMapping(
    BumpPool* pool,
    const VkComponentMapping* toUnbox);

VkImageSubresourceRange* unbox_VkImageSubresourceRange(
    BumpPool* pool,
    const VkImageSubresourceRange* toUnbox);

VkImageViewCreateInfo* unbox_VkImageViewCreateInfo(
    BumpPool* pool,
    const VkImageViewCreateInfo* toUnbox);

VkShaderModuleCreateInfo* unbox_VkShaderModuleCreateInfo(
    BumpPool* pool,
    const VkShaderModuleCreateInfo* toUnbox);

VkPipelineCacheCreateInfo* unbox_VkPipelineCacheCreateInfo(
    BumpPool* pool,
    const VkPipelineCacheCreateInfo* toUnbox);

VkSpecializationMapEntry* unbox_VkSpecializationMapEntry(
    BumpPool* pool,
    const VkSpecializationMapEntry* toUnbox);

VkSpecializationInfo* unbox_VkSpecializationInfo(
    BumpPool* pool,
    const VkSpecializationInfo* toUnbox);

VkPipelineShaderStageCreateInfo* unbox_VkPipelineShaderStageCreateInfo(
    BumpPool* pool,
    const VkPipelineShaderStageCreateInfo* toUnbox);

VkVertexInputBindingDescription* unbox_VkVertexInputBindingDescription(
    BumpPool* pool,
    const VkVertexInputBindingDescription* toUnbox);

VkVertexInputAttributeDescription* unbox_VkVertexInputAttributeDescription(
    BumpPool* pool,
    const VkVertexInputAttributeDescription* toUnbox);

VkPipelineVertexInputStateCreateInfo* unbox_VkPipelineVertexInputStateCreateInfo(
    BumpPool* pool,
    const VkPipelineVertexInputStateCreateInfo* toUnbox);

VkPipelineInputAssemblyStateCreateInfo* unbox_VkPipelineInputAssemblyStateCreateInfo(
    BumpPool* pool,
    const VkPipelineInputAssemblyStateCreateInfo* toUnbox);

VkPipelineTessellationStateCreateInfo* unbox_VkPipelineTessellationStateCreateInfo(
    BumpPool* pool,
    const VkPipelineTessellationStateCreateInfo* toUnbox);

VkViewport* unbox_VkViewport(
    BumpPool* pool,
    const VkViewport* toUnbox);

VkOffset2D* unbox_VkOffset2D(
    BumpPool* pool,
    const VkOffset2D* toUnbox);

VkExtent2D* unbox_VkExtent2D(
    BumpPool* pool,
    const VkExtent2D* toUnbox);

VkRect2D* unbox_VkRect2D(
    BumpPool* pool,
    const VkRect2D* toUnbox);

VkPipelineViewportStateCreateInfo* unbox_VkPipelineViewportStateCreateInfo(
    BumpPool* pool,
    const VkPipelineViewportStateCreateInfo* toUnbox);

VkPipelineRasterizationStateCreateInfo* unbox_VkPipelineRasterizationStateCreateInfo(
    BumpPool* pool,
    const VkPipelineRasterizationStateCreateInfo* toUnbox);

VkPipelineMultisampleStateCreateInfo* unbox_VkPipelineMultisampleStateCreateInfo(
    BumpPool* pool,
    const VkPipelineMultisampleStateCreateInfo* toUnbox);

VkStencilOpState* unbox_VkStencilOpState(
    BumpPool* pool,
    const VkStencilOpState* toUnbox);

VkPipelineDepthStencilStateCreateInfo* unbox_VkPipelineDepthStencilStateCreateInfo(
    BumpPool* pool,
    const VkPipelineDepthStencilStateCreateInfo* toUnbox);

VkPipelineColorBlendAttachmentState* unbox_VkPipelineColorBlendAttachmentState(
    BumpPool* pool,
    const VkPipelineColorBlendAttachmentState* toUnbox);

VkPipelineColorBlendStateCreateInfo* unbox_VkPipelineColorBlendStateCreateInfo(
    BumpPool* pool,
    const VkPipelineColorBlendStateCreateInfo* toUnbox);

VkPipelineDynamicStateCreateInfo* unbox_VkPipelineDynamicStateCreateInfo(
    BumpPool* pool,
    const VkPipelineDynamicStateCreateInfo* toUnbox);

VkGraphicsPipelineCreateInfo* unbox_VkGraphicsPipelineCreateInfo(
    BumpPool* pool,
    const VkGraphicsPipelineCreateInfo* toUnbox);

VkComputePipelineCreateInfo* unbox_VkComputePipelineCreateInfo(
    BumpPool* pool,
    const VkComputePipelineCreateInfo* toUnbox);

VkPushConstantRange* unbox_VkPushConstantRange(
    BumpPool* pool,
    const VkPushConstantRange* toUnbox);

VkPipelineLayoutCreateInfo* unbox_VkPipelineLayoutCreateInfo(
    BumpPool* pool,
    const VkPipelineLayoutCreateInfo* toUnbox);

VkSamplerCreateInfo* unbox_VkSamplerCreateInfo(
    BumpPool* pool,
    const VkSamplerCreateInfo* toUnbox);

VkDescriptorSetLayoutBinding* unbox_VkDescriptorSetLayoutBinding(
    BumpPool* pool,
    const VkDescriptorSetLayoutBinding* toUnbox);

VkDescriptorSetLayoutCreateInfo* unbox_VkDescriptorSetLayoutCreateInfo(
    BumpPool* pool,
    const VkDescriptorSetLayoutCreateInfo* toUnbox);

VkDescriptorPoolSize* unbox_VkDescriptorPoolSize(
    BumpPool* pool,
    const VkDescriptorPoolSize* toUnbox);

VkDescriptorPoolCreateInfo* unbox_VkDescriptorPoolCreateInfo(
    BumpPool* pool,
    const VkDescriptorPoolCreateInfo* toUnbox);

VkDescriptorSetAllocateInfo* unbox_VkDescriptorSetAllocateInfo(
    BumpPool* pool,
    const VkDescriptorSetAllocateInfo* toUnbox);

VkDescriptorImageInfo* unbox_VkDescriptorImageInfo(
    BumpPool* pool,
    const VkDescriptorImageInfo* toUnbox);

VkDescriptorBufferInfo* unbox_VkDescriptorBufferInfo(
    BumpPool* pool,
    const VkDescriptorBufferInfo* toUnbox);

VkWriteDescriptorSet* unbox_VkWriteDescriptorSet(
    BumpPool* pool,
    const VkWriteDescriptorSet* toUnbox);

VkCopyDescriptorSet* unbox_VkCopyDescriptorSet(
    BumpPool* pool,
    const VkCopyDescriptorSet* toUnbox);

VkFramebufferCreateInfo* unbox_VkFramebufferCreateInfo(
    BumpPool* pool,
    const VkFramebufferCreateInfo* toUnbox);

VkAttachmentDescription* unbox_VkAttachmentDescription(
    BumpPool* pool,
    const VkAttachmentDescription* toUnbox);

VkAttachmentReference* unbox_VkAttachmentReference(
    BumpPool* pool,
    const VkAttachmentReference* toUnbox);

VkSubpassDescription* unbox_VkSubpassDescription(
    BumpPool* pool,
    const VkSubpassDescription* toUnbox);

VkSubpassDependency* unbox_VkSubpassDependency(
    BumpPool* pool,
    const VkSubpassDependency* toUnbox);

VkRenderPassCreateInfo* unbox_VkRenderPassCreateInfo(
    BumpPool* pool,
    const VkRenderPassCreateInfo* toUnbox);

VkCommandPoolCreateInfo* unbox_VkCommandPoolCreateInfo(
    BumpPool* pool,
    const VkCommandPoolCreateInfo* toUnbox);

VkCommandBufferAllocateInfo* unbox_VkCommandBufferAllocateInfo(
    BumpPool* pool,
    const VkCommandBufferAllocateInfo* toUnbox);

VkCommandBufferInheritanceInfo* unbox_VkCommandBufferInheritanceInfo(
    BumpPool* pool,
    const VkCommandBufferInheritanceInfo* toUnbox);

VkCommandBufferBeginInfo* unbox_VkCommandBufferBeginInfo(
    BumpPool* pool,
    const VkCommandBufferBeginInfo* toUnbox);

VkBufferCopy* unbox_VkBufferCopy(
    BumpPool* pool,
    const VkBufferCopy* toUnbox);

VkImageSubresourceLayers* unbox_VkImageSubresourceLayers(
    BumpPool* pool,
    const VkImageSubresourceLayers* toUnbox);

VkImageCopy* unbox_VkImageCopy(
    BumpPool* pool,
    const VkImageCopy* toUnbox);

VkImageBlit* unbox_VkImageBlit(
    BumpPool* pool,
    const VkImageBlit* toUnbox);

VkBufferImageCopy* unbox_VkBufferImageCopy(
    BumpPool* pool,
    const VkBufferImageCopy* toUnbox);

VkClearColorValue* unbox_VkClearColorValue(
    BumpPool* pool,
    const VkClearColorValue* toUnbox);

VkClearDepthStencilValue* unbox_VkClearDepthStencilValue(
    BumpPool* pool,
    const VkClearDepthStencilValue* toUnbox);

VkClearValue* unbox_VkClearValue(
    BumpPool* pool,
    const VkClearValue* toUnbox);

VkClearAttachment* unbox_VkClearAttachment(
    BumpPool* pool,
    const VkClearAttachment* toUnbox);

VkClearRect* unbox_VkClearRect(
    BumpPool* pool,
    const VkClearRect* toUnbox);

VkImageResolve* unbox_VkImageResolve(
    BumpPool* pool,
    const VkImageResolve* toUnbox);

VkMemoryBarrier* unbox_VkMemoryBarrier(
    BumpPool* pool,
    const VkMemoryBarrier* toUnbox);

VkBufferMemoryBarrier* unbox_VkBufferMemoryBarrier(
    BumpPool* pool,
    const VkBufferMemoryBarrier* toUnbox);

VkImageMemoryBarrier* unbox_VkImageMemoryBarrier(
    BumpPool* pool,
    const VkImageMemoryBarrier* toUnbox);

VkRenderPassBeginInfo* unbox_VkRenderPassBeginInfo(
    BumpPool* pool,
    const VkRenderPassBeginInfo* toUnbox);

VkDispatchIndirectCommand* unbox_VkDispatchIndirectCommand(
    BumpPool* pool,
    const VkDispatchIndirectCommand* toUnbox);

VkDrawIndexedIndirectCommand* unbox_VkDrawIndexedIndirectCommand(
    BumpPool* pool,
    const VkDrawIndexedIndirectCommand* toUnbox);

VkDrawIndirectCommand* unbox_VkDrawIndirectCommand(
    BumpPool* pool,
    const VkDrawIndirectCommand* toUnbox);

VkBaseOutStructure* unbox_VkBaseOutStructure(
    BumpPool* pool,
    const VkBaseOutStructure* toUnbox);

VkBaseInStructure* unbox_VkBaseInStructure(
    BumpPool* pool,
    const VkBaseInStructure* toUnbox);

#endif
#ifdef VK_VERSION_1_1
VkPhysicalDeviceSubgroupProperties* unbox_VkPhysicalDeviceSubgroupProperties(
    BumpPool* pool,
    const VkPhysicalDeviceSubgroupProperties* toUnbox);

VkBindBufferMemoryInfo* unbox_VkBindBufferMemoryInfo(
    BumpPool* pool,
    const VkBindBufferMemoryInfo* toUnbox);

VkBindImageMemoryInfo* unbox_VkBindImageMemoryInfo(
    BumpPool* pool,
    const VkBindImageMemoryInfo* toUnbox);

VkPhysicalDevice16BitStorageFeatures* unbox_VkPhysicalDevice16BitStorageFeatures(
    BumpPool* pool,
    const VkPhysicalDevice16BitStorageFeatures* toUnbox);

VkMemoryDedicatedRequirements* unbox_VkMemoryDedicatedRequirements(
    BumpPool* pool,
    const VkMemoryDedicatedRequirements* toUnbox);

VkMemoryDedicatedAllocateInfo* unbox_VkMemoryDedicatedAllocateInfo(
    BumpPool* pool,
    const VkMemoryDedicatedAllocateInfo* toUnbox);

VkMemoryAllocateFlagsInfo* unbox_VkMemoryAllocateFlagsInfo(
    BumpPool* pool,
    const VkMemoryAllocateFlagsInfo* toUnbox);

VkDeviceGroupRenderPassBeginInfo* unbox_VkDeviceGroupRenderPassBeginInfo(
    BumpPool* pool,
    const VkDeviceGroupRenderPassBeginInfo* toUnbox);

VkDeviceGroupCommandBufferBeginInfo* unbox_VkDeviceGroupCommandBufferBeginInfo(
    BumpPool* pool,
    const VkDeviceGroupCommandBufferBeginInfo* toUnbox);

VkDeviceGroupSubmitInfo* unbox_VkDeviceGroupSubmitInfo(
    BumpPool* pool,
    const VkDeviceGroupSubmitInfo* toUnbox);

VkDeviceGroupBindSparseInfo* unbox_VkDeviceGroupBindSparseInfo(
    BumpPool* pool,
    const VkDeviceGroupBindSparseInfo* toUnbox);

VkBindBufferMemoryDeviceGroupInfo* unbox_VkBindBufferMemoryDeviceGroupInfo(
    BumpPool* pool,
    const VkBindBufferMemoryDeviceGroupInfo* toUnbox);

VkBindImageMemoryDeviceGroupInfo* unbox_VkBindImageMemoryDeviceGroupInfo(
    BumpPool* pool,
    const VkBindImageMemoryDeviceGroupInfo* toUnbox);

VkPhysicalDeviceGroupProperties* unbox_VkPhysicalDeviceGroupProperties(
    BumpPool* pool,
    const VkPhysicalDeviceGroupProperties* toUnbox);

VkDeviceGroupDeviceCreateInfo* unbox_VkDeviceGroupDeviceCreateInfo(
    BumpPool* pool,
    const VkDeviceGroupDeviceCreateInfo* toUnbox);

VkBufferMemoryRequirementsInfo2* unbox_VkBufferMemoryRequirementsInfo2(
    BumpPool* pool,
    const VkBufferMemoryRequirementsInfo2* toUnbox);

VkImageMemoryRequirementsInfo2* unbox_VkImageMemoryRequirementsInfo2(
    BumpPool* pool,
    const VkImageMemoryRequirementsInfo2* toUnbox);

VkImageSparseMemoryRequirementsInfo2* unbox_VkImageSparseMemoryRequirementsInfo2(
    BumpPool* pool,
    const VkImageSparseMemoryRequirementsInfo2* toUnbox);

VkMemoryRequirements2* unbox_VkMemoryRequirements2(
    BumpPool* pool,
    const VkMemoryRequirements2* toUnbox);

VkSparseImageMemoryRequirements2* unbox_VkSparseImageMemoryRequirements2(
    BumpPool* pool,
    const VkSparseImageMemoryRequirements2* toUnbox);

VkPhysicalDeviceFeatures2* unbox_VkPhysicalDeviceFeatures2(
    BumpPool* pool,
    const VkPhysicalDeviceFeatures2* toUnbox);

VkPhysicalDeviceProperties2* unbox_VkPhysicalDeviceProperties2(
    BumpPool* pool,
    const VkPhysicalDeviceProperties2* toUnbox);

VkFormatProperties2* unbox_VkFormatProperties2(
    BumpPool* pool,
    const VkFormatProperties2* toUnbox);

VkImageFormatProperties2* unbox_VkImageFormatProperties2(
    BumpPool* pool,
    const VkImageFormatProperties2* toUnbox);

VkPhysicalDeviceImageFormatInfo2* unbox_VkPhysicalDeviceImageFormatInfo2(
    BumpPool* pool,
    const VkPhysicalDeviceImageFormatInfo2* toUnbox);

VkQueueFamilyProperties2* unbox_VkQueueFamilyProperties2(
    BumpPool* pool,
    const VkQueueFamilyProperties2* toUnbox);

VkPhysicalDeviceMemoryProperties2* unbox_VkPhysicalDeviceMemoryProperties2(
    BumpPool* pool,
    const VkPhysicalDeviceMemoryProperties2* toUnbox);

VkSparseImageFormatProperties2* unbox_VkSparseImageFormatProperties2(
    BumpPool* pool,
    const VkSparseImageFormatProperties2* toUnbox);

VkPhysicalDeviceSparseImageFormatInfo2* unbox_VkPhysicalDeviceSparseImageFormatInfo2(
    BumpPool* pool,
    const VkPhysicalDeviceSparseImageFormatInfo2* toUnbox);

VkPhysicalDevicePointClippingProperties* unbox_VkPhysicalDevicePointClippingProperties(
    BumpPool* pool,
    const VkPhysicalDevicePointClippingProperties* toUnbox);

VkInputAttachmentAspectReference* unbox_VkInputAttachmentAspectReference(
    BumpPool* pool,
    const VkInputAttachmentAspectReference* toUnbox);

VkRenderPassInputAttachmentAspectCreateInfo* unbox_VkRenderPassInputAttachmentAspectCreateInfo(
    BumpPool* pool,
    const VkRenderPassInputAttachmentAspectCreateInfo* toUnbox);

VkImageViewUsageCreateInfo* unbox_VkImageViewUsageCreateInfo(
    BumpPool* pool,
    const VkImageViewUsageCreateInfo* toUnbox);

VkPipelineTessellationDomainOriginStateCreateInfo* unbox_VkPipelineTessellationDomainOriginStateCreateInfo(
    BumpPool* pool,
    const VkPipelineTessellationDomainOriginStateCreateInfo* toUnbox);

VkRenderPassMultiviewCreateInfo* unbox_VkRenderPassMultiviewCreateInfo(
    BumpPool* pool,
    const VkRenderPassMultiviewCreateInfo* toUnbox);

VkPhysicalDeviceMultiviewFeatures* unbox_VkPhysicalDeviceMultiviewFeatures(
    BumpPool* pool,
    const VkPhysicalDeviceMultiviewFeatures* toUnbox);

VkPhysicalDeviceMultiviewProperties* unbox_VkPhysicalDeviceMultiviewProperties(
    BumpPool* pool,
    const VkPhysicalDeviceMultiviewProperties* toUnbox);

VkPhysicalDeviceVariablePointerFeatures* unbox_VkPhysicalDeviceVariablePointerFeatures(
    BumpPool* pool,
    const VkPhysicalDeviceVariablePointerFeatures* toUnbox);

VkPhysicalDeviceProtectedMemoryFeatures* unbox_VkPhysicalDeviceProtectedMemoryFeatures(
    BumpPool* pool,
    const VkPhysicalDeviceProtectedMemoryFeatures* toUnbox);

VkPhysicalDeviceProtectedMemoryProperties* unbox_VkPhysicalDeviceProtectedMemoryProperties(
    BumpPool* pool,
    const VkPhysicalDeviceProtectedMemoryProperties* toUnbox);

VkDeviceQueueInfo2* unbox_VkDeviceQueueInfo2(
    BumpPool* pool,
    const VkDeviceQueueInfo2* toUnbox);

VkProtectedSubmitInfo* unbox_VkProtectedSubmitInfo(
    BumpPool* pool,
    const VkProtectedSubmitInfo* toUnbox);

VkSamplerYcbcrConversionCreateInfo* unbox_VkSamplerYcbcrConversionCreateInfo(
    BumpPool* pool,
    const VkSamplerYcbcrConversionCreateInfo* toUnbox);

VkSamplerYcbcrConversionInfo* unbox_VkSamplerYcbcrConversionInfo(
    BumpPool* pool,
    const VkSamplerYcbcrConversionInfo* toUnbox);

VkBindImagePlaneMemoryInfo* unbox_VkBindImagePlaneMemoryInfo(
    BumpPool* pool,
    const VkBindImagePlaneMemoryInfo* toUnbox);

VkImagePlaneMemoryRequirementsInfo* unbox_VkImagePlaneMemoryRequirementsInfo(
    BumpPool* pool,
    const VkImagePlaneMemoryRequirementsInfo* toUnbox);

VkPhysicalDeviceSamplerYcbcrConversionFeatures* unbox_VkPhysicalDeviceSamplerYcbcrConversionFeatures(
    BumpPool* pool,
    const VkPhysicalDeviceSamplerYcbcrConversionFeatures* toUnbox);

VkSamplerYcbcrConversionImageFormatProperties* unbox_VkSamplerYcbcrConversionImageFormatProperties(
    BumpPool* pool,
    const VkSamplerYcbcrConversionImageFormatProperties* toUnbox);

VkDescriptorUpdateTemplateEntry* unbox_VkDescriptorUpdateTemplateEntry(
    BumpPool* pool,
    const VkDescriptorUpdateTemplateEntry* toUnbox);

VkDescriptorUpdateTemplateCreateInfo* unbox_VkDescriptorUpdateTemplateCreateInfo(
    BumpPool* pool,
    const VkDescriptorUpdateTemplateCreateInfo* toUnbox);

VkExternalMemoryProperties* unbox_VkExternalMemoryProperties(
    BumpPool* pool,
    const VkExternalMemoryProperties* toUnbox);

VkPhysicalDeviceExternalImageFormatInfo* unbox_VkPhysicalDeviceExternalImageFormatInfo(
    BumpPool* pool,
    const VkPhysicalDeviceExternalImageFormatInfo* toUnbox);

VkExternalImageFormatProperties* unbox_VkExternalImageFormatProperties(
    BumpPool* pool,
    const VkExternalImageFormatProperties* toUnbox);

VkPhysicalDeviceExternalBufferInfo* unbox_VkPhysicalDeviceExternalBufferInfo(
    BumpPool* pool,
    const VkPhysicalDeviceExternalBufferInfo* toUnbox);

VkExternalBufferProperties* unbox_VkExternalBufferProperties(
    BumpPool* pool,
    const VkExternalBufferProperties* toUnbox);

VkPhysicalDeviceIDProperties* unbox_VkPhysicalDeviceIDProperties(
    BumpPool* pool,
    const VkPhysicalDeviceIDProperties* toUnbox);

VkExternalMemoryImageCreateInfo* unbox_VkExternalMemoryImageCreateInfo(
    BumpPool* pool,
    const VkExternalMemoryImageCreateInfo* toUnbox);

VkExternalMemoryBufferCreateInfo* unbox_VkExternalMemoryBufferCreateInfo(
    BumpPool* pool,
    const VkExternalMemoryBufferCreateInfo* toUnbox);

VkExportMemoryAllocateInfo* unbox_VkExportMemoryAllocateInfo(
    BumpPool* pool,
    const VkExportMemoryAllocateInfo* toUnbox);

VkPhysicalDeviceExternalFenceInfo* unbox_VkPhysicalDeviceExternalFenceInfo(
    BumpPool* pool,
    const VkPhysicalDeviceExternalFenceInfo* toUnbox);

VkExternalFenceProperties* unbox_VkExternalFenceProperties(
    BumpPool* pool,
    const VkExternalFenceProperties* toUnbox);

VkExportFenceCreateInfo* unbox_VkExportFenceCreateInfo(
    BumpPool* pool,
    const VkExportFenceCreateInfo* toUnbox);

VkExportSemaphoreCreateInfo* unbox_VkExportSemaphoreCreateInfo(
    BumpPool* pool,
    const VkExportSemaphoreCreateInfo* toUnbox);

VkPhysicalDeviceExternalSemaphoreInfo* unbox_VkPhysicalDeviceExternalSemaphoreInfo(
    BumpPool* pool,
    const VkPhysicalDeviceExternalSemaphoreInfo* toUnbox);

VkExternalSemaphoreProperties* unbox_VkExternalSemaphoreProperties(
    BumpPool* pool,
    const VkExternalSemaphoreProperties* toUnbox);

VkPhysicalDeviceMaintenance3Properties* unbox_VkPhysicalDeviceMaintenance3Properties(
    BumpPool* pool,
    const VkPhysicalDeviceMaintenance3Properties* toUnbox);

VkDescriptorSetLayoutSupport* unbox_VkDescriptorSetLayoutSupport(
    BumpPool* pool,
    const VkDescriptorSetLayoutSupport* toUnbox);

VkPhysicalDeviceShaderDrawParameterFeatures* unbox_VkPhysicalDeviceShaderDrawParameterFeatures(
    BumpPool* pool,
    const VkPhysicalDeviceShaderDrawParameterFeatures* toUnbox);

#endif
#ifdef VK_KHR_surface
VkSurfaceCapabilitiesKHR* unbox_VkSurfaceCapabilitiesKHR(
    BumpPool* pool,
    const VkSurfaceCapabilitiesKHR* toUnbox);

VkSurfaceFormatKHR* unbox_VkSurfaceFormatKHR(
    BumpPool* pool,
    const VkSurfaceFormatKHR* toUnbox);

#endif
#ifdef VK_KHR_swapchain
VkSwapchainCreateInfoKHR* unbox_VkSwapchainCreateInfoKHR(
    BumpPool* pool,
    const VkSwapchainCreateInfoKHR* toUnbox);

VkPresentInfoKHR* unbox_VkPresentInfoKHR(
    BumpPool* pool,
    const VkPresentInfoKHR* toUnbox);

VkImageSwapchainCreateInfoKHR* unbox_VkImageSwapchainCreateInfoKHR(
    BumpPool* pool,
    const VkImageSwapchainCreateInfoKHR* toUnbox);

VkBindImageMemorySwapchainInfoKHR* unbox_VkBindImageMemorySwapchainInfoKHR(
    BumpPool* pool,
    const VkBindImageMemorySwapchainInfoKHR* toUnbox);

VkAcquireNextImageInfoKHR* unbox_VkAcquireNextImageInfoKHR(
    BumpPool* pool,
    const VkAcquireNextImageInfoKHR* toUnbox);

VkDeviceGroupPresentCapabilitiesKHR* unbox_VkDeviceGroupPresentCapabilitiesKHR(
    BumpPool* pool,
    const VkDeviceGroupPresentCapabilitiesKHR* toUnbox);

VkDeviceGroupPresentInfoKHR* unbox_VkDeviceGroupPresentInfoKHR(
    BumpPool* pool,
    const VkDeviceGroupPresentInfoKHR* toUnbox);

VkDeviceGroupSwapchainCreateInfoKHR* unbox_VkDeviceGroupSwapchainCreateInfoKHR(
    BumpPool* pool,
    const VkDeviceGroupSwapchainCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_display
VkDisplayPropertiesKHR* unbox_VkDisplayPropertiesKHR(
    BumpPool* pool,
    const VkDisplayPropertiesKHR* toUnbox);

VkDisplayModeParametersKHR* unbox_VkDisplayModeParametersKHR(
    BumpPool* pool,
    const VkDisplayModeParametersKHR* toUnbox);

VkDisplayModePropertiesKHR* unbox_VkDisplayModePropertiesKHR(
    BumpPool* pool,
    const VkDisplayModePropertiesKHR* toUnbox);

VkDisplayModeCreateInfoKHR* unbox_VkDisplayModeCreateInfoKHR(
    BumpPool* pool,
    const VkDisplayModeCreateInfoKHR* toUnbox);

VkDisplayPlaneCapabilitiesKHR* unbox_VkDisplayPlaneCapabilitiesKHR(
    BumpPool* pool,
    const VkDisplayPlaneCapabilitiesKHR* toUnbox);

VkDisplayPlanePropertiesKHR* unbox_VkDisplayPlanePropertiesKHR(
    BumpPool* pool,
    const VkDisplayPlanePropertiesKHR* toUnbox);

VkDisplaySurfaceCreateInfoKHR* unbox_VkDisplaySurfaceCreateInfoKHR(
    BumpPool* pool,
    const VkDisplaySurfaceCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_display_swapchain
VkDisplayPresentInfoKHR* unbox_VkDisplayPresentInfoKHR(
    BumpPool* pool,
    const VkDisplayPresentInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_xlib_surface
VkXlibSurfaceCreateInfoKHR* unbox_VkXlibSurfaceCreateInfoKHR(
    BumpPool* pool,
    const VkXlibSurfaceCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_xcb_surface
VkXcbSurfaceCreateInfoKHR* unbox_VkXcbSurfaceCreateInfoKHR(
    BumpPool* pool,
    const VkXcbSurfaceCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_wayland_surface
VkWaylandSurfaceCreateInfoKHR* unbox_VkWaylandSurfaceCreateInfoKHR(
    BumpPool* pool,
    const VkWaylandSurfaceCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_mir_surface
VkMirSurfaceCreateInfoKHR* unbox_VkMirSurfaceCreateInfoKHR(
    BumpPool* pool,
    const VkMirSurfaceCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_android_surface
VkAndroidSurfaceCreateInfoKHR* unbox_VkAndroidSurfaceCreateInfoKHR(
    BumpPool* pool,
    const VkAndroidSurfaceCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_win32_surface
VkWin32SurfaceCreateInfoKHR* unbox_VkWin32SurfaceCreateInfoKHR(
    BumpPool* pool,
    const VkWin32SurfaceCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_sampler_mirror_clamp_to_edge
#endif
#ifdef VK_KHR_multiview
#endif
#ifdef VK_KHR_get_physical_device_properties2
#endif
#ifdef VK_KHR_device_group
#endif
#ifdef VK_KHR_shader_draw_parameters
#endif
#ifdef VK_KHR_maintenance1
#endif
#ifdef VK_KHR_device_group_creation
#endif
#ifdef VK_KHR_external_memory_capabilities
#endif
#ifdef VK_KHR_external_memory
#endif
#ifdef VK_KHR_external_memory_win32
VkImportMemoryWin32HandleInfoKHR* unbox_VkImportMemoryWin32HandleInfoKHR(
    BumpPool* pool,
    const VkImportMemoryWin32HandleInfoKHR* toUnbox);

VkExportMemoryWin32HandleInfoKHR* unbox_VkExportMemoryWin32HandleInfoKHR(
    BumpPool* pool,
    const VkExportMemoryWin32HandleInfoKHR* toUnbox);

VkMemoryWin32HandlePropertiesKHR* unbox_VkMemoryWin32HandlePropertiesKHR(
    BumpPool* pool,
    const VkMemoryWin32HandlePropertiesKHR* toUnbox);

VkMemoryGetWin32HandleInfoKHR* unbox_VkMemoryGetWin32HandleInfoKHR(
    BumpPool* pool,
    const VkMemoryGetWin32HandleInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_external_memory_fd
VkImportMemoryFdInfoKHR* unbox_VkImportMemoryFdInfoKHR(
    BumpPool* pool,
    const VkImportMemoryFdInfoKHR* toUnbox);

VkMemoryFdPropertiesKHR* unbox_VkMemoryFdPropertiesKHR(
    BumpPool* pool,
    const VkMemoryFdPropertiesKHR* toUnbox);

VkMemoryGetFdInfoKHR* unbox_VkMemoryGetFdInfoKHR(
    BumpPool* pool,
    const VkMemoryGetFdInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_win32_keyed_mutex
VkWin32KeyedMutexAcquireReleaseInfoKHR* unbox_VkWin32KeyedMutexAcquireReleaseInfoKHR(
    BumpPool* pool,
    const VkWin32KeyedMutexAcquireReleaseInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_external_semaphore_capabilities
#endif
#ifdef VK_KHR_external_semaphore
#endif
#ifdef VK_KHR_external_semaphore_win32
VkImportSemaphoreWin32HandleInfoKHR* unbox_VkImportSemaphoreWin32HandleInfoKHR(
    BumpPool* pool,
    const VkImportSemaphoreWin32HandleInfoKHR* toUnbox);

VkExportSemaphoreWin32HandleInfoKHR* unbox_VkExportSemaphoreWin32HandleInfoKHR(
    BumpPool* pool,
    const VkExportSemaphoreWin32HandleInfoKHR* toUnbox);

VkD3D12FenceSubmitInfoKHR* unbox_VkD3D12FenceSubmitInfoKHR(
    BumpPool* pool,
    const VkD3D12FenceSubmitInfoKHR* toUnbox);

VkSemaphoreGetWin32HandleInfoKHR* unbox_VkSemaphoreGetWin32HandleInfoKHR(
    BumpPool* pool,
    const VkSemaphoreGetWin32HandleInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_external_semaphore_fd
VkImportSemaphoreFdInfoKHR* unbox_VkImportSemaphoreFdInfoKHR(
    BumpPool* pool,
    const VkImportSemaphoreFdInfoKHR* toUnbox);

VkSemaphoreGetFdInfoKHR* unbox_VkSemaphoreGetFdInfoKHR(
    BumpPool* pool,
    const VkSemaphoreGetFdInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_push_descriptor
VkPhysicalDevicePushDescriptorPropertiesKHR* unbox_VkPhysicalDevicePushDescriptorPropertiesKHR(
    BumpPool* pool,
    const VkPhysicalDevicePushDescriptorPropertiesKHR* toUnbox);

#endif
#ifdef VK_KHR_16bit_storage
#endif
#ifdef VK_KHR_incremental_present
VkRectLayerKHR* unbox_VkRectLayerKHR(
    BumpPool* pool,
    const VkRectLayerKHR* toUnbox);

VkPresentRegionKHR* unbox_VkPresentRegionKHR(
    BumpPool* pool,
    const VkPresentRegionKHR* toUnbox);

VkPresentRegionsKHR* unbox_VkPresentRegionsKHR(
    BumpPool* pool,
    const VkPresentRegionsKHR* toUnbox);

#endif
#ifdef VK_KHR_descriptor_update_template
#endif
#ifdef VK_KHR_create_renderpass2
VkAttachmentDescription2KHR* unbox_VkAttachmentDescription2KHR(
    BumpPool* pool,
    const VkAttachmentDescription2KHR* toUnbox);

VkAttachmentReference2KHR* unbox_VkAttachmentReference2KHR(
    BumpPool* pool,
    const VkAttachmentReference2KHR* toUnbox);

VkSubpassDescription2KHR* unbox_VkSubpassDescription2KHR(
    BumpPool* pool,
    const VkSubpassDescription2KHR* toUnbox);

VkSubpassDependency2KHR* unbox_VkSubpassDependency2KHR(
    BumpPool* pool,
    const VkSubpassDependency2KHR* toUnbox);

VkRenderPassCreateInfo2KHR* unbox_VkRenderPassCreateInfo2KHR(
    BumpPool* pool,
    const VkRenderPassCreateInfo2KHR* toUnbox);

VkSubpassBeginInfoKHR* unbox_VkSubpassBeginInfoKHR(
    BumpPool* pool,
    const VkSubpassBeginInfoKHR* toUnbox);

VkSubpassEndInfoKHR* unbox_VkSubpassEndInfoKHR(
    BumpPool* pool,
    const VkSubpassEndInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_shared_presentable_image
VkSharedPresentSurfaceCapabilitiesKHR* unbox_VkSharedPresentSurfaceCapabilitiesKHR(
    BumpPool* pool,
    const VkSharedPresentSurfaceCapabilitiesKHR* toUnbox);

#endif
#ifdef VK_KHR_external_fence_capabilities
#endif
#ifdef VK_KHR_external_fence
#endif
#ifdef VK_KHR_external_fence_win32
VkImportFenceWin32HandleInfoKHR* unbox_VkImportFenceWin32HandleInfoKHR(
    BumpPool* pool,
    const VkImportFenceWin32HandleInfoKHR* toUnbox);

VkExportFenceWin32HandleInfoKHR* unbox_VkExportFenceWin32HandleInfoKHR(
    BumpPool* pool,
    const VkExportFenceWin32HandleInfoKHR* toUnbox);

VkFenceGetWin32HandleInfoKHR* unbox_VkFenceGetWin32HandleInfoKHR(
    BumpPool* pool,
    const VkFenceGetWin32HandleInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_external_fence_fd
VkImportFenceFdInfoKHR* unbox_VkImportFenceFdInfoKHR(
    BumpPool* pool,
    const VkImportFenceFdInfoKHR* toUnbox);

VkFenceGetFdInfoKHR* unbox_VkFenceGetFdInfoKHR(
    BumpPool* pool,
    const VkFenceGetFdInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_maintenance2
#endif
#ifdef VK_KHR_get_surface_capabilities2
VkPhysicalDeviceSurfaceInfo2KHR* unbox_VkPhysicalDeviceSurfaceInfo2KHR(
    BumpPool* pool,
    const VkPhysicalDeviceSurfaceInfo2KHR* toUnbox);

VkSurfaceCapabilities2KHR* unbox_VkSurfaceCapabilities2KHR(
    BumpPool* pool,
    const VkSurfaceCapabilities2KHR* toUnbox);

VkSurfaceFormat2KHR* unbox_VkSurfaceFormat2KHR(
    BumpPool* pool,
    const VkSurfaceFormat2KHR* toUnbox);

#endif
#ifdef VK_KHR_variable_pointers
#endif
#ifdef VK_KHR_get_display_properties2
VkDisplayProperties2KHR* unbox_VkDisplayProperties2KHR(
    BumpPool* pool,
    const VkDisplayProperties2KHR* toUnbox);

VkDisplayPlaneProperties2KHR* unbox_VkDisplayPlaneProperties2KHR(
    BumpPool* pool,
    const VkDisplayPlaneProperties2KHR* toUnbox);

VkDisplayModeProperties2KHR* unbox_VkDisplayModeProperties2KHR(
    BumpPool* pool,
    const VkDisplayModeProperties2KHR* toUnbox);

VkDisplayPlaneInfo2KHR* unbox_VkDisplayPlaneInfo2KHR(
    BumpPool* pool,
    const VkDisplayPlaneInfo2KHR* toUnbox);

VkDisplayPlaneCapabilities2KHR* unbox_VkDisplayPlaneCapabilities2KHR(
    BumpPool* pool,
    const VkDisplayPlaneCapabilities2KHR* toUnbox);

#endif
#ifdef VK_KHR_dedicated_allocation
#endif
#ifdef VK_KHR_storage_buffer_storage_class
#endif
#ifdef VK_KHR_relaxed_block_layout
#endif
#ifdef VK_KHR_get_memory_requirements2
#endif
#ifdef VK_KHR_image_format_list
VkImageFormatListCreateInfoKHR* unbox_VkImageFormatListCreateInfoKHR(
    BumpPool* pool,
    const VkImageFormatListCreateInfoKHR* toUnbox);

#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
#endif
#ifdef VK_KHR_bind_memory2
#endif
#ifdef VK_KHR_maintenance3
#endif
#ifdef VK_KHR_draw_indirect_count
#endif
#ifdef VK_KHR_8bit_storage
VkPhysicalDevice8BitStorageFeaturesKHR* unbox_VkPhysicalDevice8BitStorageFeaturesKHR(
    BumpPool* pool,
    const VkPhysicalDevice8BitStorageFeaturesKHR* toUnbox);

#endif
#ifdef VK_KHR_shader_float16_int8
VkPhysicalDeviceShaderFloat16Int8Features* unbox_VkPhysicalDeviceShaderFloat16Int8Features(
    BumpPool* pool,
    const VkPhysicalDeviceShaderFloat16Int8Features* toUnbox);

#endif
#ifdef VK_ANDROID_native_buffer
VkNativeBufferANDROID* unbox_VkNativeBufferANDROID(
    BumpPool* pool,
    const VkNativeBufferANDROID* toUnbox);

#endif
#ifdef VK_EXT_debug_report
VkDebugReportCallbackCreateInfoEXT* unbox_VkDebugReportCallbackCreateInfoEXT(
    BumpPool* pool,
    const VkDebugReportCallbackCreateInfoEXT* toUnbox);

#endif
#ifdef VK_NV_glsl_shader
#endif
#ifdef VK_EXT_depth_range_unrestricted
#endif
#ifdef VK_IMG_filter_cubic
#endif
#ifdef VK_AMD_rasterization_order
VkPipelineRasterizationStateRasterizationOrderAMD* unbox_VkPipelineRasterizationStateRasterizationOrderAMD(
    BumpPool* pool,
    const VkPipelineRasterizationStateRasterizationOrderAMD* toUnbox);

#endif
#ifdef VK_AMD_shader_trinary_minmax
#endif
#ifdef VK_AMD_shader_explicit_vertex_parameter
#endif
#ifdef VK_EXT_debug_marker
VkDebugMarkerObjectNameInfoEXT* unbox_VkDebugMarkerObjectNameInfoEXT(
    BumpPool* pool,
    const VkDebugMarkerObjectNameInfoEXT* toUnbox);

VkDebugMarkerObjectTagInfoEXT* unbox_VkDebugMarkerObjectTagInfoEXT(
    BumpPool* pool,
    const VkDebugMarkerObjectTagInfoEXT* toUnbox);

VkDebugMarkerMarkerInfoEXT* unbox_VkDebugMarkerMarkerInfoEXT(
    BumpPool* pool,
    const VkDebugMarkerMarkerInfoEXT* toUnbox);

#endif
#ifdef VK_AMD_gcn_shader
#endif
#ifdef VK_NV_dedicated_allocation
VkDedicatedAllocationImageCreateInfoNV* unbox_VkDedicatedAllocationImageCreateInfoNV(
    BumpPool* pool,
    const VkDedicatedAllocationImageCreateInfoNV* toUnbox);

VkDedicatedAllocationBufferCreateInfoNV* unbox_VkDedicatedAllocationBufferCreateInfoNV(
    BumpPool* pool,
    const VkDedicatedAllocationBufferCreateInfoNV* toUnbox);

VkDedicatedAllocationMemoryAllocateInfoNV* unbox_VkDedicatedAllocationMemoryAllocateInfoNV(
    BumpPool* pool,
    const VkDedicatedAllocationMemoryAllocateInfoNV* toUnbox);

#endif
#ifdef VK_AMD_draw_indirect_count
#endif
#ifdef VK_AMD_negative_viewport_height
#endif
#ifdef VK_AMD_gpu_shader_half_float
#endif
#ifdef VK_AMD_shader_ballot
#endif
#ifdef VK_AMD_texture_gather_bias_lod
VkTextureLODGatherFormatPropertiesAMD* unbox_VkTextureLODGatherFormatPropertiesAMD(
    BumpPool* pool,
    const VkTextureLODGatherFormatPropertiesAMD* toUnbox);

#endif
#ifdef VK_AMD_shader_info
VkShaderResourceUsageAMD* unbox_VkShaderResourceUsageAMD(
    BumpPool* pool,
    const VkShaderResourceUsageAMD* toUnbox);

VkShaderStatisticsInfoAMD* unbox_VkShaderStatisticsInfoAMD(
    BumpPool* pool,
    const VkShaderStatisticsInfoAMD* toUnbox);

#endif
#ifdef VK_AMD_shader_image_load_store_lod
#endif
#ifdef VK_IMG_format_pvrtc
#endif
#ifdef VK_NV_external_memory_capabilities
VkExternalImageFormatPropertiesNV* unbox_VkExternalImageFormatPropertiesNV(
    BumpPool* pool,
    const VkExternalImageFormatPropertiesNV* toUnbox);

#endif
#ifdef VK_NV_external_memory
VkExternalMemoryImageCreateInfoNV* unbox_VkExternalMemoryImageCreateInfoNV(
    BumpPool* pool,
    const VkExternalMemoryImageCreateInfoNV* toUnbox);

VkExportMemoryAllocateInfoNV* unbox_VkExportMemoryAllocateInfoNV(
    BumpPool* pool,
    const VkExportMemoryAllocateInfoNV* toUnbox);

#endif
#ifdef VK_NV_external_memory_win32
VkImportMemoryWin32HandleInfoNV* unbox_VkImportMemoryWin32HandleInfoNV(
    BumpPool* pool,
    const VkImportMemoryWin32HandleInfoNV* toUnbox);

VkExportMemoryWin32HandleInfoNV* unbox_VkExportMemoryWin32HandleInfoNV(
    BumpPool* pool,
    const VkExportMemoryWin32HandleInfoNV* toUnbox);

#endif
#ifdef VK_NV_win32_keyed_mutex
VkWin32KeyedMutexAcquireReleaseInfoNV* unbox_VkWin32KeyedMutexAcquireReleaseInfoNV(
    BumpPool* pool,
    const VkWin32KeyedMutexAcquireReleaseInfoNV* toUnbox);

#endif
#ifdef VK_EXT_validation_flags
VkValidationFlagsEXT* unbox_VkValidationFlagsEXT(
    BumpPool* pool,
    const VkValidationFlagsEXT* toUnbox);

#endif
#ifdef VK_NN_vi_surface
VkViSurfaceCreateInfoNN* unbox_VkViSurfaceCreateInfoNN(
    BumpPool* pool,
    const VkViSurfaceCreateInfoNN* toUnbox);

#endif
#ifdef VK_EXT_shader_subgroup_ballot
#endif
#ifdef VK_EXT_shader_subgroup_vote
#endif
#ifdef VK_EXT_conditional_rendering
VkConditionalRenderingBeginInfoEXT* unbox_VkConditionalRenderingBeginInfoEXT(
    BumpPool* pool,
    const VkConditionalRenderingBeginInfoEXT* toUnbox);

VkPhysicalDeviceConditionalRenderingFeaturesEXT* unbox_VkPhysicalDeviceConditionalRenderingFeaturesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceConditionalRenderingFeaturesEXT* toUnbox);

VkCommandBufferInheritanceConditionalRenderingInfoEXT* unbox_VkCommandBufferInheritanceConditionalRenderingInfoEXT(
    BumpPool* pool,
    const VkCommandBufferInheritanceConditionalRenderingInfoEXT* toUnbox);

#endif
#ifdef VK_NVX_device_generated_commands
VkDeviceGeneratedCommandsFeaturesNVX* unbox_VkDeviceGeneratedCommandsFeaturesNVX(
    BumpPool* pool,
    const VkDeviceGeneratedCommandsFeaturesNVX* toUnbox);

VkDeviceGeneratedCommandsLimitsNVX* unbox_VkDeviceGeneratedCommandsLimitsNVX(
    BumpPool* pool,
    const VkDeviceGeneratedCommandsLimitsNVX* toUnbox);

VkIndirectCommandsTokenNVX* unbox_VkIndirectCommandsTokenNVX(
    BumpPool* pool,
    const VkIndirectCommandsTokenNVX* toUnbox);

VkIndirectCommandsLayoutTokenNVX* unbox_VkIndirectCommandsLayoutTokenNVX(
    BumpPool* pool,
    const VkIndirectCommandsLayoutTokenNVX* toUnbox);

VkIndirectCommandsLayoutCreateInfoNVX* unbox_VkIndirectCommandsLayoutCreateInfoNVX(
    BumpPool* pool,
    const VkIndirectCommandsLayoutCreateInfoNVX* toUnbox);

VkCmdProcessCommandsInfoNVX* unbox_VkCmdProcessCommandsInfoNVX(
    BumpPool* pool,
    const VkCmdProcessCommandsInfoNVX* toUnbox);

VkCmdReserveSpaceForCommandsInfoNVX* unbox_VkCmdReserveSpaceForCommandsInfoNVX(
    BumpPool* pool,
    const VkCmdReserveSpaceForCommandsInfoNVX* toUnbox);

VkObjectTableCreateInfoNVX* unbox_VkObjectTableCreateInfoNVX(
    BumpPool* pool,
    const VkObjectTableCreateInfoNVX* toUnbox);

VkObjectTableEntryNVX* unbox_VkObjectTableEntryNVX(
    BumpPool* pool,
    const VkObjectTableEntryNVX* toUnbox);

VkObjectTablePipelineEntryNVX* unbox_VkObjectTablePipelineEntryNVX(
    BumpPool* pool,
    const VkObjectTablePipelineEntryNVX* toUnbox);

VkObjectTableDescriptorSetEntryNVX* unbox_VkObjectTableDescriptorSetEntryNVX(
    BumpPool* pool,
    const VkObjectTableDescriptorSetEntryNVX* toUnbox);

VkObjectTableVertexBufferEntryNVX* unbox_VkObjectTableVertexBufferEntryNVX(
    BumpPool* pool,
    const VkObjectTableVertexBufferEntryNVX* toUnbox);

VkObjectTableIndexBufferEntryNVX* unbox_VkObjectTableIndexBufferEntryNVX(
    BumpPool* pool,
    const VkObjectTableIndexBufferEntryNVX* toUnbox);

VkObjectTablePushConstantEntryNVX* unbox_VkObjectTablePushConstantEntryNVX(
    BumpPool* pool,
    const VkObjectTablePushConstantEntryNVX* toUnbox);

#endif
#ifdef VK_NV_clip_space_w_scaling
VkViewportWScalingNV* unbox_VkViewportWScalingNV(
    BumpPool* pool,
    const VkViewportWScalingNV* toUnbox);

VkPipelineViewportWScalingStateCreateInfoNV* unbox_VkPipelineViewportWScalingStateCreateInfoNV(
    BumpPool* pool,
    const VkPipelineViewportWScalingStateCreateInfoNV* toUnbox);

#endif
#ifdef VK_EXT_direct_mode_display
#endif
#ifdef VK_EXT_acquire_xlib_display
#endif
#ifdef VK_EXT_display_surface_counter
VkSurfaceCapabilities2EXT* unbox_VkSurfaceCapabilities2EXT(
    BumpPool* pool,
    const VkSurfaceCapabilities2EXT* toUnbox);

#endif
#ifdef VK_EXT_display_control
VkDisplayPowerInfoEXT* unbox_VkDisplayPowerInfoEXT(
    BumpPool* pool,
    const VkDisplayPowerInfoEXT* toUnbox);

VkDeviceEventInfoEXT* unbox_VkDeviceEventInfoEXT(
    BumpPool* pool,
    const VkDeviceEventInfoEXT* toUnbox);

VkDisplayEventInfoEXT* unbox_VkDisplayEventInfoEXT(
    BumpPool* pool,
    const VkDisplayEventInfoEXT* toUnbox);

VkSwapchainCounterCreateInfoEXT* unbox_VkSwapchainCounterCreateInfoEXT(
    BumpPool* pool,
    const VkSwapchainCounterCreateInfoEXT* toUnbox);

#endif
#ifdef VK_GOOGLE_display_timing
VkRefreshCycleDurationGOOGLE* unbox_VkRefreshCycleDurationGOOGLE(
    BumpPool* pool,
    const VkRefreshCycleDurationGOOGLE* toUnbox);

VkPastPresentationTimingGOOGLE* unbox_VkPastPresentationTimingGOOGLE(
    BumpPool* pool,
    const VkPastPresentationTimingGOOGLE* toUnbox);

VkPresentTimeGOOGLE* unbox_VkPresentTimeGOOGLE(
    BumpPool* pool,
    const VkPresentTimeGOOGLE* toUnbox);

VkPresentTimesInfoGOOGLE* unbox_VkPresentTimesInfoGOOGLE(
    BumpPool* pool,
    const VkPresentTimesInfoGOOGLE* toUnbox);

#endif
#ifdef VK_NV_sample_mask_override_coverage
#endif
#ifdef VK_NV_geometry_shader_passthrough
#endif
#ifdef VK_NV_viewport_array2
#endif
#ifdef VK_NVX_multiview_per_view_attributes
VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* unbox_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX(
    BumpPool* pool,
    const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX* toUnbox);

#endif
#ifdef VK_NV_viewport_swizzle
VkViewportSwizzleNV* unbox_VkViewportSwizzleNV(
    BumpPool* pool,
    const VkViewportSwizzleNV* toUnbox);

VkPipelineViewportSwizzleStateCreateInfoNV* unbox_VkPipelineViewportSwizzleStateCreateInfoNV(
    BumpPool* pool,
    const VkPipelineViewportSwizzleStateCreateInfoNV* toUnbox);

#endif
#ifdef VK_EXT_discard_rectangles
VkPhysicalDeviceDiscardRectanglePropertiesEXT* unbox_VkPhysicalDeviceDiscardRectanglePropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceDiscardRectanglePropertiesEXT* toUnbox);

VkPipelineDiscardRectangleStateCreateInfoEXT* unbox_VkPipelineDiscardRectangleStateCreateInfoEXT(
    BumpPool* pool,
    const VkPipelineDiscardRectangleStateCreateInfoEXT* toUnbox);

#endif
#ifdef VK_EXT_conservative_rasterization
VkPhysicalDeviceConservativeRasterizationPropertiesEXT* unbox_VkPhysicalDeviceConservativeRasterizationPropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceConservativeRasterizationPropertiesEXT* toUnbox);

VkPipelineRasterizationConservativeStateCreateInfoEXT* unbox_VkPipelineRasterizationConservativeStateCreateInfoEXT(
    BumpPool* pool,
    const VkPipelineRasterizationConservativeStateCreateInfoEXT* toUnbox);

#endif
#ifdef VK_EXT_swapchain_colorspace
#endif
#ifdef VK_EXT_hdr_metadata
VkXYColorEXT* unbox_VkXYColorEXT(
    BumpPool* pool,
    const VkXYColorEXT* toUnbox);

VkHdrMetadataEXT* unbox_VkHdrMetadataEXT(
    BumpPool* pool,
    const VkHdrMetadataEXT* toUnbox);

#endif
#ifdef VK_MVK_ios_surface
VkIOSSurfaceCreateInfoMVK* unbox_VkIOSSurfaceCreateInfoMVK(
    BumpPool* pool,
    const VkIOSSurfaceCreateInfoMVK* toUnbox);

#endif
#ifdef VK_MVK_macos_surface
VkMacOSSurfaceCreateInfoMVK* unbox_VkMacOSSurfaceCreateInfoMVK(
    BumpPool* pool,
    const VkMacOSSurfaceCreateInfoMVK* toUnbox);

#endif
#ifdef VK_EXT_external_memory_dma_buf
#endif
#ifdef VK_EXT_queue_family_foreign
#endif
#ifdef VK_EXT_debug_utils
VkDebugUtilsObjectNameInfoEXT* unbox_VkDebugUtilsObjectNameInfoEXT(
    BumpPool* pool,
    const VkDebugUtilsObjectNameInfoEXT* toUnbox);

VkDebugUtilsObjectTagInfoEXT* unbox_VkDebugUtilsObjectTagInfoEXT(
    BumpPool* pool,
    const VkDebugUtilsObjectTagInfoEXT* toUnbox);

VkDebugUtilsLabelEXT* unbox_VkDebugUtilsLabelEXT(
    BumpPool* pool,
    const VkDebugUtilsLabelEXT* toUnbox);

VkDebugUtilsMessengerCallbackDataEXT* unbox_VkDebugUtilsMessengerCallbackDataEXT(
    BumpPool* pool,
    const VkDebugUtilsMessengerCallbackDataEXT* toUnbox);

VkDebugUtilsMessengerCreateInfoEXT* unbox_VkDebugUtilsMessengerCreateInfoEXT(
    BumpPool* pool,
    const VkDebugUtilsMessengerCreateInfoEXT* toUnbox);

#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
VkAndroidHardwareBufferUsageANDROID* unbox_VkAndroidHardwareBufferUsageANDROID(
    BumpPool* pool,
    const VkAndroidHardwareBufferUsageANDROID* toUnbox);

VkAndroidHardwareBufferPropertiesANDROID* unbox_VkAndroidHardwareBufferPropertiesANDROID(
    BumpPool* pool,
    const VkAndroidHardwareBufferPropertiesANDROID* toUnbox);

VkAndroidHardwareBufferFormatPropertiesANDROID* unbox_VkAndroidHardwareBufferFormatPropertiesANDROID(
    BumpPool* pool,
    const VkAndroidHardwareBufferFormatPropertiesANDROID* toUnbox);

VkImportAndroidHardwareBufferInfoANDROID* unbox_VkImportAndroidHardwareBufferInfoANDROID(
    BumpPool* pool,
    const VkImportAndroidHardwareBufferInfoANDROID* toUnbox);

VkMemoryGetAndroidHardwareBufferInfoANDROID* unbox_VkMemoryGetAndroidHardwareBufferInfoANDROID(
    BumpPool* pool,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* toUnbox);

VkExternalFormatANDROID* unbox_VkExternalFormatANDROID(
    BumpPool* pool,
    const VkExternalFormatANDROID* toUnbox);

#endif
#ifdef VK_EXT_sampler_filter_minmax
VkSamplerReductionModeCreateInfoEXT* unbox_VkSamplerReductionModeCreateInfoEXT(
    BumpPool* pool,
    const VkSamplerReductionModeCreateInfoEXT* toUnbox);

VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* unbox_VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT* toUnbox);

#endif
#ifdef VK_AMD_gpu_shader_int16
#endif
#ifdef VK_AMD_mixed_attachment_samples
#endif
#ifdef VK_AMD_shader_fragment_mask
#endif
#ifdef VK_EXT_shader_stencil_export
#endif
#ifdef VK_EXT_sample_locations
VkSampleLocationEXT* unbox_VkSampleLocationEXT(
    BumpPool* pool,
    const VkSampleLocationEXT* toUnbox);

VkSampleLocationsInfoEXT* unbox_VkSampleLocationsInfoEXT(
    BumpPool* pool,
    const VkSampleLocationsInfoEXT* toUnbox);

VkAttachmentSampleLocationsEXT* unbox_VkAttachmentSampleLocationsEXT(
    BumpPool* pool,
    const VkAttachmentSampleLocationsEXT* toUnbox);

VkSubpassSampleLocationsEXT* unbox_VkSubpassSampleLocationsEXT(
    BumpPool* pool,
    const VkSubpassSampleLocationsEXT* toUnbox);

VkRenderPassSampleLocationsBeginInfoEXT* unbox_VkRenderPassSampleLocationsBeginInfoEXT(
    BumpPool* pool,
    const VkRenderPassSampleLocationsBeginInfoEXT* toUnbox);

VkPipelineSampleLocationsStateCreateInfoEXT* unbox_VkPipelineSampleLocationsStateCreateInfoEXT(
    BumpPool* pool,
    const VkPipelineSampleLocationsStateCreateInfoEXT* toUnbox);

VkPhysicalDeviceSampleLocationsPropertiesEXT* unbox_VkPhysicalDeviceSampleLocationsPropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceSampleLocationsPropertiesEXT* toUnbox);

VkMultisamplePropertiesEXT* unbox_VkMultisamplePropertiesEXT(
    BumpPool* pool,
    const VkMultisamplePropertiesEXT* toUnbox);

#endif
#ifdef VK_EXT_blend_operation_advanced
VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* unbox_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT* toUnbox);

VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* unbox_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT* toUnbox);

VkPipelineColorBlendAdvancedStateCreateInfoEXT* unbox_VkPipelineColorBlendAdvancedStateCreateInfoEXT(
    BumpPool* pool,
    const VkPipelineColorBlendAdvancedStateCreateInfoEXT* toUnbox);

#endif
#ifdef VK_NV_fragment_coverage_to_color
VkPipelineCoverageToColorStateCreateInfoNV* unbox_VkPipelineCoverageToColorStateCreateInfoNV(
    BumpPool* pool,
    const VkPipelineCoverageToColorStateCreateInfoNV* toUnbox);

#endif
#ifdef VK_NV_framebuffer_mixed_samples
VkPipelineCoverageModulationStateCreateInfoNV* unbox_VkPipelineCoverageModulationStateCreateInfoNV(
    BumpPool* pool,
    const VkPipelineCoverageModulationStateCreateInfoNV* toUnbox);

#endif
#ifdef VK_NV_fill_rectangle
#endif
#ifdef VK_EXT_post_depth_coverage
#endif
#ifdef VK_EXT_validation_cache
VkValidationCacheCreateInfoEXT* unbox_VkValidationCacheCreateInfoEXT(
    BumpPool* pool,
    const VkValidationCacheCreateInfoEXT* toUnbox);

VkShaderModuleValidationCacheCreateInfoEXT* unbox_VkShaderModuleValidationCacheCreateInfoEXT(
    BumpPool* pool,
    const VkShaderModuleValidationCacheCreateInfoEXT* toUnbox);

#endif
#ifdef VK_EXT_descriptor_indexing
VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* unbox_VkDescriptorSetLayoutBindingFlagsCreateInfoEXT(
    BumpPool* pool,
    const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT* toUnbox);

VkPhysicalDeviceDescriptorIndexingFeaturesEXT* unbox_VkPhysicalDeviceDescriptorIndexingFeaturesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceDescriptorIndexingFeaturesEXT* toUnbox);

VkPhysicalDeviceDescriptorIndexingPropertiesEXT* unbox_VkPhysicalDeviceDescriptorIndexingPropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceDescriptorIndexingPropertiesEXT* toUnbox);

VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* unbox_VkDescriptorSetVariableDescriptorCountAllocateInfoEXT(
    BumpPool* pool,
    const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT* toUnbox);

VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* unbox_VkDescriptorSetVariableDescriptorCountLayoutSupportEXT(
    BumpPool* pool,
    const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT* toUnbox);

#endif
#ifdef VK_EXT_shader_viewport_index_layer
#endif
#ifdef VK_EXT_global_priority
VkDeviceQueueGlobalPriorityCreateInfoEXT* unbox_VkDeviceQueueGlobalPriorityCreateInfoEXT(
    BumpPool* pool,
    const VkDeviceQueueGlobalPriorityCreateInfoEXT* toUnbox);

#endif
#ifdef VK_EXT_external_memory_host
VkImportMemoryHostPointerInfoEXT* unbox_VkImportMemoryHostPointerInfoEXT(
    BumpPool* pool,
    const VkImportMemoryHostPointerInfoEXT* toUnbox);

VkMemoryHostPointerPropertiesEXT* unbox_VkMemoryHostPointerPropertiesEXT(
    BumpPool* pool,
    const VkMemoryHostPointerPropertiesEXT* toUnbox);

VkPhysicalDeviceExternalMemoryHostPropertiesEXT* unbox_VkPhysicalDeviceExternalMemoryHostPropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceExternalMemoryHostPropertiesEXT* toUnbox);

#endif
#ifdef VK_AMD_buffer_marker
#endif
#ifdef VK_AMD_shader_core_properties
VkPhysicalDeviceShaderCorePropertiesAMD* unbox_VkPhysicalDeviceShaderCorePropertiesAMD(
    BumpPool* pool,
    const VkPhysicalDeviceShaderCorePropertiesAMD* toUnbox);

#endif
#ifdef VK_EXT_vertex_attribute_divisor
VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* unbox_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT(
    BumpPool* pool,
    const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT* toUnbox);

VkVertexInputBindingDivisorDescriptionEXT* unbox_VkVertexInputBindingDivisorDescriptionEXT(
    BumpPool* pool,
    const VkVertexInputBindingDivisorDescriptionEXT* toUnbox);

VkPipelineVertexInputDivisorStateCreateInfoEXT* unbox_VkPipelineVertexInputDivisorStateCreateInfoEXT(
    BumpPool* pool,
    const VkPipelineVertexInputDivisorStateCreateInfoEXT* toUnbox);

#endif
#ifdef VK_NV_shader_subgroup_partitioned
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
VkQueueFamilyCheckpointPropertiesNV* unbox_VkQueueFamilyCheckpointPropertiesNV(
    BumpPool* pool,
    const VkQueueFamilyCheckpointPropertiesNV* toUnbox);

VkCheckpointDataNV* unbox_VkCheckpointDataNV(
    BumpPool* pool,
    const VkCheckpointDataNV* toUnbox);

#endif
#ifdef VK_GOOGLE_address_space
#endif
#ifdef VK_GOOGLE_color_buffer
VkImportColorBufferGOOGLE* unbox_VkImportColorBufferGOOGLE(
    BumpPool* pool,
    const VkImportColorBufferGOOGLE* toUnbox);

VkImportBufferGOOGLE* unbox_VkImportBufferGOOGLE(
    BumpPool* pool,
    const VkImportBufferGOOGLE* toUnbox);

VkImportPhysicalAddressGOOGLE* unbox_VkImportPhysicalAddressGOOGLE(
    BumpPool* pool,
    const VkImportPhysicalAddressGOOGLE* toUnbox);

#endif
#ifdef VK_GOOGLE_sized_descriptor_update_template
#endif
#ifdef VK_GOOGLE_async_command_buffers
#endif
#ifdef VK_GOOGLE_create_resources_with_requirements
#endif
#ifdef VK_GOOGLE_address_space_info
#endif
#ifdef VK_GOOGLE_free_memory_sync
#endif
#ifdef VK_GOOGLE_async_queue_submit
#endif
#ifdef VK_GOOGLE_linear_image_layout
#endif

} // namespace goldfish_vk
