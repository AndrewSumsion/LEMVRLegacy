// Module: goldfish_vk_encoder (impl) Autogenerated by CerealGenerator

#ifdef VK_VERSION_1_0

VkResult encode_vkCreateInstance(
    void* vkStream,
    const VkInstanceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance* pInstance)
{
    return (VkResult)0;
}

void encode_vkDestroyInstance(
    void* vkStream,
    VkInstance instance,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkEnumeratePhysicalDevices(
    void* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices)
{
    return (VkResult)0;
}

void encode_vkGetPhysicalDeviceFeatures(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures)
{
}

void encode_vkGetPhysicalDeviceFormatProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties)
{
}

VkResult encode_vkGetPhysicalDeviceImageFormatProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties)
{
    return (VkResult)0;
}

void encode_vkGetPhysicalDeviceProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties)
{
}

void encode_vkGetPhysicalDeviceQueueFamilyProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties)
{
}

void encode_vkGetPhysicalDeviceMemoryProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties)
{
}

PFN_vkVoidFunction encode_vkGetInstanceProcAddr(
    void* vkStream,
    VkInstance instance,
    const char* pName)
{
    return (PFN_vkVoidFunction)0;
}

PFN_vkVoidFunction encode_vkGetDeviceProcAddr(
    void* vkStream,
    VkDevice device,
    const char* pName)
{
    return (PFN_vkVoidFunction)0;
}

VkResult encode_vkCreateDevice(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkDeviceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice* pDevice)
{
    return (VkResult)0;
}

void encode_vkDestroyDevice(
    void* vkStream,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkEnumerateInstanceExtensionProperties(
    void* vkStream,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkEnumerateDeviceExtensionProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkEnumerateInstanceLayerProperties(
    void* vkStream,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkEnumerateDeviceLayerProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    return (VkResult)0;
}

void encode_vkGetDeviceQueue(
    void* vkStream,
    VkDevice device,
    uint32_t queueFamilyIndex,
    uint32_t queueIndex,
    VkQueue* pQueue)
{
}

VkResult encode_vkQueueSubmit(
    void* vkStream,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence)
{
    return (VkResult)0;
}

VkResult encode_vkQueueWaitIdle(
    void* vkStream,
    VkQueue queue)
{
    return (VkResult)0;
}

VkResult encode_vkDeviceWaitIdle(
    void* vkStream,
    VkDevice device)
{
    return (VkResult)0;
}

VkResult encode_vkAllocateMemory(
    void* vkStream,
    VkDevice device,
    const VkMemoryAllocateInfo* pAllocateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDeviceMemory* pMemory)
{
    return (VkResult)0;
}

void encode_vkFreeMemory(
    void* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkMapMemory(
    void* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData)
{
    return (VkResult)0;
}

void encode_vkUnmapMemory(
    void* vkStream,
    VkDevice device,
    VkDeviceMemory memory)
{
}

VkResult encode_vkFlushMappedMemoryRanges(
    void* vkStream,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    return (VkResult)0;
}

VkResult encode_vkInvalidateMappedMemoryRanges(
    void* vkStream,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    return (VkResult)0;
}

void encode_vkGetDeviceMemoryCommitment(
    void* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes)
{
}

VkResult encode_vkBindBufferMemory(
    void* vkStream,
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    return (VkResult)0;
}

VkResult encode_vkBindImageMemory(
    void* vkStream,
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    return (VkResult)0;
}

void encode_vkGetBufferMemoryRequirements(
    void* vkStream,
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements)
{
}

void encode_vkGetImageMemoryRequirements(
    void* vkStream,
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements)
{
}

void encode_vkGetImageSparseMemoryRequirements(
    void* vkStream,
    VkDevice device,
    VkImage image,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
{
}

void encode_vkGetPhysicalDeviceSparseImageFormatProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties* pProperties)
{
}

VkResult encode_vkQueueBindSparse(
    void* vkStream,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence)
{
    return (VkResult)0;
}

VkResult encode_vkCreateFence(
    void* vkStream,
    VkDevice device,
    const VkFenceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    return (VkResult)0;
}

void encode_vkDestroyFence(
    void* vkStream,
    VkDevice device,
    VkFence fence,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkResetFences(
    void* vkStream,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences)
{
    return (VkResult)0;
}

VkResult encode_vkGetFenceStatus(
    void* vkStream,
    VkDevice device,
    VkFence fence)
{
    return (VkResult)0;
}

VkResult encode_vkWaitForFences(
    void* vkStream,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences,
    VkBool32 waitAll,
    uint64_t timeout)
{
    return (VkResult)0;
}

VkResult encode_vkCreateSemaphore(
    void* vkStream,
    VkDevice device,
    const VkSemaphoreCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSemaphore* pSemaphore)
{
    return (VkResult)0;
}

void encode_vkDestroySemaphore(
    void* vkStream,
    VkDevice device,
    VkSemaphore semaphore,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateEvent(
    void* vkStream,
    VkDevice device,
    const VkEventCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkEvent* pEvent)
{
    return (VkResult)0;
}

void encode_vkDestroyEvent(
    void* vkStream,
    VkDevice device,
    VkEvent event,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkGetEventStatus(
    void* vkStream,
    VkDevice device,
    VkEvent event)
{
    return (VkResult)0;
}

VkResult encode_vkSetEvent(
    void* vkStream,
    VkDevice device,
    VkEvent event)
{
    return (VkResult)0;
}

VkResult encode_vkResetEvent(
    void* vkStream,
    VkDevice device,
    VkEvent event)
{
    return (VkResult)0;
}

VkResult encode_vkCreateQueryPool(
    void* vkStream,
    VkDevice device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkQueryPool* pQueryPool)
{
    return (VkResult)0;
}

void encode_vkDestroyQueryPool(
    void* vkStream,
    VkDevice device,
    VkQueryPool queryPool,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkGetQueryPoolResults(
    void* vkStream,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    return (VkResult)0;
}

VkResult encode_vkCreateBuffer(
    void* vkStream,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer)
{
    return (VkResult)0;
}

void encode_vkDestroyBuffer(
    void* vkStream,
    VkDevice device,
    VkBuffer buffer,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateBufferView(
    void* vkStream,
    VkDevice device,
    const VkBufferViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferView* pView)
{
    return (VkResult)0;
}

void encode_vkDestroyBufferView(
    void* vkStream,
    VkDevice device,
    VkBufferView bufferView,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateImage(
    void* vkStream,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage)
{
    return (VkResult)0;
}

void encode_vkDestroyImage(
    void* vkStream,
    VkDevice device,
    VkImage image,
    const VkAllocationCallbacks* pAllocator)
{
}

void encode_vkGetImageSubresourceLayout(
    void* vkStream,
    VkDevice device,
    VkImage image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout* pLayout)
{
}

VkResult encode_vkCreateImageView(
    void* vkStream,
    VkDevice device,
    const VkImageViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImageView* pView)
{
    return (VkResult)0;
}

void encode_vkDestroyImageView(
    void* vkStream,
    VkDevice device,
    VkImageView imageView,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateShaderModule(
    void* vkStream,
    VkDevice device,
    const VkShaderModuleCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkShaderModule* pShaderModule)
{
    return (VkResult)0;
}

void encode_vkDestroyShaderModule(
    void* vkStream,
    VkDevice device,
    VkShaderModule shaderModule,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreatePipelineCache(
    void* vkStream,
    VkDevice device,
    const VkPipelineCacheCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineCache* pPipelineCache)
{
    return (VkResult)0;
}

void encode_vkDestroyPipelineCache(
    void* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkGetPipelineCacheData(
    void* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData)
{
    return (VkResult)0;
}

VkResult encode_vkMergePipelineCaches(
    void* vkStream,
    VkDevice device,
    VkPipelineCache dstCache,
    uint32_t srcCacheCount,
    const VkPipelineCache* pSrcCaches)
{
    return (VkResult)0;
}

VkResult encode_vkCreateGraphicsPipelines(
    void* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    return (VkResult)0;
}

VkResult encode_vkCreateComputePipelines(
    void* vkStream,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkComputePipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    return (VkResult)0;
}

void encode_vkDestroyPipeline(
    void* vkStream,
    VkDevice device,
    VkPipeline pipeline,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreatePipelineLayout(
    void* vkStream,
    VkDevice device,
    const VkPipelineLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineLayout* pPipelineLayout)
{
    return (VkResult)0;
}

void encode_vkDestroyPipelineLayout(
    void* vkStream,
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateSampler(
    void* vkStream,
    VkDevice device,
    const VkSamplerCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSampler* pSampler)
{
    return (VkResult)0;
}

void encode_vkDestroySampler(
    void* vkStream,
    VkDevice device,
    VkSampler sampler,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateDescriptorSetLayout(
    void* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorSetLayout* pSetLayout)
{
    return (VkResult)0;
}

void encode_vkDestroyDescriptorSetLayout(
    void* vkStream,
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateDescriptorPool(
    void* vkStream,
    VkDevice device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorPool* pDescriptorPool)
{
    return (VkResult)0;
}

void encode_vkDestroyDescriptorPool(
    void* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkResetDescriptorPool(
    void* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags)
{
    return (VkResult)0;
}

VkResult encode_vkAllocateDescriptorSets(
    void* vkStream,
    VkDevice device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets)
{
    return (VkResult)0;
}

VkResult encode_vkFreeDescriptorSets(
    void* vkStream,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets)
{
    return (VkResult)0;
}

void encode_vkUpdateDescriptorSets(
    void* vkStream,
    VkDevice device,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet* pDescriptorCopies)
{
}

VkResult encode_vkCreateFramebuffer(
    void* vkStream,
    VkDevice device,
    const VkFramebufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFramebuffer* pFramebuffer)
{
    return (VkResult)0;
}

void encode_vkDestroyFramebuffer(
    void* vkStream,
    VkDevice device,
    VkFramebuffer framebuffer,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateRenderPass(
    void* vkStream,
    VkDevice device,
    const VkRenderPassCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    return (VkResult)0;
}

void encode_vkDestroyRenderPass(
    void* vkStream,
    VkDevice device,
    VkRenderPass renderPass,
    const VkAllocationCallbacks* pAllocator)
{
}

void encode_vkGetRenderAreaGranularity(
    void* vkStream,
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity)
{
}

VkResult encode_vkCreateCommandPool(
    void* vkStream,
    VkDevice device,
    const VkCommandPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCommandPool* pCommandPool)
{
    return (VkResult)0;
}

void encode_vkDestroyCommandPool(
    void* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkResetCommandPool(
    void* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags)
{
    return (VkResult)0;
}

VkResult encode_vkAllocateCommandBuffers(
    void* vkStream,
    VkDevice device,
    const VkCommandBufferAllocateInfo* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers)
{
    return (VkResult)0;
}

void encode_vkFreeCommandBuffers(
    void* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
}

VkResult encode_vkBeginCommandBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    return (VkResult)0;
}

VkResult encode_vkEndCommandBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer)
{
    return (VkResult)0;
}

VkResult encode_vkResetCommandBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    return (VkResult)0;
}

void encode_vkCmdBindPipeline(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline)
{
}

void encode_vkCmdSetViewport(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewport* pViewports)
{
}

void encode_vkCmdSetScissor(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstScissor,
    uint32_t scissorCount,
    const VkRect2D* pScissors)
{
}

void encode_vkCmdSetLineWidth(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    float lineWidth)
{
}

void encode_vkCmdSetDepthBias(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor)
{
}

void encode_vkCmdSetBlendConstants(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const float blendConstants[4])
{
}

void encode_vkCmdSetDepthBounds(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds)
{
}

void encode_vkCmdSetStencilCompareMask(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t compareMask)
{
}

void encode_vkCmdSetStencilWriteMask(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t writeMask)
{
}

void encode_vkCmdSetStencilReference(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t reference)
{
}

void encode_vkCmdBindDescriptorSets(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t firstSet,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    uint32_t dynamicOffsetCount,
    const uint32_t* pDynamicOffsets)
{
}

void encode_vkCmdBindIndexBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType)
{
}

void encode_vkCmdBindVertexBuffers(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets)
{
}

void encode_vkCmdDraw(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t vertexCount,
    uint32_t instanceCount,
    uint32_t firstVertex,
    uint32_t firstInstance)
{
}

void encode_vkCmdDrawIndexed(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t indexCount,
    uint32_t instanceCount,
    uint32_t firstIndex,
    int32_t vertexOffset,
    uint32_t firstInstance)
{
}

void encode_vkCmdDrawIndirect(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
}

void encode_vkCmdDrawIndexedIndirect(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
}

void encode_vkCmdDispatch(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
}

void encode_vkCmdDispatchIndirect(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset)
{
}

void encode_vkCmdCopyBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferCopy* pRegions)
{
}

void encode_vkCmdCopyImage(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageCopy* pRegions)
{
}

void encode_vkCmdBlitImage(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageBlit* pRegions,
    VkFilter filter)
{
}

void encode_vkCmdCopyBufferToImage(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
}

void encode_vkCmdCopyImageToBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
}

void encode_vkCmdUpdateBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const void* pData)
{
}

void encode_vkCmdFillBuffer(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint32_t data)
{
}

void encode_vkCmdClearColorImage(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearColorValue* pColor,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
}

void encode_vkCmdClearDepthStencilImage(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearDepthStencilValue* pDepthStencil,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
}

void encode_vkCmdClearAttachments(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkClearAttachment* pAttachments,
    uint32_t rectCount,
    const VkClearRect* pRects)
{
}

void encode_vkCmdResolveImage(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageResolve* pRegions)
{
}

void encode_vkCmdSetEvent(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
}

void encode_vkCmdResetEvent(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
}

void encode_vkCmdWaitEvents(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
}

void encode_vkCmdPipelineBarrier(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
}

void encode_vkCmdBeginQuery(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags)
{
}

void encode_vkCmdEndQuery(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query)
{
}

void encode_vkCmdResetQueryPool(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
}

void encode_vkCmdWriteTimestamp(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint32_t query)
{
}

void encode_vkCmdCopyQueryPoolResults(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
}

void encode_vkCmdPushConstants(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint32_t offset,
    uint32_t size,
    const void* pValues)
{
}

void encode_vkCmdBeginRenderPass(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    VkSubpassContents contents)
{
}

void encode_vkCmdNextSubpass(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents)
{
}

void encode_vkCmdEndRenderPass(
    void* vkStream,
    VkCommandBuffer commandBuffer)
{
}

void encode_vkCmdExecuteCommands(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
}

#endif

#ifdef VK_VERSION_1_1

VkResult encode_vkEnumerateInstanceVersion(
    void* vkStream,
    uint32_t* pApiVersion)
{
    return (VkResult)0;
}

VkResult encode_vkBindBufferMemory2(
    void* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    return (VkResult)0;
}

VkResult encode_vkBindImageMemory2(
    void* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    return (VkResult)0;
}

void encode_vkGetDeviceGroupPeerMemoryFeatures(
    void* vkStream,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
}

void encode_vkCmdSetDeviceMask(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
}

void encode_vkCmdDispatchBase(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
}

VkResult encode_vkEnumeratePhysicalDeviceGroups(
    void* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    return (VkResult)0;
}

void encode_vkGetImageMemoryRequirements2(
    void* vkStream,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
}

void encode_vkGetBufferMemoryRequirements2(
    void* vkStream,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
}

void encode_vkGetImageSparseMemoryRequirements2(
    void* vkStream,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
}

void encode_vkGetPhysicalDeviceFeatures2(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
}

void encode_vkGetPhysicalDeviceProperties2(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
}

void encode_vkGetPhysicalDeviceFormatProperties2(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
}

VkResult encode_vkGetPhysicalDeviceImageFormatProperties2(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    return (VkResult)0;
}

void encode_vkGetPhysicalDeviceQueueFamilyProperties2(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
}

void encode_vkGetPhysicalDeviceMemoryProperties2(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
}

void encode_vkGetPhysicalDeviceSparseImageFormatProperties2(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
}

void encode_vkTrimCommandPool(
    void* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
}

void encode_vkGetDeviceQueue2(
    void* vkStream,
    VkDevice device,
    const VkDeviceQueueInfo2* pQueueInfo,
    VkQueue* pQueue)
{
}

VkResult encode_vkCreateSamplerYcbcrConversion(
    void* vkStream,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    return (VkResult)0;
}

void encode_vkDestroySamplerYcbcrConversion(
    void* vkStream,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateDescriptorUpdateTemplate(
    void* vkStream,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    return (VkResult)0;
}

void encode_vkDestroyDescriptorUpdateTemplate(
    void* vkStream,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
}

void encode_vkUpdateDescriptorSetWithTemplate(
    void* vkStream,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
}

void encode_vkGetPhysicalDeviceExternalBufferProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
}

void encode_vkGetPhysicalDeviceExternalFenceProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
}

void encode_vkGetPhysicalDeviceExternalSemaphoreProperties(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
}

void encode_vkGetDescriptorSetLayoutSupport(
    void* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
}

#endif

#ifdef VK_KHR_surface

void encode_vkDestroySurfaceKHR(
    void* vkStream,
    VkInstance instance,
    VkSurfaceKHR surface,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkGetPhysicalDeviceSurfaceSupportKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported)
{
    return (VkResult)0;
}

VkResult encode_vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
{
    return (VkResult)0;
}

VkResult encode_vkGetPhysicalDeviceSurfaceFormatsKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats)
{
    return (VkResult)0;
}

VkResult encode_vkGetPhysicalDeviceSurfacePresentModesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_swapchain

VkResult encode_vkCreateSwapchainKHR(
    void* vkStream,
    VkDevice device,
    const VkSwapchainCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchain)
{
    return (VkResult)0;
}

void encode_vkDestroySwapchainKHR(
    void* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkGetSwapchainImagesKHR(
    void* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pSwapchainImageCount,
    VkImage* pSwapchainImages)
{
    return (VkResult)0;
}

VkResult encode_vkAcquireNextImageKHR(
    void* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint32_t* pImageIndex)
{
    return (VkResult)0;
}

VkResult encode_vkQueuePresentKHR(
    void* vkStream,
    VkQueue queue,
    const VkPresentInfoKHR* pPresentInfo)
{
    return (VkResult)0;
}

VkResult encode_vkGetDeviceGroupPresentCapabilitiesKHR(
    void* vkStream,
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
{
    return (VkResult)0;
}

VkResult encode_vkGetDeviceGroupSurfacePresentModesKHR(
    void* vkStream,
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes)
{
    return (VkResult)0;
}

VkResult encode_vkGetPhysicalDevicePresentRectanglesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pRectCount,
    VkRect2D* pRects)
{
    return (VkResult)0;
}

VkResult encode_vkAcquireNextImage2KHR(
    void* vkStream,
    VkDevice device,
    const VkAcquireNextImageInfoKHR* pAcquireInfo,
    uint32_t* pImageIndex)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_display

VkResult encode_vkGetPhysicalDeviceDisplayPropertiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkGetDisplayPlaneSupportedDisplaysKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t planeIndex,
    uint32_t* pDisplayCount,
    VkDisplayKHR* pDisplays)
{
    return (VkResult)0;
}

VkResult encode_vkGetDisplayModePropertiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkCreateDisplayModeKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDisplayModeKHR* pMode)
{
    return (VkResult)0;
}

VkResult encode_vkGetDisplayPlaneCapabilitiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities)
{
    return (VkResult)0;
}

VkResult encode_vkCreateDisplayPlaneSurfaceKHR(
    void* vkStream,
    VkInstance instance,
    const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_display_swapchain

VkResult encode_vkCreateSharedSwapchainsKHR(
    void* vkStream,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchains)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_xlib_surface

VkResult encode_vkCreateXlibSurfaceKHR(
    void* vkStream,
    VkInstance instance,
    const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

VkBool32 encode_vkGetPhysicalDeviceXlibPresentationSupportKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    Display* dpy,
    VisualID visualID)
{
    return (VkBool32)0;
}

#endif

#ifdef VK_KHR_xcb_surface

VkResult encode_vkCreateXcbSurfaceKHR(
    void* vkStream,
    VkInstance instance,
    const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

VkBool32 encode_vkGetPhysicalDeviceXcbPresentationSupportKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    xcb_connection_t* connection,
    xcb_visualid_t visual_id)
{
    return (VkBool32)0;
}

#endif

#ifdef VK_KHR_wayland_surface

VkResult encode_vkCreateWaylandSurfaceKHR(
    void* vkStream,
    VkInstance instance,
    const VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

VkBool32 encode_vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    struct wl_display* display)
{
    return (VkBool32)0;
}

#endif

#ifdef VK_KHR_mir_surface

VkResult encode_vkCreateMirSurfaceKHR(
    void* vkStream,
    VkInstance instance,
    const VkMirSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

VkBool32 encode_vkGetPhysicalDeviceMirPresentationSupportKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    MirConnection* connection)
{
    return (VkBool32)0;
}

#endif

#ifdef VK_KHR_android_surface

VkResult encode_vkCreateAndroidSurfaceKHR(
    void* vkStream,
    VkInstance instance,
    const VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_win32_surface

VkResult encode_vkCreateWin32SurfaceKHR(
    void* vkStream,
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

VkBool32 encode_vkGetPhysicalDeviceWin32PresentationSupportKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex)
{
    return (VkBool32)0;
}

#endif

#ifdef VK_KHR_sampler_mirror_clamp_to_edge

#endif

#ifdef VK_KHR_multiview

#endif

#ifdef VK_KHR_get_physical_device_properties2

void encode_vkGetPhysicalDeviceFeatures2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
}

void encode_vkGetPhysicalDeviceProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
}

void encode_vkGetPhysicalDeviceFormatProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
}

VkResult encode_vkGetPhysicalDeviceImageFormatProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    return (VkResult)0;
}

void encode_vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
}

void encode_vkGetPhysicalDeviceMemoryProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
}

void encode_vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
}

#endif

#ifdef VK_KHR_device_group

void encode_vkGetDeviceGroupPeerMemoryFeaturesKHR(
    void* vkStream,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
}

void encode_vkCmdSetDeviceMaskKHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
}

void encode_vkCmdDispatchBaseKHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
}

#endif

#ifdef VK_KHR_shader_draw_parameters

#endif

#ifdef VK_KHR_maintenance1

void encode_vkTrimCommandPoolKHR(
    void* vkStream,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
}

#endif

#ifdef VK_KHR_device_group_creation

VkResult encode_vkEnumeratePhysicalDeviceGroupsKHR(
    void* vkStream,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_external_memory_capabilities

void encode_vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
}

#endif

#ifdef VK_KHR_external_memory

#endif

#ifdef VK_KHR_external_memory_win32

VkResult encode_vkGetMemoryWin32HandleKHR(
    void* vkStream,
    VkDevice device,
    const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    return (VkResult)0;
}

VkResult encode_vkGetMemoryWin32HandlePropertiesKHR(
    void* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_external_memory_fd

VkResult encode_vkGetMemoryFdKHR(
    void* vkStream,
    VkDevice device,
    const VkMemoryGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    return (VkResult)0;
}

VkResult encode_vkGetMemoryFdPropertiesKHR(
    void* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_win32_keyed_mutex

#endif

#ifdef VK_KHR_external_semaphore_capabilities

void encode_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
}

#endif

#ifdef VK_KHR_external_semaphore

#endif

#ifdef VK_KHR_external_semaphore_win32

VkResult encode_vkImportSemaphoreWin32HandleKHR(
    void* vkStream,
    VkDevice device,
    const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
{
    return (VkResult)0;
}

VkResult encode_vkGetSemaphoreWin32HandleKHR(
    void* vkStream,
    VkDevice device,
    const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_external_semaphore_fd

VkResult encode_vkImportSemaphoreFdKHR(
    void* vkStream,
    VkDevice device,
    const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
{
    return (VkResult)0;
}

VkResult encode_vkGetSemaphoreFdKHR(
    void* vkStream,
    VkDevice device,
    const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_push_descriptor

void encode_vkCmdPushDescriptorSetKHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t set,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites)
{
}

void encode_vkCmdPushDescriptorSetWithTemplateKHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint32_t set,
    const void* pData)
{
}

#endif

#ifdef VK_KHR_16bit_storage

#endif

#ifdef VK_KHR_incremental_present

#endif

#ifdef VK_KHR_descriptor_update_template

VkResult encode_vkCreateDescriptorUpdateTemplateKHR(
    void* vkStream,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    return (VkResult)0;
}

void encode_vkDestroyDescriptorUpdateTemplateKHR(
    void* vkStream,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
}

void encode_vkUpdateDescriptorSetWithTemplateKHR(
    void* vkStream,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
}

#endif

#ifdef VK_KHR_create_renderpass2

VkResult encode_vkCreateRenderPass2KHR(
    void* vkStream,
    VkDevice device,
    const VkRenderPassCreateInfo2KHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    return (VkResult)0;
}

void encode_vkCmdBeginRenderPass2KHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo*      pRenderPassBegin,
    const VkSubpassBeginInfoKHR*      pSubpassBeginInfo)
{
}

void encode_vkCmdNextSubpass2KHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfoKHR*      pSubpassBeginInfo,
    const VkSubpassEndInfoKHR*        pSubpassEndInfo)
{
}

void encode_vkCmdEndRenderPass2KHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfoKHR*        pSubpassEndInfo)
{
}

#endif

#ifdef VK_KHR_shared_presentable_image

VkResult encode_vkGetSwapchainStatusKHR(
    void* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_external_fence_capabilities

void encode_vkGetPhysicalDeviceExternalFencePropertiesKHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
}

#endif

#ifdef VK_KHR_external_fence

#endif

#ifdef VK_KHR_external_fence_win32

VkResult encode_vkImportFenceWin32HandleKHR(
    void* vkStream,
    VkDevice device,
    const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
{
    return (VkResult)0;
}

VkResult encode_vkGetFenceWin32HandleKHR(
    void* vkStream,
    VkDevice device,
    const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_external_fence_fd

VkResult encode_vkImportFenceFdKHR(
    void* vkStream,
    VkDevice device,
    const VkImportFenceFdInfoKHR* pImportFenceFdInfo)
{
    return (VkResult)0;
}

VkResult encode_vkGetFenceFdKHR(
    void* vkStream,
    VkDevice device,
    const VkFenceGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_maintenance2

#endif

#ifdef VK_KHR_get_surface_capabilities2

VkResult encode_vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
{
    return (VkResult)0;
}

VkResult encode_vkGetPhysicalDeviceSurfaceFormats2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_variable_pointers

#endif

#ifdef VK_KHR_get_display_properties2

VkResult encode_vkGetPhysicalDeviceDisplayProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayProperties2KHR* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkGetDisplayModeProperties2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkGetDisplayPlaneCapabilities2KHR(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_dedicated_allocation

#endif

#ifdef VK_KHR_storage_buffer_storage_class

#endif

#ifdef VK_KHR_relaxed_block_layout

#endif

#ifdef VK_KHR_get_memory_requirements2

void encode_vkGetImageMemoryRequirements2KHR(
    void* vkStream,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
}

void encode_vkGetBufferMemoryRequirements2KHR(
    void* vkStream,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
}

void encode_vkGetImageSparseMemoryRequirements2KHR(
    void* vkStream,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
}

#endif

#ifdef VK_KHR_image_format_list

#endif

#ifdef VK_KHR_sampler_ycbcr_conversion

VkResult encode_vkCreateSamplerYcbcrConversionKHR(
    void* vkStream,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    return (VkResult)0;
}

void encode_vkDestroySamplerYcbcrConversionKHR(
    void* vkStream,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
}

#endif

#ifdef VK_KHR_bind_memory2

VkResult encode_vkBindBufferMemory2KHR(
    void* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    return (VkResult)0;
}

VkResult encode_vkBindImageMemory2KHR(
    void* vkStream,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    return (VkResult)0;
}

#endif

#ifdef VK_KHR_maintenance3

void encode_vkGetDescriptorSetLayoutSupportKHR(
    void* vkStream,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
}

#endif

#ifdef VK_KHR_draw_indirect_count

void encode_vkCmdDrawIndirectCountKHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
}

void encode_vkCmdDrawIndexedIndirectCountKHR(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
}

#endif

#ifdef VK_KHR_8bit_storage

#endif

#ifdef VK_EXT_debug_report

VkResult encode_vkCreateDebugReportCallbackEXT(
    void* vkStream,
    VkInstance instance,
    const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugReportCallbackEXT* pCallback)
{
    return (VkResult)0;
}

void encode_vkDestroyDebugReportCallbackEXT(
    void* vkStream,
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks* pAllocator)
{
}

void encode_vkDebugReportMessageEXT(
    void* vkStream,
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    uint64_t object,
    size_t location,
    int32_t messageCode,
    const char* pLayerPrefix,
    const char* pMessage)
{
}

#endif

#ifdef VK_NV_glsl_shader

#endif

#ifdef VK_EXT_depth_range_unrestricted

#endif

#ifdef VK_IMG_filter_cubic

#endif

#ifdef VK_AMD_rasterization_order

#endif

#ifdef VK_AMD_shader_trinary_minmax

#endif

#ifdef VK_AMD_shader_explicit_vertex_parameter

#endif

#ifdef VK_EXT_debug_marker

VkResult encode_vkDebugMarkerSetObjectTagEXT(
    void* vkStream,
    VkDevice device,
    const VkDebugMarkerObjectTagInfoEXT* pTagInfo)
{
    return (VkResult)0;
}

VkResult encode_vkDebugMarkerSetObjectNameEXT(
    void* vkStream,
    VkDevice device,
    const VkDebugMarkerObjectNameInfoEXT* pNameInfo)
{
    return (VkResult)0;
}

void encode_vkCmdDebugMarkerBeginEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
}

void encode_vkCmdDebugMarkerEndEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer)
{
}

void encode_vkCmdDebugMarkerInsertEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
}

#endif

#ifdef VK_AMD_gcn_shader

#endif

#ifdef VK_NV_dedicated_allocation

#endif

#ifdef VK_AMD_draw_indirect_count

void encode_vkCmdDrawIndirectCountAMD(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
}

void encode_vkCmdDrawIndexedIndirectCountAMD(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
}

#endif

#ifdef VK_AMD_negative_viewport_height

#endif

#ifdef VK_AMD_gpu_shader_half_float

#endif

#ifdef VK_AMD_shader_ballot

#endif

#ifdef VK_AMD_texture_gather_bias_lod

#endif

#ifdef VK_AMD_shader_info

VkResult encode_vkGetShaderInfoAMD(
    void* vkStream,
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo)
{
    return (VkResult)0;
}

#endif

#ifdef VK_AMD_shader_image_load_store_lod

#endif

#ifdef VK_IMG_format_pvrtc

#endif

#ifdef VK_NV_external_memory_capabilities

VkResult encode_vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
{
    return (VkResult)0;
}

#endif

#ifdef VK_NV_external_memory

#endif

#ifdef VK_NV_external_memory_win32

VkResult encode_vkGetMemoryWin32HandleNV(
    void* vkStream,
    VkDevice device,
    VkDeviceMemory memory,
    VkExternalMemoryHandleTypeFlagsNV handleType,
    HANDLE* pHandle)
{
    return (VkResult)0;
}

#endif

#ifdef VK_NV_win32_keyed_mutex

#endif

#ifdef VK_EXT_validation_flags

#endif

#ifdef VK_NN_vi_surface

VkResult encode_vkCreateViSurfaceNN(
    void* vkStream,
    VkInstance instance,
    const VkViSurfaceCreateInfoNN* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

#endif

#ifdef VK_EXT_shader_subgroup_ballot

#endif

#ifdef VK_EXT_shader_subgroup_vote

#endif

#ifdef VK_EXT_conditional_rendering

void encode_vkCmdBeginConditionalRenderingEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
{
}

void encode_vkCmdEndConditionalRenderingEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer)
{
}

#endif

#ifdef VK_NVX_device_generated_commands

void encode_vkCmdProcessCommandsNVX(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo)
{
}

void encode_vkCmdReserveSpaceForCommandsNVX(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo)
{
}

VkResult encode_vkCreateIndirectCommandsLayoutNVX(
    void* vkStream,
    VkDevice device,
    const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout)
{
    return (VkResult)0;
}

void encode_vkDestroyIndirectCommandsLayoutNVX(
    void* vkStream,
    VkDevice device,
    VkIndirectCommandsLayoutNVX indirectCommandsLayout,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkCreateObjectTableNVX(
    void* vkStream,
    VkDevice device,
    const VkObjectTableCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkObjectTableNVX* pObjectTable)
{
    return (VkResult)0;
}

void encode_vkDestroyObjectTableNVX(
    void* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkRegisterObjectsNVX(
    void* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectTableEntryNVX* const*    ppObjectTableEntries,
    const uint32_t* pObjectIndices)
{
    return (VkResult)0;
}

VkResult encode_vkUnregisterObjectsNVX(
    void* vkStream,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectEntryTypeNVX* pObjectEntryTypes,
    const uint32_t* pObjectIndices)
{
    return (VkResult)0;
}

void encode_vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDeviceGeneratedCommandsFeaturesNVX* pFeatures,
    VkDeviceGeneratedCommandsLimitsNVX* pLimits)
{
}

#endif

#ifdef VK_NV_clip_space_w_scaling

void encode_vkCmdSetViewportWScalingNV(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewportWScalingNV* pViewportWScalings)
{
}

#endif

#ifdef VK_EXT_direct_mode_display

VkResult encode_vkReleaseDisplayEXT(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display)
{
    return (VkResult)0;
}

#endif

#ifdef VK_EXT_acquire_xlib_display

VkResult encode_vkAcquireXlibDisplayEXT(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    VkDisplayKHR display)
{
    return (VkResult)0;
}

VkResult encode_vkGetRandROutputDisplayEXT(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    RROutput rrOutput,
    VkDisplayKHR* pDisplay)
{
    return (VkResult)0;
}

#endif

#ifdef VK_EXT_display_surface_counter

VkResult encode_vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
{
    return (VkResult)0;
}

#endif

#ifdef VK_EXT_display_control

VkResult encode_vkDisplayPowerControlEXT(
    void* vkStream,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayPowerInfoEXT* pDisplayPowerInfo)
{
    return (VkResult)0;
}

VkResult encode_vkRegisterDeviceEventEXT(
    void* vkStream,
    VkDevice device,
    const VkDeviceEventInfoEXT* pDeviceEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    return (VkResult)0;
}

VkResult encode_vkRegisterDisplayEventEXT(
    void* vkStream,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayEventInfoEXT* pDisplayEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    return (VkResult)0;
}

VkResult encode_vkGetSwapchainCounterEXT(
    void* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    uint64_t* pCounterValue)
{
    return (VkResult)0;
}

#endif

#ifdef VK_GOOGLE_display_timing

VkResult encode_vkGetRefreshCycleDurationGOOGLE(
    void* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
{
    return (VkResult)0;
}

VkResult encode_vkGetPastPresentationTimingGOOGLE(
    void* vkStream,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings)
{
    return (VkResult)0;
}

#endif

#ifdef VK_NV_sample_mask_override_coverage

#endif

#ifdef VK_NV_geometry_shader_passthrough

#endif

#ifdef VK_NV_viewport_array2

#endif

#ifdef VK_NVX_multiview_per_view_attributes

#endif

#ifdef VK_NV_viewport_swizzle

#endif

#ifdef VK_EXT_discard_rectangles

void encode_vkCmdSetDiscardRectangleEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    uint32_t firstDiscardRectangle,
    uint32_t discardRectangleCount,
    const VkRect2D* pDiscardRectangles)
{
}

#endif

#ifdef VK_EXT_conservative_rasterization

#endif

#ifdef VK_EXT_swapchain_colorspace

#endif

#ifdef VK_EXT_hdr_metadata

void encode_vkSetHdrMetadataEXT(
    void* vkStream,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainKHR* pSwapchains,
    const VkHdrMetadataEXT* pMetadata)
{
}

#endif

#ifdef VK_MVK_ios_surface

VkResult encode_vkCreateIOSSurfaceMVK(
    void* vkStream,
    VkInstance instance,
    const VkIOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

#endif

#ifdef VK_MVK_macos_surface

VkResult encode_vkCreateMacOSSurfaceMVK(
    void* vkStream,
    VkInstance instance,
    const VkMacOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    return (VkResult)0;
}

#endif

#ifdef VK_EXT_external_memory_dma_buf

#endif

#ifdef VK_EXT_queue_family_foreign

#endif

#ifdef VK_EXT_debug_utils

VkResult encode_vkSetDebugUtilsObjectNameEXT(
    void* vkStream,
    VkDevice device,
    const VkDebugUtilsObjectNameInfoEXT* pNameInfo)
{
    return (VkResult)0;
}

VkResult encode_vkSetDebugUtilsObjectTagEXT(
    void* vkStream,
    VkDevice device,
    const VkDebugUtilsObjectTagInfoEXT* pTagInfo)
{
    return (VkResult)0;
}

void encode_vkQueueBeginDebugUtilsLabelEXT(
    void* vkStream,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
}

void encode_vkQueueEndDebugUtilsLabelEXT(
    void* vkStream,
    VkQueue queue)
{
}

void encode_vkQueueInsertDebugUtilsLabelEXT(
    void* vkStream,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
}

void encode_vkCmdBeginDebugUtilsLabelEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
}

void encode_vkCmdEndDebugUtilsLabelEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer)
{
}

void encode_vkCmdInsertDebugUtilsLabelEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
}

VkResult encode_vkCreateDebugUtilsMessengerEXT(
    void* vkStream,
    VkInstance instance,
    const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger)
{
    return (VkResult)0;
}

void encode_vkDestroyDebugUtilsMessengerEXT(
    void* vkStream,
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks* pAllocator)
{
}

void encode_vkSubmitDebugUtilsMessageEXT(
    void* vkStream,
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
{
}

#endif

#ifdef VK_ANDROID_external_memory_android_hardware_buffer

VkResult encode_vkGetAndroidHardwareBufferPropertiesANDROID(
    void* vkStream,
    VkDevice device,
    const struct AHardwareBuffer* buffer,
    VkAndroidHardwareBufferPropertiesANDROID* pProperties)
{
    return (VkResult)0;
}

VkResult encode_vkGetMemoryAndroidHardwareBufferANDROID(
    void* vkStream,
    VkDevice device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    struct AHardwareBuffer** pBuffer)
{
    return (VkResult)0;
}

#endif

#ifdef VK_EXT_sampler_filter_minmax

#endif

#ifdef VK_AMD_gpu_shader_int16

#endif

#ifdef VK_AMD_mixed_attachment_samples

#endif

#ifdef VK_AMD_shader_fragment_mask

#endif

#ifdef VK_EXT_shader_stencil_export

#endif

#ifdef VK_EXT_sample_locations

void encode_vkCmdSetSampleLocationsEXT(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
}

void encode_vkGetPhysicalDeviceMultisamplePropertiesEXT(
    void* vkStream,
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties)
{
}

#endif

#ifdef VK_EXT_blend_operation_advanced

#endif

#ifdef VK_NV_fragment_coverage_to_color

#endif

#ifdef VK_NV_framebuffer_mixed_samples

#endif

#ifdef VK_NV_fill_rectangle

#endif

#ifdef VK_EXT_post_depth_coverage

#endif

#ifdef VK_EXT_validation_cache

VkResult encode_vkCreateValidationCacheEXT(
    void* vkStream,
    VkDevice device,
    const VkValidationCacheCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkValidationCacheEXT* pValidationCache)
{
    return (VkResult)0;
}

void encode_vkDestroyValidationCacheEXT(
    void* vkStream,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const VkAllocationCallbacks* pAllocator)
{
}

VkResult encode_vkMergeValidationCachesEXT(
    void* vkStream,
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint32_t srcCacheCount,
    const VkValidationCacheEXT* pSrcCaches)
{
    return (VkResult)0;
}

VkResult encode_vkGetValidationCacheDataEXT(
    void* vkStream,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData)
{
    return (VkResult)0;
}

#endif

#ifdef VK_EXT_descriptor_indexing

#endif

#ifdef VK_EXT_shader_viewport_index_layer

#endif

#ifdef VK_EXT_global_priority

#endif

#ifdef VK_EXT_external_memory_host

VkResult encode_vkGetMemoryHostPointerPropertiesEXT(
    void* vkStream,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const void* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
{
    return (VkResult)0;
}

#endif

#ifdef VK_AMD_buffer_marker

void encode_vkCmdWriteBufferMarkerAMD(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker)
{
}

#endif

#ifdef VK_AMD_shader_core_properties

#endif

#ifdef VK_EXT_vertex_attribute_divisor

#endif

#ifdef VK_NV_shader_subgroup_partitioned

#endif

#ifdef VK_NV_device_diagnostic_checkpoints

void encode_vkCmdSetCheckpointNV(
    void* vkStream,
    VkCommandBuffer commandBuffer,
    const void* pCheckpointMarker)
{
}

void encode_vkGetQueueCheckpointDataNV(
    void* vkStream,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData)
{
}

#endif

