// Copyright (C) 2018 The Android Open Source Project
// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Autogenerated module VkDecoderSnapshot
// (impl) generated by android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/genvk.py -registry android/android-emugl/host/libs/libOpenglRender/vulkan-registry/xml/vk.xml cereal -o android/android-emugl/host/libs/libOpenglRender/vulkan/cereal
// Please do not modify directly;
// re-run android/scripts/generate-vulkan-sources.sh,
// or directly from Python by defining:
// VULKAN_REGISTRY_XML_DIR : Directory containing genvk.py and vk.xml
// CEREAL_OUTPUT_DIR: Where to put the generated sources.
// python3 $VULKAN_REGISTRY_XML_DIR/genvk.py -registry $VULKAN_REGISTRY_XML_DIR/vk.xml cereal -o $CEREAL_OUTPUT_DIR

#include "VkDecoderSnapshot.h"


#include "VulkanHandleMapping.h"

#include "goldfish_vk_baseprotodefs.pb.h"
#include "common/goldfish_vk_baseprotoconversion.h"






using namespace goldfish_vk;

class VkDecoderSnapshot::Impl {
public:
    Impl() { }
#ifdef VK_VERSION_1_0
void vkCreateInstance(
    android::base::Pool* pool,
    VkResult input_result,
    const VkInstanceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance* pInstance)
{
    // TODO: Implement
}
void vkDestroyInstance(
    android::base::Pool* pool,
    VkInstance instance,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkEnumeratePhysicalDevices(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFeatures(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFormatProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceImageFormatProperties(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceQueueFamilyProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMemoryProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties)
{
    // TODO: Implement
}
void vkGetInstanceProcAddr(
    android::base::Pool* pool,
    PFN_vkVoidFunction input_result,
    VkInstance instance,
    const char* pName)
{
    // TODO: Implement
}
void vkGetDeviceProcAddr(
    android::base::Pool* pool,
    PFN_vkVoidFunction input_result,
    VkDevice device,
    const char* pName)
{
    // TODO: Implement
}
void vkCreateDevice(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDeviceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice* pDevice)
{
    // TODO: Implement
}
void vkDestroyDevice(
    android::base::Pool* pool,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkEnumerateInstanceExtensionProperties(
    android::base::Pool* pool,
    VkResult input_result,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    // TODO: Implement
}
void vkEnumerateDeviceExtensionProperties(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    // TODO: Implement
}
void vkEnumerateInstanceLayerProperties(
    android::base::Pool* pool,
    VkResult input_result,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    // TODO: Implement
}
void vkEnumerateDeviceLayerProperties(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    // TODO: Implement
}
void vkGetDeviceQueue(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t queueFamilyIndex,
    uint32_t queueIndex,
    VkQueue* pQueue)
{
    // TODO: Implement
}
void vkQueueSubmit(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence)
{
    // TODO: Implement
}
void vkQueueWaitIdle(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue)
{
    // TODO: Implement
}
void vkDeviceWaitIdle(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device)
{
    // TODO: Implement
}
void vkAllocateMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryAllocateInfo* pAllocateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDeviceMemory* pMemory)
{
    // TODO: Implement
}
void vkFreeMemory(
    android::base::Pool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkMapMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData)
{
    // TODO: Implement
}
void vkUnmapMemory(
    android::base::Pool* pool,
    VkDevice device,
    VkDeviceMemory memory)
{
    // TODO: Implement
}
void vkFlushMappedMemoryRanges(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    // TODO: Implement
}
void vkInvalidateMappedMemoryRanges(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    // TODO: Implement
}
void vkGetDeviceMemoryCommitment(
    android::base::Pool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes)
{
    // TODO: Implement
}
void vkBindBufferMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    // TODO: Implement
}
void vkBindImageMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    // TODO: Implement
}
void vkGetBufferMemoryRequirements(
    android::base::Pool* pool,
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageMemoryRequirements(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageSparseMemoryRequirements(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSparseImageFormatProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties* pProperties)
{
    // TODO: Implement
}
void vkQueueBindSparse(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence)
{
    // TODO: Implement
}
void vkCreateFence(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    // TODO: Implement
}
void vkDestroyFence(
    android::base::Pool* pool,
    VkDevice device,
    VkFence fence,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkResetFences(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences)
{
    // TODO: Implement
}
void vkGetFenceStatus(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkFence fence)
{
    // TODO: Implement
}
void vkWaitForFences(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences,
    VkBool32 waitAll,
    uint64_t timeout)
{
    // TODO: Implement
}
void vkCreateSemaphore(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSemaphore* pSemaphore)
{
    // TODO: Implement
}
void vkDestroySemaphore(
    android::base::Pool* pool,
    VkDevice device,
    VkSemaphore semaphore,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateEvent(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkEventCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkEvent* pEvent)
{
    // TODO: Implement
}
void vkDestroyEvent(
    android::base::Pool* pool,
    VkDevice device,
    VkEvent event,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetEventStatus(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    // TODO: Implement
}
void vkSetEvent(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    // TODO: Implement
}
void vkResetEvent(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    // TODO: Implement
}
void vkCreateQueryPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkQueryPool* pQueryPool)
{
    // TODO: Implement
}
void vkDestroyQueryPool(
    android::base::Pool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetQueryPoolResults(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    // TODO: Implement
}
void vkCreateBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer)
{
    // TODO: Implement
}
void vkDestroyBuffer(
    android::base::Pool* pool,
    VkDevice device,
    VkBuffer buffer,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateBufferView(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferView* pView)
{
    // TODO: Implement
}
void vkDestroyBufferView(
    android::base::Pool* pool,
    VkDevice device,
    VkBufferView bufferView,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateImage(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage)
{
    // TODO: Implement
}
void vkDestroyImage(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetImageSubresourceLayout(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout* pLayout)
{
    // TODO: Implement
}
void vkCreateImageView(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImageView* pView)
{
    // TODO: Implement
}
void vkDestroyImageView(
    android::base::Pool* pool,
    VkDevice device,
    VkImageView imageView,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateShaderModule(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkShaderModuleCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkShaderModule* pShaderModule)
{
    // TODO: Implement
}
void vkDestroyShaderModule(
    android::base::Pool* pool,
    VkDevice device,
    VkShaderModule shaderModule,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreatePipelineCache(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineCacheCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineCache* pPipelineCache)
{
    // TODO: Implement
}
void vkDestroyPipelineCache(
    android::base::Pool* pool,
    VkDevice device,
    VkPipelineCache pipelineCache,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetPipelineCacheData(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData)
{
    // TODO: Implement
}
void vkMergePipelineCaches(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache dstCache,
    uint32_t srcCacheCount,
    const VkPipelineCache* pSrcCaches)
{
    // TODO: Implement
}
void vkCreateGraphicsPipelines(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    // TODO: Implement
}
void vkCreateComputePipelines(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkComputePipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    // TODO: Implement
}
void vkDestroyPipeline(
    android::base::Pool* pool,
    VkDevice device,
    VkPipeline pipeline,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreatePipelineLayout(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineLayout* pPipelineLayout)
{
    // TODO: Implement
}
void vkDestroyPipelineLayout(
    android::base::Pool* pool,
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateSampler(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSampler* pSampler)
{
    // TODO: Implement
}
void vkDestroySampler(
    android::base::Pool* pool,
    VkDevice device,
    VkSampler sampler,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateDescriptorSetLayout(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorSetLayout* pSetLayout)
{
    // TODO: Implement
}
void vkDestroyDescriptorSetLayout(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateDescriptorPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorPool* pDescriptorPool)
{
    // TODO: Implement
}
void vkDestroyDescriptorPool(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkResetDescriptorPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags)
{
    // TODO: Implement
}
void vkAllocateDescriptorSets(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets)
{
    // TODO: Implement
}
void vkFreeDescriptorSets(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets)
{
    // TODO: Implement
}
void vkUpdateDescriptorSets(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet* pDescriptorCopies)
{
    // TODO: Implement
}
void vkCreateFramebuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFramebufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFramebuffer* pFramebuffer)
{
    // TODO: Implement
}
void vkDestroyFramebuffer(
    android::base::Pool* pool,
    VkDevice device,
    VkFramebuffer framebuffer,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateRenderPass(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    // TODO: Implement
}
void vkDestroyRenderPass(
    android::base::Pool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetRenderAreaGranularity(
    android::base::Pool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity)
{
    // TODO: Implement
}
void vkCreateCommandPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCommandPool* pCommandPool)
{
    // TODO: Implement
}
void vkDestroyCommandPool(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkResetCommandPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags)
{
    // TODO: Implement
}
void vkAllocateCommandBuffers(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandBufferAllocateInfo* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers)
{
    // TODO: Implement
}
void vkFreeCommandBuffers(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    // TODO: Implement
}
void vkBeginCommandBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    // TODO: Implement
}
void vkEndCommandBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkResetCommandBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    // TODO: Implement
}
void vkCmdBindPipeline(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline)
{
    // TODO: Implement
}
void vkCmdSetViewport(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewport* pViewports)
{
    // TODO: Implement
}
void vkCmdSetScissor(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstScissor,
    uint32_t scissorCount,
    const VkRect2D* pScissors)
{
    // TODO: Implement
}
void vkCmdSetLineWidth(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    float lineWidth)
{
    // TODO: Implement
}
void vkCmdSetDepthBias(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor)
{
    // TODO: Implement
}
void vkCmdSetBlendConstants(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const float blendConstants[4])
{
    // TODO: Implement
}
void vkCmdSetDepthBounds(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds)
{
    // TODO: Implement
}
void vkCmdSetStencilCompareMask(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t compareMask)
{
    // TODO: Implement
}
void vkCmdSetStencilWriteMask(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t writeMask)
{
    // TODO: Implement
}
void vkCmdSetStencilReference(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t reference)
{
    // TODO: Implement
}
void vkCmdBindDescriptorSets(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t firstSet,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    uint32_t dynamicOffsetCount,
    const uint32_t* pDynamicOffsets)
{
    // TODO: Implement
}
void vkCmdBindIndexBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType)
{
    // TODO: Implement
}
void vkCmdBindVertexBuffers(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets)
{
    // TODO: Implement
}
void vkCmdDraw(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t vertexCount,
    uint32_t instanceCount,
    uint32_t firstVertex,
    uint32_t firstInstance)
{
    // TODO: Implement
}
void vkCmdDrawIndexed(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t indexCount,
    uint32_t instanceCount,
    uint32_t firstIndex,
    int32_t vertexOffset,
    uint32_t firstInstance)
{
    // TODO: Implement
}
void vkCmdDrawIndirect(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawIndexedIndirect(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDispatch(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    // TODO: Implement
}
void vkCmdDispatchIndirect(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset)
{
    // TODO: Implement
}
void vkCmdCopyBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdCopyImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdBlitImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageBlit* pRegions,
    VkFilter filter)
{
    // TODO: Implement
}
void vkCmdCopyBufferToImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdCopyImageToBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    // TODO: Implement
}
void vkCmdUpdateBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const void* pData)
{
    // TODO: Implement
}
void vkCmdFillBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint32_t data)
{
    // TODO: Implement
}
void vkCmdClearColorImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearColorValue* pColor,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    // TODO: Implement
}
void vkCmdClearDepthStencilImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearDepthStencilValue* pDepthStencil,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    // TODO: Implement
}
void vkCmdClearAttachments(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkClearAttachment* pAttachments,
    uint32_t rectCount,
    const VkClearRect* pRects)
{
    // TODO: Implement
}
void vkCmdResolveImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageResolve* pRegions)
{
    // TODO: Implement
}
void vkCmdSetEvent(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    // TODO: Implement
}
void vkCmdResetEvent(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    // TODO: Implement
}
void vkCmdWaitEvents(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    // TODO: Implement
}
void vkCmdPipelineBarrier(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    // TODO: Implement
}
void vkCmdBeginQuery(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags)
{
    // TODO: Implement
}
void vkCmdEndQuery(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query)
{
    // TODO: Implement
}
void vkCmdResetQueryPool(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    // TODO: Implement
}
void vkCmdWriteTimestamp(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint32_t query)
{
    // TODO: Implement
}
void vkCmdCopyQueryPoolResults(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    // TODO: Implement
}
void vkCmdPushConstants(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint32_t offset,
    uint32_t size,
    const void* pValues)
{
    // TODO: Implement
}
void vkCmdBeginRenderPass(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    VkSubpassContents contents)
{
    // TODO: Implement
}
void vkCmdNextSubpass(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents)
{
    // TODO: Implement
}
void vkCmdEndRenderPass(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkCmdExecuteCommands(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    // TODO: Implement
}
#endif
#ifdef VK_VERSION_1_1
void vkEnumerateInstanceVersion(
    android::base::Pool* pool,
    VkResult input_result,
    uint32_t* pApiVersion)
{
    // TODO: Implement
}
void vkBindBufferMemory2(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
void vkBindImageMemory2(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
void vkGetDeviceGroupPeerMemoryFeatures(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    // TODO: Implement
}
void vkCmdSetDeviceMask(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    // TODO: Implement
}
void vkCmdDispatchBase(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    // TODO: Implement
}
void vkEnumeratePhysicalDeviceGroups(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    // TODO: Implement
}
void vkGetImageMemoryRequirements2(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetBufferMemoryRequirements2(
    android::base::Pool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageSparseMemoryRequirements2(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFeatures2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFormatProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceImageFormatProperties2(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceQueueFamilyProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMemoryProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSparseImageFormatProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    // TODO: Implement
}
void vkTrimCommandPool(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    // TODO: Implement
}
void vkGetDeviceQueue2(
    android::base::Pool* pool,
    VkDevice device,
    const VkDeviceQueueInfo2* pQueueInfo,
    VkQueue* pQueue)
{
    // TODO: Implement
}
void vkCreateSamplerYcbcrConversion(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    // TODO: Implement
}
void vkDestroySamplerYcbcrConversion(
    android::base::Pool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateDescriptorUpdateTemplate(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    // TODO: Implement
}
void vkDestroyDescriptorUpdateTemplate(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkUpdateDescriptorSetWithTemplate(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceExternalBufferProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceExternalFenceProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceExternalSemaphoreProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    // TODO: Implement
}
void vkGetDescriptorSetLayoutSupport(
    android::base::Pool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_surface
void vkDestroySurfaceKHR(
    android::base::Pool* pool,
    VkInstance instance,
    VkSurfaceKHR surface,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfaceSupportKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfaceFormatsKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfacePresentModesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_swapchain
void vkCreateSwapchainKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSwapchainCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchain)
{
    // TODO: Implement
}
void vkDestroySwapchainKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkSwapchainKHR swapchain,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkGetSwapchainImagesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pSwapchainImageCount,
    VkImage* pSwapchainImages)
{
    // TODO: Implement
}
void vkAcquireNextImageKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint32_t* pImageIndex)
{
    // TODO: Implement
}
void vkQueuePresentKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    const VkPresentInfoKHR* pPresentInfo)
{
    // TODO: Implement
}
void vkGetDeviceGroupPresentCapabilitiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
{
    // TODO: Implement
}
void vkGetDeviceGroupSurfacePresentModesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes)
{
    // TODO: Implement
}
void vkGetPhysicalDevicePresentRectanglesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pRectCount,
    VkRect2D* pRects)
{
    // TODO: Implement
}
void vkAcquireNextImage2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAcquireNextImageInfoKHR* pAcquireInfo,
    uint32_t* pImageIndex)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_display
void vkGetPhysicalDeviceDisplayPropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties)
{
    // TODO: Implement
}
void vkGetDisplayPlaneSupportedDisplaysKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t planeIndex,
    uint32_t* pDisplayCount,
    VkDisplayKHR* pDisplays)
{
    // TODO: Implement
}
void vkGetDisplayModePropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties)
{
    // TODO: Implement
}
void vkCreateDisplayModeKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDisplayModeKHR* pMode)
{
    // TODO: Implement
}
void vkGetDisplayPlaneCapabilitiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities)
{
    // TODO: Implement
}
void vkCreateDisplayPlaneSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_display_swapchain
void vkCreateSharedSwapchainsKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchains)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_xlib_surface
void vkCreateXlibSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceXlibPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    Display* dpy,
    VisualID visualID)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_xcb_surface
void vkCreateXcbSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceXcbPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    xcb_connection_t* connection,
    xcb_visualid_t visual_id)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_wayland_surface
void vkCreateWaylandSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    wl_display* display)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_mir_surface
void vkCreateMirSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMirSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMirPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    MirConnection* connection)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_android_surface
void vkCreateAndroidSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_win32_surface
void vkCreateWin32SurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceWin32PresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_sampler_mirror_clamp_to_edge
#endif
#ifdef VK_KHR_multiview
#endif
#ifdef VK_KHR_get_physical_device_properties2
void vkGetPhysicalDeviceFeatures2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceFormatProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceImageFormatProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMemoryProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_device_group
void vkGetDeviceGroupPeerMemoryFeaturesKHR(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    // TODO: Implement
}
void vkCmdSetDeviceMaskKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    // TODO: Implement
}
void vkCmdDispatchBaseKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shader_draw_parameters
#endif
#ifdef VK_KHR_maintenance1
void vkTrimCommandPoolKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_device_group_creation
void vkEnumeratePhysicalDeviceGroupsKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_memory_capabilities
void vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_memory
#endif
#ifdef VK_KHR_external_memory_win32
void vkGetMemoryWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    // TODO: Implement
}
void vkGetMemoryWin32HandlePropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_memory_fd
void vkGetMemoryFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    // TODO: Implement
}
void vkGetMemoryFdPropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_win32_keyed_mutex
#endif
#ifdef VK_KHR_external_semaphore_capabilities
void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_semaphore
#endif
#ifdef VK_KHR_external_semaphore_win32
void vkImportSemaphoreWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
{
    // TODO: Implement
}
void vkGetSemaphoreWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_semaphore_fd
void vkImportSemaphoreFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
{
    // TODO: Implement
}
void vkGetSemaphoreFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_push_descriptor
void vkCmdPushDescriptorSetKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t set,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites)
{
    // TODO: Implement
}
void vkCmdPushDescriptorSetWithTemplateKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint32_t set,
    const void* pData)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_16bit_storage
#endif
#ifdef VK_KHR_incremental_present
#endif
#ifdef VK_KHR_descriptor_update_template
void vkCreateDescriptorUpdateTemplateKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    // TODO: Implement
}
void vkDestroyDescriptorUpdateTemplateKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkUpdateDescriptorSetWithTemplateKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_create_renderpass2
void vkCreateRenderPass2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo2KHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    // TODO: Implement
}
void vkCmdBeginRenderPass2KHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo)
{
    // TODO: Implement
}
void vkCmdNextSubpass2KHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo,
    const VkSubpassEndInfoKHR* pSubpassEndInfo)
{
    // TODO: Implement
}
void vkCmdEndRenderPass2KHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfoKHR* pSubpassEndInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_shared_presentable_image
void vkGetSwapchainStatusKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_fence_capabilities
void vkGetPhysicalDeviceExternalFencePropertiesKHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_fence
#endif
#ifdef VK_KHR_external_fence_win32
void vkImportFenceWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
{
    // TODO: Implement
}
void vkGetFenceWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_external_fence_fd
void vkImportFenceFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceFdInfoKHR* pImportFenceFdInfo)
{
    // TODO: Implement
}
void vkGetFenceFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_maintenance2
#endif
#ifdef VK_KHR_get_surface_capabilities2
void vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceSurfaceFormats2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_variable_pointers
#endif
#ifdef VK_KHR_get_display_properties2
void vkGetPhysicalDeviceDisplayProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayProperties2KHR* pProperties)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties)
{
    // TODO: Implement
}
void vkGetDisplayModeProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties)
{
    // TODO: Implement
}
void vkGetDisplayPlaneCapabilities2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_dedicated_allocation
#endif
#ifdef VK_KHR_storage_buffer_storage_class
#endif
#ifdef VK_KHR_relaxed_block_layout
#endif
#ifdef VK_KHR_get_memory_requirements2
void vkGetImageMemoryRequirements2KHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetBufferMemoryRequirements2KHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    // TODO: Implement
}
void vkGetImageSparseMemoryRequirements2KHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_image_format_list
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
void vkCreateSamplerYcbcrConversionKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    // TODO: Implement
}
void vkDestroySamplerYcbcrConversionKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_bind_memory2
void vkBindBufferMemory2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
void vkBindImageMemory2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_maintenance3
void vkGetDescriptorSetLayoutSupportKHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_draw_indirect_count
void vkCmdDrawIndirectCountKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawIndexedIndirectCountKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
#endif
#ifdef VK_KHR_8bit_storage
#endif
#ifdef VK_ANDROID_native_buffer
void vkGetSwapchainGrallocUsageANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkFormat format,
    VkImageUsageFlags imageUsage,
    int* grallocUsage)
{
    // TODO: Implement
}
void vkAcquireImageANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    int nativeFenceFd,
    VkSemaphore semaphore,
    VkFence fence)
{
    // TODO: Implement
}
void vkQueueSignalReleaseImageANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t waitSemaphoreCount,
    const VkSemaphore* pWaitSemaphores,
    VkImage image,
    int* pNativeFenceFd)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_debug_report
void vkCreateDebugReportCallbackEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugReportCallbackEXT* pCallback)
{
    // TODO: Implement
}
void vkDestroyDebugReportCallbackEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkDebugReportMessageEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    uint64_t object,
    size_t location,
    int32_t messageCode,
    const char* pLayerPrefix,
    const char* pMessage)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_glsl_shader
#endif
#ifdef VK_EXT_depth_range_unrestricted
#endif
#ifdef VK_IMG_filter_cubic
#endif
#ifdef VK_AMD_rasterization_order
#endif
#ifdef VK_AMD_shader_trinary_minmax
#endif
#ifdef VK_AMD_shader_explicit_vertex_parameter
#endif
#ifdef VK_EXT_debug_marker
void vkDebugMarkerSetObjectTagEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectTagInfoEXT* pTagInfo)
{
    // TODO: Implement
}
void vkDebugMarkerSetObjectNameEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectNameInfoEXT* pNameInfo)
{
    // TODO: Implement
}
void vkCmdDebugMarkerBeginEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    // TODO: Implement
}
void vkCmdDebugMarkerEndEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkCmdDebugMarkerInsertEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_gcn_shader
#endif
#ifdef VK_NV_dedicated_allocation
#endif
#ifdef VK_AMD_draw_indirect_count
void vkCmdDrawIndirectCountAMD(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
void vkCmdDrawIndexedIndirectCountAMD(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_negative_viewport_height
#endif
#ifdef VK_AMD_gpu_shader_half_float
#endif
#ifdef VK_AMD_shader_ballot
#endif
#ifdef VK_AMD_texture_gather_bias_lod
#endif
#ifdef VK_AMD_shader_info
void vkGetShaderInfoAMD(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_shader_image_load_store_lod
#endif
#ifdef VK_IMG_format_pvrtc
#endif
#ifdef VK_NV_external_memory_capabilities
void vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_external_memory
#endif
#ifdef VK_NV_external_memory_win32
void vkGetMemoryWin32HandleNV(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkExternalMemoryHandleTypeFlagsNV handleType,
    HANDLE* pHandle)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_win32_keyed_mutex
#endif
#ifdef VK_EXT_validation_flags
#endif
#ifdef VK_NN_vi_surface
void vkCreateViSurfaceNN(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkViSurfaceCreateInfoNN* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_shader_subgroup_ballot
#endif
#ifdef VK_EXT_shader_subgroup_vote
#endif
#ifdef VK_EXT_conditional_rendering
void vkCmdBeginConditionalRenderingEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
{
    // TODO: Implement
}
void vkCmdEndConditionalRenderingEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
#endif
#ifdef VK_NVX_device_generated_commands
void vkCmdProcessCommandsNVX(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo)
{
    // TODO: Implement
}
void vkCmdReserveSpaceForCommandsNVX(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo)
{
    // TODO: Implement
}
void vkCreateIndirectCommandsLayoutNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout)
{
    // TODO: Implement
}
void vkDestroyIndirectCommandsLayoutNVX(
    android::base::Pool* pool,
    VkDevice device,
    VkIndirectCommandsLayoutNVX indirectCommandsLayout,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkCreateObjectTableNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkObjectTableCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkObjectTableNVX* pObjectTable)
{
    // TODO: Implement
}
void vkDestroyObjectTableNVX(
    android::base::Pool* pool,
    VkDevice device,
    VkObjectTableNVX objectTable,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkRegisterObjectsNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectTableEntryNVX* const* ppObjectTableEntries,
    const uint32_t* pObjectIndices)
{
    // TODO: Implement
}
void vkUnregisterObjectsNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectEntryTypeNVX* pObjectEntryTypes,
    const uint32_t* pObjectIndices)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkDeviceGeneratedCommandsFeaturesNVX* pFeatures,
    VkDeviceGeneratedCommandsLimitsNVX* pLimits)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_clip_space_w_scaling
void vkCmdSetViewportWScalingNV(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewportWScalingNV* pViewportWScalings)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_direct_mode_display
void vkReleaseDisplayEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_acquire_xlib_display
void vkAcquireXlibDisplayEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    VkDisplayKHR display)
{
    // TODO: Implement
}
void vkGetRandROutputDisplayEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    RROutput rrOutput,
    VkDisplayKHR* pDisplay)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_display_surface_counter
void vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_display_control
void vkDisplayPowerControlEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayPowerInfoEXT* pDisplayPowerInfo)
{
    // TODO: Implement
}
void vkRegisterDeviceEventEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDeviceEventInfoEXT* pDeviceEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    // TODO: Implement
}
void vkRegisterDisplayEventEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayEventInfoEXT* pDisplayEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    // TODO: Implement
}
void vkGetSwapchainCounterEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    uint64_t* pCounterValue)
{
    // TODO: Implement
}
#endif
#ifdef VK_GOOGLE_display_timing
void vkGetRefreshCycleDurationGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
{
    // TODO: Implement
}
void vkGetPastPresentationTimingGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings)
{
    // TODO: Implement
}
#endif
#ifdef VK_NV_sample_mask_override_coverage
#endif
#ifdef VK_NV_geometry_shader_passthrough
#endif
#ifdef VK_NV_viewport_array2
#endif
#ifdef VK_NVX_multiview_per_view_attributes
#endif
#ifdef VK_NV_viewport_swizzle
#endif
#ifdef VK_EXT_discard_rectangles
void vkCmdSetDiscardRectangleEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstDiscardRectangle,
    uint32_t discardRectangleCount,
    const VkRect2D* pDiscardRectangles)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_conservative_rasterization
#endif
#ifdef VK_EXT_swapchain_colorspace
#endif
#ifdef VK_EXT_hdr_metadata
void vkSetHdrMetadataEXT(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainKHR* pSwapchains,
    const VkHdrMetadataEXT* pMetadata)
{
    // TODO: Implement
}
#endif
#ifdef VK_MVK_ios_surface
void vkCreateIOSSurfaceMVK(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkIOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_MVK_macos_surface
void vkCreateMacOSSurfaceMVK(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMacOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_external_memory_dma_buf
#endif
#ifdef VK_EXT_queue_family_foreign
#endif
#ifdef VK_EXT_debug_utils
void vkSetDebugUtilsObjectNameEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectNameInfoEXT* pNameInfo)
{
    // TODO: Implement
}
void vkSetDebugUtilsObjectTagEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectTagInfoEXT* pTagInfo)
{
    // TODO: Implement
}
void vkQueueBeginDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkQueueEndDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkQueue queue)
{
    // TODO: Implement
}
void vkQueueInsertDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkCmdBeginDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkCmdEndDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkCmdInsertDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    // TODO: Implement
}
void vkCreateDebugUtilsMessengerEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger)
{
    // TODO: Implement
}
void vkDestroyDebugUtilsMessengerEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkSubmitDebugUtilsMessageEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
{
    // TODO: Implement
}
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void vkGetAndroidHardwareBufferPropertiesANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const AHardwareBuffer* buffer,
    VkAndroidHardwareBufferPropertiesANDROID* pProperties)
{
    // TODO: Implement
}
void vkGetMemoryAndroidHardwareBufferANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    AHardwareBuffer** pBuffer)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_sampler_filter_minmax
#endif
#ifdef VK_AMD_gpu_shader_int16
#endif
#ifdef VK_AMD_mixed_attachment_samples
#endif
#ifdef VK_AMD_shader_fragment_mask
#endif
#ifdef VK_EXT_shader_stencil_export
#endif
#ifdef VK_EXT_sample_locations
void vkCmdSetSampleLocationsEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
    // TODO: Implement
}
void vkGetPhysicalDeviceMultisamplePropertiesEXT(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_blend_operation_advanced
#endif
#ifdef VK_NV_fragment_coverage_to_color
#endif
#ifdef VK_NV_framebuffer_mixed_samples
#endif
#ifdef VK_NV_fill_rectangle
#endif
#ifdef VK_EXT_post_depth_coverage
#endif
#ifdef VK_EXT_validation_cache
void vkCreateValidationCacheEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkValidationCacheCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkValidationCacheEXT* pValidationCache)
{
    // TODO: Implement
}
void vkDestroyValidationCacheEXT(
    android::base::Pool* pool,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const VkAllocationCallbacks* pAllocator)
{
    // TODO: Implement
}
void vkMergeValidationCachesEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint32_t srcCacheCount,
    const VkValidationCacheEXT* pSrcCaches)
{
    // TODO: Implement
}
void vkGetValidationCacheDataEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData)
{
    // TODO: Implement
}
#endif
#ifdef VK_EXT_descriptor_indexing
#endif
#ifdef VK_EXT_shader_viewport_index_layer
#endif
#ifdef VK_EXT_global_priority
#endif
#ifdef VK_EXT_external_memory_host
void vkGetMemoryHostPointerPropertiesEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const void* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_buffer_marker
void vkCmdWriteBufferMarkerAMD(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker)
{
    // TODO: Implement
}
#endif
#ifdef VK_AMD_shader_core_properties
#endif
#ifdef VK_EXT_vertex_attribute_divisor
#endif
#ifdef VK_NV_shader_subgroup_partitioned
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void vkCmdSetCheckpointNV(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const void* pCheckpointMarker)
{
    // TODO: Implement
}
void vkGetQueueCheckpointDataNV(
    android::base::Pool* pool,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData)
{
    // TODO: Implement
}
#endif
#ifdef VK_GOOGLE_address_space
void vkMapMemoryIntoAddressSpaceGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    uint64_t* pAddress)
{
    // TODO: Implement
}
#endif
#ifdef VK_GOOGLE_color_buffer
void vkRegisterImageColorBufferGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    uint32_t colorBuffer)
{
    // TODO: Implement
}
void vkRegisterBufferColorBufferGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    uint32_t colorBuffer)
{
    // TODO: Implement
}
#endif
#ifdef VK_GOOGLE_sized_descriptor_update_template
void vkUpdateDescriptorSetWithTemplateSizedGOOGLE(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    uint32_t imageInfoCount,
    uint32_t bufferInfoCount,
    uint32_t bufferViewCount,
    const uint32_t* pImageInfoEntryIndices,
    const uint32_t* pBufferInfoEntryIndices,
    const uint32_t* pBufferViewEntryIndices,
    const VkDescriptorImageInfo* pImageInfos,
    const VkDescriptorBufferInfo* pBufferInfos,
    const VkBufferView* pBufferViews)
{
    // TODO: Implement
}
#endif
#ifdef VK_GOOGLE_async_command_buffers
void vkBeginCommandBufferAsyncGOOGLE(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    // TODO: Implement
}
void vkEndCommandBufferAsyncGOOGLE(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    // TODO: Implement
}
void vkResetCommandBufferAsyncGOOGLE(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    // TODO: Implement
}
#endif

};

VkDecoderSnapshot::VkDecoderSnapshot() :
    mImpl(new VkDecoderSnapshot::Impl()) { }

VkDecoderSnapshot::~VkDecoderSnapshot() = default;
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateInstance(
    android::base::Pool* pool,
    VkResult input_result,
    const VkInstanceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkInstance* pInstance)
{
    mImpl->vkCreateInstance(pool, input_result, pCreateInfo, pAllocator, pInstance);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyInstance(
    android::base::Pool* pool,
    VkInstance instance,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyInstance(pool, instance, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumeratePhysicalDevices(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceCount,
    VkPhysicalDevice* pPhysicalDevices)
{
    mImpl->vkEnumeratePhysicalDevices(pool, input_result, instance, pPhysicalDeviceCount, pPhysicalDevices);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceFeatures(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures* pFeatures)
{
    mImpl->vkGetPhysicalDeviceFeatures(pool, physicalDevice, pFeatures);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceFormatProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties* pFormatProperties)
{
    mImpl->vkGetPhysicalDeviceFormatProperties(pool, physicalDevice, format, pFormatProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceImageFormatProperties(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkImageFormatProperties* pImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceImageFormatProperties(pool, input_result, physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties* pProperties)
{
    mImpl->vkGetPhysicalDeviceProperties(pool, physicalDevice, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceQueueFamilyProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties* pQueueFamilyProperties)
{
    mImpl->vkGetPhysicalDeviceQueueFamilyProperties(pool, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceMemoryProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties* pMemoryProperties)
{
    mImpl->vkGetPhysicalDeviceMemoryProperties(pool, physicalDevice, pMemoryProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetInstanceProcAddr(
    android::base::Pool* pool,
    PFN_vkVoidFunction input_result,
    VkInstance instance,
    const char* pName)
{
    mImpl->vkGetInstanceProcAddr(pool, input_result, instance, pName);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetDeviceProcAddr(
    android::base::Pool* pool,
    PFN_vkVoidFunction input_result,
    VkDevice device,
    const char* pName)
{
    mImpl->vkGetDeviceProcAddr(pool, input_result, device, pName);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateDevice(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDeviceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDevice* pDevice)
{
    mImpl->vkCreateDevice(pool, input_result, physicalDevice, pCreateInfo, pAllocator, pDevice);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyDevice(
    android::base::Pool* pool,
    VkDevice device,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDevice(pool, device, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateInstanceExtensionProperties(
    android::base::Pool* pool,
    VkResult input_result,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    mImpl->vkEnumerateInstanceExtensionProperties(pool, input_result, pLayerName, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateDeviceExtensionProperties(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const char* pLayerName,
    uint32_t* pPropertyCount,
    VkExtensionProperties* pProperties)
{
    mImpl->vkEnumerateDeviceExtensionProperties(pool, input_result, physicalDevice, pLayerName, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateInstanceLayerProperties(
    android::base::Pool* pool,
    VkResult input_result,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    mImpl->vkEnumerateInstanceLayerProperties(pool, input_result, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEnumerateDeviceLayerProperties(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkLayerProperties* pProperties)
{
    mImpl->vkEnumerateDeviceLayerProperties(pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetDeviceQueue(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t queueFamilyIndex,
    uint32_t queueIndex,
    VkQueue* pQueue)
{
    mImpl->vkGetDeviceQueue(pool, device, queueFamilyIndex, queueIndex, pQueue);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkQueueSubmit(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t submitCount,
    const VkSubmitInfo* pSubmits,
    VkFence fence)
{
    mImpl->vkQueueSubmit(pool, input_result, queue, submitCount, pSubmits, fence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkQueueWaitIdle(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue)
{
    mImpl->vkQueueWaitIdle(pool, input_result, queue);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDeviceWaitIdle(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device)
{
    mImpl->vkDeviceWaitIdle(pool, input_result, device);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkAllocateMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryAllocateInfo* pAllocateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDeviceMemory* pMemory)
{
    mImpl->vkAllocateMemory(pool, input_result, device, pAllocateInfo, pAllocator, pMemory);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFreeMemory(
    android::base::Pool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkFreeMemory(pool, device, memory, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkMapMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize offset,
    VkDeviceSize size,
    VkMemoryMapFlags flags,
    void** ppData)
{
    mImpl->vkMapMemory(pool, input_result, device, memory, offset, size, flags, ppData);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkUnmapMemory(
    android::base::Pool* pool,
    VkDevice device,
    VkDeviceMemory memory)
{
    mImpl->vkUnmapMemory(pool, device, memory);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFlushMappedMemoryRanges(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    mImpl->vkFlushMappedMemoryRanges(pool, input_result, device, memoryRangeCount, pMemoryRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkInvalidateMappedMemoryRanges(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t memoryRangeCount,
    const VkMappedMemoryRange* pMemoryRanges)
{
    mImpl->vkInvalidateMappedMemoryRanges(pool, input_result, device, memoryRangeCount, pMemoryRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetDeviceMemoryCommitment(
    android::base::Pool* pool,
    VkDevice device,
    VkDeviceMemory memory,
    VkDeviceSize* pCommittedMemoryInBytes)
{
    mImpl->vkGetDeviceMemoryCommitment(pool, device, memory, pCommittedMemoryInBytes);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkBindBufferMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    mImpl->vkBindBufferMemory(pool, input_result, device, buffer, memory, memoryOffset);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkBindImageMemory(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    VkDeviceMemory memory,
    VkDeviceSize memoryOffset)
{
    mImpl->vkBindImageMemory(pool, input_result, device, image, memory, memoryOffset);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetBufferMemoryRequirements(
    android::base::Pool* pool,
    VkDevice device,
    VkBuffer buffer,
    VkMemoryRequirements* pMemoryRequirements)
{
    mImpl->vkGetBufferMemoryRequirements(pool, device, buffer, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetImageMemoryRequirements(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    VkMemoryRequirements* pMemoryRequirements)
{
    mImpl->vkGetImageMemoryRequirements(pool, device, image, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetImageSparseMemoryRequirements(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
{
    mImpl->vkGetImageSparseMemoryRequirements(pool, device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPhysicalDeviceSparseImageFormatProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkSampleCountFlagBits samples,
    VkImageUsageFlags usage,
    VkImageTiling tiling,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties* pProperties)
{
    mImpl->vkGetPhysicalDeviceSparseImageFormatProperties(pool, physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkQueueBindSparse(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t bindInfoCount,
    const VkBindSparseInfo* pBindInfo,
    VkFence fence)
{
    mImpl->vkQueueBindSparse(pool, input_result, queue, bindInfoCount, pBindInfo, fence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateFence(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    mImpl->vkCreateFence(pool, input_result, device, pCreateInfo, pAllocator, pFence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyFence(
    android::base::Pool* pool,
    VkDevice device,
    VkFence fence,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyFence(pool, device, fence, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetFences(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences)
{
    mImpl->vkResetFences(pool, input_result, device, fenceCount, pFences);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetFenceStatus(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkFence fence)
{
    mImpl->vkGetFenceStatus(pool, input_result, device, fence);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkWaitForFences(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t fenceCount,
    const VkFence* pFences,
    VkBool32 waitAll,
    uint64_t timeout)
{
    mImpl->vkWaitForFences(pool, input_result, device, fenceCount, pFences, waitAll, timeout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateSemaphore(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSemaphore* pSemaphore)
{
    mImpl->vkCreateSemaphore(pool, input_result, device, pCreateInfo, pAllocator, pSemaphore);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroySemaphore(
    android::base::Pool* pool,
    VkDevice device,
    VkSemaphore semaphore,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySemaphore(pool, device, semaphore, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateEvent(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkEventCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkEvent* pEvent)
{
    mImpl->vkCreateEvent(pool, input_result, device, pCreateInfo, pAllocator, pEvent);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyEvent(
    android::base::Pool* pool,
    VkDevice device,
    VkEvent event,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyEvent(pool, device, event, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetEventStatus(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    mImpl->vkGetEventStatus(pool, input_result, device, event);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkSetEvent(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    mImpl->vkSetEvent(pool, input_result, device, event);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetEvent(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkEvent event)
{
    mImpl->vkResetEvent(pool, input_result, device, event);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateQueryPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkQueryPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkQueryPool* pQueryPool)
{
    mImpl->vkCreateQueryPool(pool, input_result, device, pCreateInfo, pAllocator, pQueryPool);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyQueryPool(
    android::base::Pool* pool,
    VkDevice device,
    VkQueryPool queryPool,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyQueryPool(pool, device, queryPool, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetQueryPoolResults(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    size_t dataSize,
    void* pData,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    mImpl->vkGetQueryPoolResults(pool, input_result, device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBuffer* pBuffer)
{
    mImpl->vkCreateBuffer(pool, input_result, device, pCreateInfo, pAllocator, pBuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyBuffer(
    android::base::Pool* pool,
    VkDevice device,
    VkBuffer buffer,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyBuffer(pool, device, buffer, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateBufferView(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkBufferViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkBufferView* pView)
{
    mImpl->vkCreateBufferView(pool, input_result, device, pCreateInfo, pAllocator, pView);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyBufferView(
    android::base::Pool* pool,
    VkDevice device,
    VkBufferView bufferView,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyBufferView(pool, device, bufferView, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateImage(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImage* pImage)
{
    mImpl->vkCreateImage(pool, input_result, device, pCreateInfo, pAllocator, pImage);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyImage(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyImage(pool, device, image, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetImageSubresourceLayout(
    android::base::Pool* pool,
    VkDevice device,
    VkImage image,
    const VkImageSubresource* pSubresource,
    VkSubresourceLayout* pLayout)
{
    mImpl->vkGetImageSubresourceLayout(pool, device, image, pSubresource, pLayout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateImageView(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImageViewCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkImageView* pView)
{
    mImpl->vkCreateImageView(pool, input_result, device, pCreateInfo, pAllocator, pView);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyImageView(
    android::base::Pool* pool,
    VkDevice device,
    VkImageView imageView,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyImageView(pool, device, imageView, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateShaderModule(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkShaderModuleCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkShaderModule* pShaderModule)
{
    mImpl->vkCreateShaderModule(pool, input_result, device, pCreateInfo, pAllocator, pShaderModule);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyShaderModule(
    android::base::Pool* pool,
    VkDevice device,
    VkShaderModule shaderModule,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyShaderModule(pool, device, shaderModule, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreatePipelineCache(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineCacheCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineCache* pPipelineCache)
{
    mImpl->vkCreatePipelineCache(pool, input_result, device, pCreateInfo, pAllocator, pPipelineCache);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyPipelineCache(
    android::base::Pool* pool,
    VkDevice device,
    VkPipelineCache pipelineCache,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyPipelineCache(pool, device, pipelineCache, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetPipelineCacheData(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    size_t* pDataSize,
    void* pData)
{
    mImpl->vkGetPipelineCacheData(pool, input_result, device, pipelineCache, pDataSize, pData);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkMergePipelineCaches(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache dstCache,
    uint32_t srcCacheCount,
    const VkPipelineCache* pSrcCaches)
{
    mImpl->vkMergePipelineCaches(pool, input_result, device, dstCache, srcCacheCount, pSrcCaches);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateGraphicsPipelines(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkGraphicsPipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    mImpl->vkCreateGraphicsPipelines(pool, input_result, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateComputePipelines(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipelineCache pipelineCache,
    uint32_t createInfoCount,
    const VkComputePipelineCreateInfo* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkPipeline* pPipelines)
{
    mImpl->vkCreateComputePipelines(pool, input_result, device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyPipeline(
    android::base::Pool* pool,
    VkDevice device,
    VkPipeline pipeline,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyPipeline(pool, device, pipeline, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreatePipelineLayout(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkPipelineLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkPipelineLayout* pPipelineLayout)
{
    mImpl->vkCreatePipelineLayout(pool, input_result, device, pCreateInfo, pAllocator, pPipelineLayout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyPipelineLayout(
    android::base::Pool* pool,
    VkDevice device,
    VkPipelineLayout pipelineLayout,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyPipelineLayout(pool, device, pipelineLayout, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateSampler(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSampler* pSampler)
{
    mImpl->vkCreateSampler(pool, input_result, device, pCreateInfo, pAllocator, pSampler);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroySampler(
    android::base::Pool* pool,
    VkDevice device,
    VkSampler sampler,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySampler(pool, device, sampler, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateDescriptorSetLayout(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorSetLayout* pSetLayout)
{
    mImpl->vkCreateDescriptorSetLayout(pool, input_result, device, pCreateInfo, pAllocator, pSetLayout);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyDescriptorSetLayout(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSetLayout descriptorSetLayout,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorSetLayout(pool, device, descriptorSetLayout, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateDescriptorPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorPool* pDescriptorPool)
{
    mImpl->vkCreateDescriptorPool(pool, input_result, device, pCreateInfo, pAllocator, pDescriptorPool);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyDescriptorPool(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorPool(pool, device, descriptorPool, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetDescriptorPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    VkDescriptorPoolResetFlags flags)
{
    mImpl->vkResetDescriptorPool(pool, input_result, device, descriptorPool, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkAllocateDescriptorSets(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorSetAllocateInfo* pAllocateInfo,
    VkDescriptorSet* pDescriptorSets)
{
    mImpl->vkAllocateDescriptorSets(pool, input_result, device, pAllocateInfo, pDescriptorSets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFreeDescriptorSets(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDescriptorPool descriptorPool,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets)
{
    mImpl->vkFreeDescriptorSets(pool, input_result, device, descriptorPool, descriptorSetCount, pDescriptorSets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkUpdateDescriptorSets(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites,
    uint32_t descriptorCopyCount,
    const VkCopyDescriptorSet* pDescriptorCopies)
{
    mImpl->vkUpdateDescriptorSets(pool, device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateFramebuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFramebufferCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFramebuffer* pFramebuffer)
{
    mImpl->vkCreateFramebuffer(pool, input_result, device, pCreateInfo, pAllocator, pFramebuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyFramebuffer(
    android::base::Pool* pool,
    VkDevice device,
    VkFramebuffer framebuffer,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyFramebuffer(pool, device, framebuffer, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateRenderPass(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    mImpl->vkCreateRenderPass(pool, input_result, device, pCreateInfo, pAllocator, pRenderPass);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyRenderPass(
    android::base::Pool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyRenderPass(pool, device, renderPass, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkGetRenderAreaGranularity(
    android::base::Pool* pool,
    VkDevice device,
    VkRenderPass renderPass,
    VkExtent2D* pGranularity)
{
    mImpl->vkGetRenderAreaGranularity(pool, device, renderPass, pGranularity);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCreateCommandPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandPoolCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkCommandPool* pCommandPool)
{
    mImpl->vkCreateCommandPool(pool, input_result, device, pCreateInfo, pAllocator, pCommandPool);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkDestroyCommandPool(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyCommandPool(pool, device, commandPool, pAllocator);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetCommandPool(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolResetFlags flags)
{
    mImpl->vkResetCommandPool(pool, input_result, device, commandPool, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkAllocateCommandBuffers(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkCommandBufferAllocateInfo* pAllocateInfo,
    VkCommandBuffer* pCommandBuffers)
{
    mImpl->vkAllocateCommandBuffers(pool, input_result, device, pAllocateInfo, pCommandBuffers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkFreeCommandBuffers(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    mImpl->vkFreeCommandBuffers(pool, device, commandPool, commandBufferCount, pCommandBuffers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkBeginCommandBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    mImpl->vkBeginCommandBuffer(pool, input_result, commandBuffer, pBeginInfo);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkEndCommandBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkEndCommandBuffer(pool, input_result, commandBuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkResetCommandBuffer(
    android::base::Pool* pool,
    VkResult input_result,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    mImpl->vkResetCommandBuffer(pool, input_result, commandBuffer, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindPipeline(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipeline pipeline)
{
    mImpl->vkCmdBindPipeline(pool, commandBuffer, pipelineBindPoint, pipeline);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetViewport(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewport* pViewports)
{
    mImpl->vkCmdSetViewport(pool, commandBuffer, firstViewport, viewportCount, pViewports);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetScissor(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstScissor,
    uint32_t scissorCount,
    const VkRect2D* pScissors)
{
    mImpl->vkCmdSetScissor(pool, commandBuffer, firstScissor, scissorCount, pScissors);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetLineWidth(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    float lineWidth)
{
    mImpl->vkCmdSetLineWidth(pool, commandBuffer, lineWidth);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetDepthBias(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    float depthBiasConstantFactor,
    float depthBiasClamp,
    float depthBiasSlopeFactor)
{
    mImpl->vkCmdSetDepthBias(pool, commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetBlendConstants(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const float blendConstants[4])
{
    mImpl->vkCmdSetBlendConstants(pool, commandBuffer, blendConstants);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetDepthBounds(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    float minDepthBounds,
    float maxDepthBounds)
{
    mImpl->vkCmdSetDepthBounds(pool, commandBuffer, minDepthBounds, maxDepthBounds);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetStencilCompareMask(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t compareMask)
{
    mImpl->vkCmdSetStencilCompareMask(pool, commandBuffer, faceMask, compareMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetStencilWriteMask(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t writeMask)
{
    mImpl->vkCmdSetStencilWriteMask(pool, commandBuffer, faceMask, writeMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetStencilReference(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkStencilFaceFlags faceMask,
    uint32_t reference)
{
    mImpl->vkCmdSetStencilReference(pool, commandBuffer, faceMask, reference);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindDescriptorSets(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t firstSet,
    uint32_t descriptorSetCount,
    const VkDescriptorSet* pDescriptorSets,
    uint32_t dynamicOffsetCount,
    const uint32_t* pDynamicOffsets)
{
    mImpl->vkCmdBindDescriptorSets(pool, commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindIndexBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkIndexType indexType)
{
    mImpl->vkCmdBindIndexBuffer(pool, commandBuffer, buffer, offset, indexType);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBindVertexBuffers(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstBinding,
    uint32_t bindingCount,
    const VkBuffer* pBuffers,
    const VkDeviceSize* pOffsets)
{
    mImpl->vkCmdBindVertexBuffers(pool, commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDraw(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t vertexCount,
    uint32_t instanceCount,
    uint32_t firstVertex,
    uint32_t firstInstance)
{
    mImpl->vkCmdDraw(pool, commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDrawIndexed(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t indexCount,
    uint32_t instanceCount,
    uint32_t firstIndex,
    int32_t vertexOffset,
    uint32_t firstInstance)
{
    mImpl->vkCmdDrawIndexed(pool, commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDrawIndirect(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndirect(pool, commandBuffer, buffer, offset, drawCount, stride);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDrawIndexedIndirect(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    uint32_t drawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndexedIndirect(pool, commandBuffer, buffer, offset, drawCount, stride);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDispatch(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    mImpl->vkCmdDispatch(pool, commandBuffer, groupCountX, groupCountY, groupCountZ);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdDispatchIndirect(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset)
{
    mImpl->vkCmdDispatchIndirect(pool, commandBuffer, buffer, offset);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferCopy* pRegions)
{
    mImpl->vkCmdCopyBuffer(pool, commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageCopy* pRegions)
{
    mImpl->vkCmdCopyImage(pool, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBlitImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageBlit* pRegions,
    VkFilter filter)
{
    mImpl->vkCmdBlitImage(pool, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyBufferToImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer srcBuffer,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    mImpl->vkCmdCopyBufferToImage(pool, commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyImageToBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkBuffer dstBuffer,
    uint32_t regionCount,
    const VkBufferImageCopy* pRegions)
{
    mImpl->vkCmdCopyImageToBuffer(pool, commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdUpdateBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize dataSize,
    const void* pData)
{
    mImpl->vkCmdUpdateBuffer(pool, commandBuffer, dstBuffer, dstOffset, dataSize, pData);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdFillBuffer(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize size,
    uint32_t data)
{
    mImpl->vkCmdFillBuffer(pool, commandBuffer, dstBuffer, dstOffset, size, data);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdClearColorImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearColorValue* pColor,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    mImpl->vkCmdClearColorImage(pool, commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdClearDepthStencilImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage image,
    VkImageLayout imageLayout,
    const VkClearDepthStencilValue* pDepthStencil,
    uint32_t rangeCount,
    const VkImageSubresourceRange* pRanges)
{
    mImpl->vkCmdClearDepthStencilImage(pool, commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdClearAttachments(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t attachmentCount,
    const VkClearAttachment* pAttachments,
    uint32_t rectCount,
    const VkClearRect* pRects)
{
    mImpl->vkCmdClearAttachments(pool, commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdResolveImage(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkImage srcImage,
    VkImageLayout srcImageLayout,
    VkImage dstImage,
    VkImageLayout dstImageLayout,
    uint32_t regionCount,
    const VkImageResolve* pRegions)
{
    mImpl->vkCmdResolveImage(pool, commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdSetEvent(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    mImpl->vkCmdSetEvent(pool, commandBuffer, event, stageMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdResetEvent(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkEvent event,
    VkPipelineStageFlags stageMask)
{
    mImpl->vkCmdResetEvent(pool, commandBuffer, event, stageMask);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdWaitEvents(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t eventCount,
    const VkEvent* pEvents,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    mImpl->vkCmdWaitEvents(pool, commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdPipelineBarrier(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlags srcStageMask,
    VkPipelineStageFlags dstStageMask,
    VkDependencyFlags dependencyFlags,
    uint32_t memoryBarrierCount,
    const VkMemoryBarrier* pMemoryBarriers,
    uint32_t bufferMemoryBarrierCount,
    const VkBufferMemoryBarrier* pBufferMemoryBarriers,
    uint32_t imageMemoryBarrierCount,
    const VkImageMemoryBarrier* pImageMemoryBarriers)
{
    mImpl->vkCmdPipelineBarrier(pool, commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBeginQuery(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query,
    VkQueryControlFlags flags)
{
    mImpl->vkCmdBeginQuery(pool, commandBuffer, queryPool, query, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdEndQuery(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t query)
{
    mImpl->vkCmdEndQuery(pool, commandBuffer, queryPool, query);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdResetQueryPool(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount)
{
    mImpl->vkCmdResetQueryPool(pool, commandBuffer, queryPool, firstQuery, queryCount);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdWriteTimestamp(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkQueryPool queryPool,
    uint32_t query)
{
    mImpl->vkCmdWriteTimestamp(pool, commandBuffer, pipelineStage, queryPool, query);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdCopyQueryPoolResults(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkQueryPool queryPool,
    uint32_t firstQuery,
    uint32_t queryCount,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    VkDeviceSize stride,
    VkQueryResultFlags flags)
{
    mImpl->vkCmdCopyQueryPoolResults(pool, commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdPushConstants(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineLayout layout,
    VkShaderStageFlags stageFlags,
    uint32_t offset,
    uint32_t size,
    const void* pValues)
{
    mImpl->vkCmdPushConstants(pool, commandBuffer, layout, stageFlags, offset, size, pValues);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdBeginRenderPass(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    VkSubpassContents contents)
{
    mImpl->vkCmdBeginRenderPass(pool, commandBuffer, pRenderPassBegin, contents);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdNextSubpass(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkSubpassContents contents)
{
    mImpl->vkCmdNextSubpass(pool, commandBuffer, contents);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdEndRenderPass(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdEndRenderPass(pool, commandBuffer);
}
#endif
#ifdef VK_VERSION_1_0
void VkDecoderSnapshot::vkCmdExecuteCommands(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t commandBufferCount,
    const VkCommandBuffer* pCommandBuffers)
{
    mImpl->vkCmdExecuteCommands(pool, commandBuffer, commandBufferCount, pCommandBuffers);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkEnumerateInstanceVersion(
    android::base::Pool* pool,
    VkResult input_result,
    uint32_t* pApiVersion)
{
    mImpl->vkEnumerateInstanceVersion(pool, input_result, pApiVersion);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkBindBufferMemory2(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    mImpl->vkBindBufferMemory2(pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkBindImageMemory2(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    mImpl->vkBindImageMemory2(pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetDeviceGroupPeerMemoryFeatures(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    mImpl->vkGetDeviceGroupPeerMemoryFeatures(pool, device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCmdSetDeviceMask(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    mImpl->vkCmdSetDeviceMask(pool, commandBuffer, deviceMask);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCmdDispatchBase(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    mImpl->vkCmdDispatchBase(pool, commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkEnumeratePhysicalDeviceGroups(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    mImpl->vkEnumeratePhysicalDeviceGroups(pool, input_result, instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetImageMemoryRequirements2(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetImageMemoryRequirements2(pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetBufferMemoryRequirements2(
    android::base::Pool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetBufferMemoryRequirements2(pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetImageSparseMemoryRequirements2(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    mImpl->vkGetImageSparseMemoryRequirements2(pool, device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceFeatures2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    mImpl->vkGetPhysicalDeviceFeatures2(pool, physicalDevice, pFeatures);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceProperties2(pool, physicalDevice, pProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceFormatProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    mImpl->vkGetPhysicalDeviceFormatProperties2(pool, physicalDevice, format, pFormatProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceImageFormatProperties2(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceImageFormatProperties2(pool, input_result, physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceQueueFamilyProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    mImpl->vkGetPhysicalDeviceQueueFamilyProperties2(pool, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceMemoryProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    mImpl->vkGetPhysicalDeviceMemoryProperties2(pool, physicalDevice, pMemoryProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceSparseImageFormatProperties2(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceSparseImageFormatProperties2(pool, physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkTrimCommandPool(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    mImpl->vkTrimCommandPool(pool, device, commandPool, flags);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetDeviceQueue2(
    android::base::Pool* pool,
    VkDevice device,
    const VkDeviceQueueInfo2* pQueueInfo,
    VkQueue* pQueue)
{
    mImpl->vkGetDeviceQueue2(pool, device, pQueueInfo, pQueue);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCreateSamplerYcbcrConversion(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    mImpl->vkCreateSamplerYcbcrConversion(pool, input_result, device, pCreateInfo, pAllocator, pYcbcrConversion);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkDestroySamplerYcbcrConversion(
    android::base::Pool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySamplerYcbcrConversion(pool, device, ycbcrConversion, pAllocator);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkCreateDescriptorUpdateTemplate(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    mImpl->vkCreateDescriptorUpdateTemplate(pool, input_result, device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkDestroyDescriptorUpdateTemplate(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorUpdateTemplate(pool, device, descriptorUpdateTemplate, pAllocator);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkUpdateDescriptorSetWithTemplate(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    mImpl->vkUpdateDescriptorSetWithTemplate(pool, device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalBufferProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    mImpl->vkGetPhysicalDeviceExternalBufferProperties(pool, physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalFenceProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    mImpl->vkGetPhysicalDeviceExternalFenceProperties(pool, physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalSemaphoreProperties(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    mImpl->vkGetPhysicalDeviceExternalSemaphoreProperties(pool, physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
#endif
#ifdef VK_VERSION_1_1
void VkDecoderSnapshot::vkGetDescriptorSetLayoutSupport(
    android::base::Pool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    mImpl->vkGetDescriptorSetLayoutSupport(pool, device, pCreateInfo, pSupport);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkDestroySurfaceKHR(
    android::base::Pool* pool,
    VkInstance instance,
    VkSurfaceKHR surface,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySurfaceKHR(pool, instance, surface, pAllocator);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceSupportKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    VkSurfaceKHR surface,
    VkBool32* pSupported)
{
    mImpl->vkGetPhysicalDeviceSurfaceSupportKHR(pool, input_result, physicalDevice, queueFamilyIndex, surface, pSupported);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceCapabilitiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
{
    mImpl->vkGetPhysicalDeviceSurfaceCapabilitiesKHR(pool, input_result, physicalDevice, surface, pSurfaceCapabilities);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceFormatsKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormatKHR* pSurfaceFormats)
{
    mImpl->vkGetPhysicalDeviceSurfaceFormatsKHR(pool, input_result, physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
}
#endif
#ifdef VK_KHR_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfacePresentModesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pPresentModeCount,
    VkPresentModeKHR* pPresentModes)
{
    mImpl->vkGetPhysicalDeviceSurfacePresentModesKHR(pool, input_result, physicalDevice, surface, pPresentModeCount, pPresentModes);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkCreateSwapchainKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSwapchainCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchain)
{
    mImpl->vkCreateSwapchainKHR(pool, input_result, device, pCreateInfo, pAllocator, pSwapchain);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkDestroySwapchainKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkSwapchainKHR swapchain,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySwapchainKHR(pool, device, swapchain, pAllocator);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetSwapchainImagesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pSwapchainImageCount,
    VkImage* pSwapchainImages)
{
    mImpl->vkGetSwapchainImagesKHR(pool, input_result, device, swapchain, pSwapchainImageCount, pSwapchainImages);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkAcquireNextImageKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint64_t timeout,
    VkSemaphore semaphore,
    VkFence fence,
    uint32_t* pImageIndex)
{
    mImpl->vkAcquireNextImageKHR(pool, input_result, device, swapchain, timeout, semaphore, fence, pImageIndex);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkQueuePresentKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    const VkPresentInfoKHR* pPresentInfo)
{
    mImpl->vkQueuePresentKHR(pool, input_result, queue, pPresentInfo);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetDeviceGroupPresentCapabilitiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
{
    mImpl->vkGetDeviceGroupPresentCapabilitiesKHR(pool, input_result, device, pDeviceGroupPresentCapabilities);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetDeviceGroupSurfacePresentModesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSurfaceKHR surface,
    VkDeviceGroupPresentModeFlagsKHR* pModes)
{
    mImpl->vkGetDeviceGroupSurfacePresentModesKHR(pool, input_result, device, surface, pModes);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkGetPhysicalDevicePresentRectanglesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    uint32_t* pRectCount,
    VkRect2D* pRects)
{
    mImpl->vkGetPhysicalDevicePresentRectanglesKHR(pool, input_result, physicalDevice, surface, pRectCount, pRects);
}
#endif
#ifdef VK_KHR_swapchain
void VkDecoderSnapshot::vkAcquireNextImage2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkAcquireNextImageInfoKHR* pAcquireInfo,
    uint32_t* pImageIndex)
{
    mImpl->vkAcquireNextImage2KHR(pool, input_result, device, pAcquireInfo, pImageIndex);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayPropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPropertiesKHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayPropertiesKHR(pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayPlanePropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlanePropertiesKHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayPlanePropertiesKHR(pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetDisplayPlaneSupportedDisplaysKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t planeIndex,
    uint32_t* pDisplayCount,
    VkDisplayKHR* pDisplays)
{
    mImpl->vkGetDisplayPlaneSupportedDisplaysKHR(pool, input_result, physicalDevice, planeIndex, pDisplayCount, pDisplays);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetDisplayModePropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModePropertiesKHR* pProperties)
{
    mImpl->vkGetDisplayModePropertiesKHR(pool, input_result, physicalDevice, display, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkCreateDisplayModeKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    const VkDisplayModeCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDisplayModeKHR* pMode)
{
    mImpl->vkCreateDisplayModeKHR(pool, input_result, physicalDevice, display, pCreateInfo, pAllocator, pMode);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkGetDisplayPlaneCapabilitiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayModeKHR mode,
    uint32_t planeIndex,
    VkDisplayPlaneCapabilitiesKHR* pCapabilities)
{
    mImpl->vkGetDisplayPlaneCapabilitiesKHR(pool, input_result, physicalDevice, mode, planeIndex, pCapabilities);
}
#endif
#ifdef VK_KHR_display
void VkDecoderSnapshot::vkCreateDisplayPlaneSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDisplaySurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateDisplayPlaneSurfaceKHR(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_display_swapchain
void VkDecoderSnapshot::vkCreateSharedSwapchainsKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainCreateInfoKHR* pCreateInfos,
    const VkAllocationCallbacks* pAllocator,
    VkSwapchainKHR* pSwapchains)
{
    mImpl->vkCreateSharedSwapchainsKHR(pool, input_result, device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
}
#endif
#ifdef VK_KHR_xlib_surface
void VkDecoderSnapshot::vkCreateXlibSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXlibSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateXlibSurfaceKHR(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_xlib_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceXlibPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    Display* dpy,
    VisualID visualID)
{
    mImpl->vkGetPhysicalDeviceXlibPresentationSupportKHR(pool, input_result, physicalDevice, queueFamilyIndex, dpy, visualID);
}
#endif
#ifdef VK_KHR_xcb_surface
void VkDecoderSnapshot::vkCreateXcbSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkXcbSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateXcbSurfaceKHR(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_xcb_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceXcbPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    xcb_connection_t* connection,
    xcb_visualid_t visual_id)
{
    mImpl->vkGetPhysicalDeviceXcbPresentationSupportKHR(pool, input_result, physicalDevice, queueFamilyIndex, connection, visual_id);
}
#endif
#ifdef VK_KHR_wayland_surface
void VkDecoderSnapshot::vkCreateWaylandSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWaylandSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateWaylandSurfaceKHR(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_wayland_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceWaylandPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    wl_display* display)
{
    mImpl->vkGetPhysicalDeviceWaylandPresentationSupportKHR(pool, input_result, physicalDevice, queueFamilyIndex, display);
}
#endif
#ifdef VK_KHR_mir_surface
void VkDecoderSnapshot::vkCreateMirSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMirSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateMirSurfaceKHR(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_mir_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceMirPresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex,
    MirConnection* connection)
{
    mImpl->vkGetPhysicalDeviceMirPresentationSupportKHR(pool, input_result, physicalDevice, queueFamilyIndex, connection);
}
#endif
#ifdef VK_KHR_android_surface
void VkDecoderSnapshot::vkCreateAndroidSurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkAndroidSurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateAndroidSurfaceKHR(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_win32_surface
void VkDecoderSnapshot::vkCreateWin32SurfaceKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkWin32SurfaceCreateInfoKHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateWin32SurfaceKHR(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_KHR_win32_surface
void VkDecoderSnapshot::vkGetPhysicalDeviceWin32PresentationSupportKHR(
    android::base::Pool* pool,
    VkBool32 input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t queueFamilyIndex)
{
    mImpl->vkGetPhysicalDeviceWin32PresentationSupportKHR(pool, input_result, physicalDevice, queueFamilyIndex);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceFeatures2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceFeatures2* pFeatures)
{
    mImpl->vkGetPhysicalDeviceFeatures2KHR(pool, physicalDevice, pFeatures);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceProperties2KHR(pool, physicalDevice, pProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceFormatProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkFormatProperties2* pFormatProperties)
{
    mImpl->vkGetPhysicalDeviceFormatProperties2KHR(pool, physicalDevice, format, pFormatProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceImageFormatProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo,
    VkImageFormatProperties2* pImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceImageFormatProperties2KHR(pool, input_result, physicalDevice, pImageFormatInfo, pImageFormatProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceQueueFamilyProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    uint32_t* pQueueFamilyPropertyCount,
    VkQueueFamilyProperties2* pQueueFamilyProperties)
{
    mImpl->vkGetPhysicalDeviceQueueFamilyProperties2KHR(pool, physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceMemoryProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
{
    mImpl->vkGetPhysicalDeviceMemoryProperties2KHR(pool, physicalDevice, pMemoryProperties);
}
#endif
#ifdef VK_KHR_get_physical_device_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceSparseImageFormatProperties2KHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo,
    uint32_t* pPropertyCount,
    VkSparseImageFormatProperties2* pProperties)
{
    mImpl->vkGetPhysicalDeviceSparseImageFormatProperties2KHR(pool, physicalDevice, pFormatInfo, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_device_group
void VkDecoderSnapshot::vkGetDeviceGroupPeerMemoryFeaturesKHR(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t heapIndex,
    uint32_t localDeviceIndex,
    uint32_t remoteDeviceIndex,
    VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
{
    mImpl->vkGetDeviceGroupPeerMemoryFeaturesKHR(pool, device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
}
#endif
#ifdef VK_KHR_device_group
void VkDecoderSnapshot::vkCmdSetDeviceMaskKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t deviceMask)
{
    mImpl->vkCmdSetDeviceMaskKHR(pool, commandBuffer, deviceMask);
}
#endif
#ifdef VK_KHR_device_group
void VkDecoderSnapshot::vkCmdDispatchBaseKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t baseGroupX,
    uint32_t baseGroupY,
    uint32_t baseGroupZ,
    uint32_t groupCountX,
    uint32_t groupCountY,
    uint32_t groupCountZ)
{
    mImpl->vkCmdDispatchBaseKHR(pool, commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
}
#endif
#ifdef VK_KHR_maintenance1
void VkDecoderSnapshot::vkTrimCommandPoolKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkCommandPool commandPool,
    VkCommandPoolTrimFlags flags)
{
    mImpl->vkTrimCommandPoolKHR(pool, device, commandPool, flags);
}
#endif
#ifdef VK_KHR_device_group_creation
void VkDecoderSnapshot::vkEnumeratePhysicalDeviceGroupsKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    uint32_t* pPhysicalDeviceGroupCount,
    VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
{
    mImpl->vkEnumeratePhysicalDeviceGroupsKHR(pool, input_result, instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
}
#endif
#ifdef VK_KHR_external_memory_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalBufferPropertiesKHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo,
    VkExternalBufferProperties* pExternalBufferProperties)
{
    mImpl->vkGetPhysicalDeviceExternalBufferPropertiesKHR(pool, physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
}
#endif
#ifdef VK_KHR_external_memory_win32
void VkDecoderSnapshot::vkGetMemoryWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    mImpl->vkGetMemoryWin32HandleKHR(pool, input_result, device, pGetWin32HandleInfo, pHandle);
}
#endif
#ifdef VK_KHR_external_memory_win32
void VkDecoderSnapshot::vkGetMemoryWin32HandlePropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    HANDLE handle,
    VkMemoryWin32HandlePropertiesKHR* pMemoryWin32HandleProperties)
{
    mImpl->vkGetMemoryWin32HandlePropertiesKHR(pool, input_result, device, handleType, handle, pMemoryWin32HandleProperties);
}
#endif
#ifdef VK_KHR_external_memory_fd
void VkDecoderSnapshot::vkGetMemoryFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    mImpl->vkGetMemoryFdKHR(pool, input_result, device, pGetFdInfo, pFd);
}
#endif
#ifdef VK_KHR_external_memory_fd
void VkDecoderSnapshot::vkGetMemoryFdPropertiesKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    int fd,
    VkMemoryFdPropertiesKHR* pMemoryFdProperties)
{
    mImpl->vkGetMemoryFdPropertiesKHR(pool, input_result, device, handleType, fd, pMemoryFdProperties);
}
#endif
#ifdef VK_KHR_external_semaphore_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo,
    VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
{
    mImpl->vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(pool, physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
}
#endif
#ifdef VK_KHR_external_semaphore_win32
void VkDecoderSnapshot::vkImportSemaphoreWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreWin32HandleInfoKHR* pImportSemaphoreWin32HandleInfo)
{
    mImpl->vkImportSemaphoreWin32HandleKHR(pool, input_result, device, pImportSemaphoreWin32HandleInfo);
}
#endif
#ifdef VK_KHR_external_semaphore_win32
void VkDecoderSnapshot::vkGetSemaphoreWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    mImpl->vkGetSemaphoreWin32HandleKHR(pool, input_result, device, pGetWin32HandleInfo, pHandle);
}
#endif
#ifdef VK_KHR_external_semaphore_fd
void VkDecoderSnapshot::vkImportSemaphoreFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
{
    mImpl->vkImportSemaphoreFdKHR(pool, input_result, device, pImportSemaphoreFdInfo);
}
#endif
#ifdef VK_KHR_external_semaphore_fd
void VkDecoderSnapshot::vkGetSemaphoreFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSemaphoreGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    mImpl->vkGetSemaphoreFdKHR(pool, input_result, device, pGetFdInfo, pFd);
}
#endif
#ifdef VK_KHR_push_descriptor
void VkDecoderSnapshot::vkCmdPushDescriptorSetKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineBindPoint pipelineBindPoint,
    VkPipelineLayout layout,
    uint32_t set,
    uint32_t descriptorWriteCount,
    const VkWriteDescriptorSet* pDescriptorWrites)
{
    mImpl->vkCmdPushDescriptorSetKHR(pool, commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
}
#endif
#ifdef VK_KHR_push_descriptor
void VkDecoderSnapshot::vkCmdPushDescriptorSetWithTemplateKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    VkPipelineLayout layout,
    uint32_t set,
    const void* pData)
{
    mImpl->vkCmdPushDescriptorSetWithTemplateKHR(pool, commandBuffer, descriptorUpdateTemplate, layout, set, pData);
}
#endif
#ifdef VK_KHR_descriptor_update_template
void VkDecoderSnapshot::vkCreateDescriptorUpdateTemplateKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDescriptorUpdateTemplateCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
{
    mImpl->vkCreateDescriptorUpdateTemplateKHR(pool, input_result, device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
}
#endif
#ifdef VK_KHR_descriptor_update_template
void VkDecoderSnapshot::vkDestroyDescriptorUpdateTemplateKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDescriptorUpdateTemplateKHR(pool, device, descriptorUpdateTemplate, pAllocator);
}
#endif
#ifdef VK_KHR_descriptor_update_template
void VkDecoderSnapshot::vkUpdateDescriptorSetWithTemplateKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    const void* pData)
{
    mImpl->vkUpdateDescriptorSetWithTemplateKHR(pool, device, descriptorSet, descriptorUpdateTemplate, pData);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCreateRenderPass2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkRenderPassCreateInfo2KHR* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkRenderPass* pRenderPass)
{
    mImpl->vkCreateRenderPass2KHR(pool, input_result, device, pCreateInfo, pAllocator, pRenderPass);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCmdBeginRenderPass2KHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkRenderPassBeginInfo* pRenderPassBegin,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo)
{
    mImpl->vkCmdBeginRenderPass2KHR(pool, commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCmdNextSubpass2KHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassBeginInfoKHR* pSubpassBeginInfo,
    const VkSubpassEndInfoKHR* pSubpassEndInfo)
{
    mImpl->vkCmdNextSubpass2KHR(pool, commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
}
#endif
#ifdef VK_KHR_create_renderpass2
void VkDecoderSnapshot::vkCmdEndRenderPass2KHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkSubpassEndInfoKHR* pSubpassEndInfo)
{
    mImpl->vkCmdEndRenderPass2KHR(pool, commandBuffer, pSubpassEndInfo);
}
#endif
#ifdef VK_KHR_shared_presentable_image
void VkDecoderSnapshot::vkGetSwapchainStatusKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain)
{
    mImpl->vkGetSwapchainStatusKHR(pool, input_result, device, swapchain);
}
#endif
#ifdef VK_KHR_external_fence_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalFencePropertiesKHR(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo,
    VkExternalFenceProperties* pExternalFenceProperties)
{
    mImpl->vkGetPhysicalDeviceExternalFencePropertiesKHR(pool, physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
}
#endif
#ifdef VK_KHR_external_fence_win32
void VkDecoderSnapshot::vkImportFenceWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceWin32HandleInfoKHR* pImportFenceWin32HandleInfo)
{
    mImpl->vkImportFenceWin32HandleKHR(pool, input_result, device, pImportFenceWin32HandleInfo);
}
#endif
#ifdef VK_KHR_external_fence_win32
void VkDecoderSnapshot::vkGetFenceWin32HandleKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetWin32HandleInfoKHR* pGetWin32HandleInfo,
    HANDLE* pHandle)
{
    mImpl->vkGetFenceWin32HandleKHR(pool, input_result, device, pGetWin32HandleInfo, pHandle);
}
#endif
#ifdef VK_KHR_external_fence_fd
void VkDecoderSnapshot::vkImportFenceFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkImportFenceFdInfoKHR* pImportFenceFdInfo)
{
    mImpl->vkImportFenceFdKHR(pool, input_result, device, pImportFenceFdInfo);
}
#endif
#ifdef VK_KHR_external_fence_fd
void VkDecoderSnapshot::vkGetFenceFdKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkFenceGetFdInfoKHR* pGetFdInfo,
    int* pFd)
{
    mImpl->vkGetFenceFdKHR(pool, input_result, device, pGetFdInfo, pFd);
}
#endif
#ifdef VK_KHR_get_surface_capabilities2
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceCapabilities2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
{
    mImpl->vkGetPhysicalDeviceSurfaceCapabilities2KHR(pool, input_result, physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
}
#endif
#ifdef VK_KHR_get_surface_capabilities2
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceFormats2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo,
    uint32_t* pSurfaceFormatCount,
    VkSurfaceFormat2KHR* pSurfaceFormats)
{
    mImpl->vkGetPhysicalDeviceSurfaceFormats2KHR(pool, input_result, physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayProperties2KHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayProperties2KHR(pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetPhysicalDeviceDisplayPlaneProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    uint32_t* pPropertyCount,
    VkDisplayPlaneProperties2KHR* pProperties)
{
    mImpl->vkGetPhysicalDeviceDisplayPlaneProperties2KHR(pool, input_result, physicalDevice, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetDisplayModeProperties2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display,
    uint32_t* pPropertyCount,
    VkDisplayModeProperties2KHR* pProperties)
{
    mImpl->vkGetDisplayModeProperties2KHR(pool, input_result, physicalDevice, display, pPropertyCount, pProperties);
}
#endif
#ifdef VK_KHR_get_display_properties2
void VkDecoderSnapshot::vkGetDisplayPlaneCapabilities2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    const VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo,
    VkDisplayPlaneCapabilities2KHR* pCapabilities)
{
    mImpl->vkGetDisplayPlaneCapabilities2KHR(pool, input_result, physicalDevice, pDisplayPlaneInfo, pCapabilities);
}
#endif
#ifdef VK_KHR_get_memory_requirements2
void VkDecoderSnapshot::vkGetImageMemoryRequirements2KHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetImageMemoryRequirements2KHR(pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_KHR_get_memory_requirements2
void VkDecoderSnapshot::vkGetBufferMemoryRequirements2KHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkBufferMemoryRequirementsInfo2* pInfo,
    VkMemoryRequirements2* pMemoryRequirements)
{
    mImpl->vkGetBufferMemoryRequirements2KHR(pool, device, pInfo, pMemoryRequirements);
}
#endif
#ifdef VK_KHR_get_memory_requirements2
void VkDecoderSnapshot::vkGetImageSparseMemoryRequirements2KHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkImageSparseMemoryRequirementsInfo2* pInfo,
    uint32_t* pSparseMemoryRequirementCount,
    VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
{
    mImpl->vkGetImageSparseMemoryRequirements2KHR(pool, device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
}
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
void VkDecoderSnapshot::vkCreateSamplerYcbcrConversionKHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkSamplerYcbcrConversionCreateInfo* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSamplerYcbcrConversion* pYcbcrConversion)
{
    mImpl->vkCreateSamplerYcbcrConversionKHR(pool, input_result, device, pCreateInfo, pAllocator, pYcbcrConversion);
}
#endif
#ifdef VK_KHR_sampler_ycbcr_conversion
void VkDecoderSnapshot::vkDestroySamplerYcbcrConversionKHR(
    android::base::Pool* pool,
    VkDevice device,
    VkSamplerYcbcrConversion ycbcrConversion,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroySamplerYcbcrConversionKHR(pool, device, ycbcrConversion, pAllocator);
}
#endif
#ifdef VK_KHR_bind_memory2
void VkDecoderSnapshot::vkBindBufferMemory2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindBufferMemoryInfo* pBindInfos)
{
    mImpl->vkBindBufferMemory2KHR(pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_KHR_bind_memory2
void VkDecoderSnapshot::vkBindImageMemory2KHR(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    uint32_t bindInfoCount,
    const VkBindImageMemoryInfo* pBindInfos)
{
    mImpl->vkBindImageMemory2KHR(pool, input_result, device, bindInfoCount, pBindInfos);
}
#endif
#ifdef VK_KHR_maintenance3
void VkDecoderSnapshot::vkGetDescriptorSetLayoutSupportKHR(
    android::base::Pool* pool,
    VkDevice device,
    const VkDescriptorSetLayoutCreateInfo* pCreateInfo,
    VkDescriptorSetLayoutSupport* pSupport)
{
    mImpl->vkGetDescriptorSetLayoutSupportKHR(pool, device, pCreateInfo, pSupport);
}
#endif
#ifdef VK_KHR_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndirectCountKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndirectCountKHR(pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_KHR_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndexedIndirectCountKHR(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndexedIndirectCountKHR(pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_ANDROID_native_buffer
void VkDecoderSnapshot::vkGetSwapchainGrallocUsageANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkFormat format,
    VkImageUsageFlags imageUsage,
    int* grallocUsage)
{
    mImpl->vkGetSwapchainGrallocUsageANDROID(pool, input_result, device, format, imageUsage, grallocUsage);
}
#endif
#ifdef VK_ANDROID_native_buffer
void VkDecoderSnapshot::vkAcquireImageANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    int nativeFenceFd,
    VkSemaphore semaphore,
    VkFence fence)
{
    mImpl->vkAcquireImageANDROID(pool, input_result, device, image, nativeFenceFd, semaphore, fence);
}
#endif
#ifdef VK_ANDROID_native_buffer
void VkDecoderSnapshot::vkQueueSignalReleaseImageANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkQueue queue,
    uint32_t waitSemaphoreCount,
    const VkSemaphore* pWaitSemaphores,
    VkImage image,
    int* pNativeFenceFd)
{
    mImpl->vkQueueSignalReleaseImageANDROID(pool, input_result, queue, waitSemaphoreCount, pWaitSemaphores, image, pNativeFenceFd);
}
#endif
#ifdef VK_EXT_debug_report
void VkDecoderSnapshot::vkCreateDebugReportCallbackEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugReportCallbackCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugReportCallbackEXT* pCallback)
{
    mImpl->vkCreateDebugReportCallbackEXT(pool, input_result, instance, pCreateInfo, pAllocator, pCallback);
}
#endif
#ifdef VK_EXT_debug_report
void VkDecoderSnapshot::vkDestroyDebugReportCallbackEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugReportCallbackEXT callback,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDebugReportCallbackEXT(pool, instance, callback, pAllocator);
}
#endif
#ifdef VK_EXT_debug_report
void VkDecoderSnapshot::vkDebugReportMessageEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugReportFlagsEXT flags,
    VkDebugReportObjectTypeEXT objectType,
    uint64_t object,
    size_t location,
    int32_t messageCode,
    const char* pLayerPrefix,
    const char* pMessage)
{
    mImpl->vkDebugReportMessageEXT(pool, instance, flags, objectType, object, location, messageCode, pLayerPrefix, pMessage);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkDebugMarkerSetObjectTagEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectTagInfoEXT* pTagInfo)
{
    mImpl->vkDebugMarkerSetObjectTagEXT(pool, input_result, device, pTagInfo);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkDebugMarkerSetObjectNameEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugMarkerObjectNameInfoEXT* pNameInfo)
{
    mImpl->vkDebugMarkerSetObjectNameEXT(pool, input_result, device, pNameInfo);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkCmdDebugMarkerBeginEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    mImpl->vkCmdDebugMarkerBeginEXT(pool, commandBuffer, pMarkerInfo);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkCmdDebugMarkerEndEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdDebugMarkerEndEXT(pool, commandBuffer);
}
#endif
#ifdef VK_EXT_debug_marker
void VkDecoderSnapshot::vkCmdDebugMarkerInsertEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
{
    mImpl->vkCmdDebugMarkerInsertEXT(pool, commandBuffer, pMarkerInfo);
}
#endif
#ifdef VK_AMD_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndirectCountAMD(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndirectCountAMD(pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_AMD_draw_indirect_count
void VkDecoderSnapshot::vkCmdDrawIndexedIndirectCountAMD(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkBuffer buffer,
    VkDeviceSize offset,
    VkBuffer countBuffer,
    VkDeviceSize countBufferOffset,
    uint32_t maxDrawCount,
    uint32_t stride)
{
    mImpl->vkCmdDrawIndexedIndirectCountAMD(pool, commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
}
#endif
#ifdef VK_AMD_shader_info
void VkDecoderSnapshot::vkGetShaderInfoAMD(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkPipeline pipeline,
    VkShaderStageFlagBits shaderStage,
    VkShaderInfoTypeAMD infoType,
    size_t* pInfoSize,
    void* pInfo)
{
    mImpl->vkGetShaderInfoAMD(pool, input_result, device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
}
#endif
#ifdef VK_NV_external_memory_capabilities
void VkDecoderSnapshot::vkGetPhysicalDeviceExternalImageFormatPropertiesNV(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkFormat format,
    VkImageType type,
    VkImageTiling tiling,
    VkImageUsageFlags usage,
    VkImageCreateFlags flags,
    VkExternalMemoryHandleTypeFlagsNV externalHandleType,
    VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
{
    mImpl->vkGetPhysicalDeviceExternalImageFormatPropertiesNV(pool, input_result, physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
}
#endif
#ifdef VK_NV_external_memory_win32
void VkDecoderSnapshot::vkGetMemoryWin32HandleNV(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    VkExternalMemoryHandleTypeFlagsNV handleType,
    HANDLE* pHandle)
{
    mImpl->vkGetMemoryWin32HandleNV(pool, input_result, device, memory, handleType, pHandle);
}
#endif
#ifdef VK_NN_vi_surface
void VkDecoderSnapshot::vkCreateViSurfaceNN(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkViSurfaceCreateInfoNN* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateViSurfaceNN(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_EXT_conditional_rendering
void VkDecoderSnapshot::vkCmdBeginConditionalRenderingEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
{
    mImpl->vkCmdBeginConditionalRenderingEXT(pool, commandBuffer, pConditionalRenderingBegin);
}
#endif
#ifdef VK_EXT_conditional_rendering
void VkDecoderSnapshot::vkCmdEndConditionalRenderingEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdEndConditionalRenderingEXT(pool, commandBuffer);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkCmdProcessCommandsNVX(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkCmdProcessCommandsInfoNVX* pProcessCommandsInfo)
{
    mImpl->vkCmdProcessCommandsNVX(pool, commandBuffer, pProcessCommandsInfo);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkCmdReserveSpaceForCommandsNVX(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkCmdReserveSpaceForCommandsInfoNVX* pReserveSpaceInfo)
{
    mImpl->vkCmdReserveSpaceForCommandsNVX(pool, commandBuffer, pReserveSpaceInfo);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkCreateIndirectCommandsLayoutNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkIndirectCommandsLayoutCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkIndirectCommandsLayoutNVX* pIndirectCommandsLayout)
{
    mImpl->vkCreateIndirectCommandsLayoutNVX(pool, input_result, device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkDestroyIndirectCommandsLayoutNVX(
    android::base::Pool* pool,
    VkDevice device,
    VkIndirectCommandsLayoutNVX indirectCommandsLayout,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyIndirectCommandsLayoutNVX(pool, device, indirectCommandsLayout, pAllocator);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkCreateObjectTableNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkObjectTableCreateInfoNVX* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkObjectTableNVX* pObjectTable)
{
    mImpl->vkCreateObjectTableNVX(pool, input_result, device, pCreateInfo, pAllocator, pObjectTable);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkDestroyObjectTableNVX(
    android::base::Pool* pool,
    VkDevice device,
    VkObjectTableNVX objectTable,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyObjectTableNVX(pool, device, objectTable, pAllocator);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkRegisterObjectsNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectTableEntryNVX* const* ppObjectTableEntries,
    const uint32_t* pObjectIndices)
{
    mImpl->vkRegisterObjectsNVX(pool, input_result, device, objectTable, objectCount, ppObjectTableEntries, pObjectIndices);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkUnregisterObjectsNVX(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkObjectTableNVX objectTable,
    uint32_t objectCount,
    const VkObjectEntryTypeNVX* pObjectEntryTypes,
    const uint32_t* pObjectIndices)
{
    mImpl->vkUnregisterObjectsNVX(pool, input_result, device, objectTable, objectCount, pObjectEntryTypes, pObjectIndices);
}
#endif
#ifdef VK_NVX_device_generated_commands
void VkDecoderSnapshot::vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkDeviceGeneratedCommandsFeaturesNVX* pFeatures,
    VkDeviceGeneratedCommandsLimitsNVX* pLimits)
{
    mImpl->vkGetPhysicalDeviceGeneratedCommandsPropertiesNVX(pool, physicalDevice, pFeatures, pLimits);
}
#endif
#ifdef VK_NV_clip_space_w_scaling
void VkDecoderSnapshot::vkCmdSetViewportWScalingNV(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstViewport,
    uint32_t viewportCount,
    const VkViewportWScalingNV* pViewportWScalings)
{
    mImpl->vkCmdSetViewportWScalingNV(pool, commandBuffer, firstViewport, viewportCount, pViewportWScalings);
}
#endif
#ifdef VK_EXT_direct_mode_display
void VkDecoderSnapshot::vkReleaseDisplayEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkDisplayKHR display)
{
    mImpl->vkReleaseDisplayEXT(pool, input_result, physicalDevice, display);
}
#endif
#ifdef VK_EXT_acquire_xlib_display
void VkDecoderSnapshot::vkAcquireXlibDisplayEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    VkDisplayKHR display)
{
    mImpl->vkAcquireXlibDisplayEXT(pool, input_result, physicalDevice, dpy, display);
}
#endif
#ifdef VK_EXT_acquire_xlib_display
void VkDecoderSnapshot::vkGetRandROutputDisplayEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    Display* dpy,
    RROutput rrOutput,
    VkDisplayKHR* pDisplay)
{
    mImpl->vkGetRandROutputDisplayEXT(pool, input_result, physicalDevice, dpy, rrOutput, pDisplay);
}
#endif
#ifdef VK_EXT_display_surface_counter
void VkDecoderSnapshot::vkGetPhysicalDeviceSurfaceCapabilities2EXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkPhysicalDevice physicalDevice,
    VkSurfaceKHR surface,
    VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
{
    mImpl->vkGetPhysicalDeviceSurfaceCapabilities2EXT(pool, input_result, physicalDevice, surface, pSurfaceCapabilities);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkDisplayPowerControlEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayPowerInfoEXT* pDisplayPowerInfo)
{
    mImpl->vkDisplayPowerControlEXT(pool, input_result, device, display, pDisplayPowerInfo);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkRegisterDeviceEventEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDeviceEventInfoEXT* pDeviceEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    mImpl->vkRegisterDeviceEventEXT(pool, input_result, device, pDeviceEventInfo, pAllocator, pFence);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkRegisterDisplayEventEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDisplayKHR display,
    const VkDisplayEventInfoEXT* pDisplayEventInfo,
    const VkAllocationCallbacks* pAllocator,
    VkFence* pFence)
{
    mImpl->vkRegisterDisplayEventEXT(pool, input_result, device, display, pDisplayEventInfo, pAllocator, pFence);
}
#endif
#ifdef VK_EXT_display_control
void VkDecoderSnapshot::vkGetSwapchainCounterEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkSurfaceCounterFlagBitsEXT counter,
    uint64_t* pCounterValue)
{
    mImpl->vkGetSwapchainCounterEXT(pool, input_result, device, swapchain, counter, pCounterValue);
}
#endif
#ifdef VK_GOOGLE_display_timing
void VkDecoderSnapshot::vkGetRefreshCycleDurationGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
{
    mImpl->vkGetRefreshCycleDurationGOOGLE(pool, input_result, device, swapchain, pDisplayTimingProperties);
}
#endif
#ifdef VK_GOOGLE_display_timing
void VkDecoderSnapshot::vkGetPastPresentationTimingGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkSwapchainKHR swapchain,
    uint32_t* pPresentationTimingCount,
    VkPastPresentationTimingGOOGLE* pPresentationTimings)
{
    mImpl->vkGetPastPresentationTimingGOOGLE(pool, input_result, device, swapchain, pPresentationTimingCount, pPresentationTimings);
}
#endif
#ifdef VK_EXT_discard_rectangles
void VkDecoderSnapshot::vkCmdSetDiscardRectangleEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    uint32_t firstDiscardRectangle,
    uint32_t discardRectangleCount,
    const VkRect2D* pDiscardRectangles)
{
    mImpl->vkCmdSetDiscardRectangleEXT(pool, commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
}
#endif
#ifdef VK_EXT_hdr_metadata
void VkDecoderSnapshot::vkSetHdrMetadataEXT(
    android::base::Pool* pool,
    VkDevice device,
    uint32_t swapchainCount,
    const VkSwapchainKHR* pSwapchains,
    const VkHdrMetadataEXT* pMetadata)
{
    mImpl->vkSetHdrMetadataEXT(pool, device, swapchainCount, pSwapchains, pMetadata);
}
#endif
#ifdef VK_MVK_ios_surface
void VkDecoderSnapshot::vkCreateIOSSurfaceMVK(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkIOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateIOSSurfaceMVK(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_MVK_macos_surface
void VkDecoderSnapshot::vkCreateMacOSSurfaceMVK(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkMacOSSurfaceCreateInfoMVK* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkSurfaceKHR* pSurface)
{
    mImpl->vkCreateMacOSSurfaceMVK(pool, input_result, instance, pCreateInfo, pAllocator, pSurface);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkSetDebugUtilsObjectNameEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectNameInfoEXT* pNameInfo)
{
    mImpl->vkSetDebugUtilsObjectNameEXT(pool, input_result, device, pNameInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkSetDebugUtilsObjectTagEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkDebugUtilsObjectTagInfoEXT* pTagInfo)
{
    mImpl->vkSetDebugUtilsObjectTagEXT(pool, input_result, device, pTagInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkQueueBeginDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkQueueBeginDebugUtilsLabelEXT(pool, queue, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkQueueEndDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkQueue queue)
{
    mImpl->vkQueueEndDebugUtilsLabelEXT(pool, queue);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkQueueInsertDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkQueue queue,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkQueueInsertDebugUtilsLabelEXT(pool, queue, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCmdBeginDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkCmdBeginDebugUtilsLabelEXT(pool, commandBuffer, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCmdEndDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkCmdEndDebugUtilsLabelEXT(pool, commandBuffer);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCmdInsertDebugUtilsLabelEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkDebugUtilsLabelEXT* pLabelInfo)
{
    mImpl->vkCmdInsertDebugUtilsLabelEXT(pool, commandBuffer, pLabelInfo);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkCreateDebugUtilsMessengerEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkInstance instance,
    const VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkDebugUtilsMessengerEXT* pMessenger)
{
    mImpl->vkCreateDebugUtilsMessengerEXT(pool, input_result, instance, pCreateInfo, pAllocator, pMessenger);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkDestroyDebugUtilsMessengerEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugUtilsMessengerEXT messenger,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyDebugUtilsMessengerEXT(pool, instance, messenger, pAllocator);
}
#endif
#ifdef VK_EXT_debug_utils
void VkDecoderSnapshot::vkSubmitDebugUtilsMessageEXT(
    android::base::Pool* pool,
    VkInstance instance,
    VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,
    VkDebugUtilsMessageTypeFlagsEXT messageTypes,
    const VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
{
    mImpl->vkSubmitDebugUtilsMessageEXT(pool, instance, messageSeverity, messageTypes, pCallbackData);
}
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void VkDecoderSnapshot::vkGetAndroidHardwareBufferPropertiesANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const AHardwareBuffer* buffer,
    VkAndroidHardwareBufferPropertiesANDROID* pProperties)
{
    mImpl->vkGetAndroidHardwareBufferPropertiesANDROID(pool, input_result, device, buffer, pProperties);
}
#endif
#ifdef VK_ANDROID_external_memory_android_hardware_buffer
void VkDecoderSnapshot::vkGetMemoryAndroidHardwareBufferANDROID(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkMemoryGetAndroidHardwareBufferInfoANDROID* pInfo,
    AHardwareBuffer** pBuffer)
{
    mImpl->vkGetMemoryAndroidHardwareBufferANDROID(pool, input_result, device, pInfo, pBuffer);
}
#endif
#ifdef VK_EXT_sample_locations
void VkDecoderSnapshot::vkCmdSetSampleLocationsEXT(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkSampleLocationsInfoEXT* pSampleLocationsInfo)
{
    mImpl->vkCmdSetSampleLocationsEXT(pool, commandBuffer, pSampleLocationsInfo);
}
#endif
#ifdef VK_EXT_sample_locations
void VkDecoderSnapshot::vkGetPhysicalDeviceMultisamplePropertiesEXT(
    android::base::Pool* pool,
    VkPhysicalDevice physicalDevice,
    VkSampleCountFlagBits samples,
    VkMultisamplePropertiesEXT* pMultisampleProperties)
{
    mImpl->vkGetPhysicalDeviceMultisamplePropertiesEXT(pool, physicalDevice, samples, pMultisampleProperties);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkCreateValidationCacheEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    const VkValidationCacheCreateInfoEXT* pCreateInfo,
    const VkAllocationCallbacks* pAllocator,
    VkValidationCacheEXT* pValidationCache)
{
    mImpl->vkCreateValidationCacheEXT(pool, input_result, device, pCreateInfo, pAllocator, pValidationCache);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkDestroyValidationCacheEXT(
    android::base::Pool* pool,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    const VkAllocationCallbacks* pAllocator)
{
    mImpl->vkDestroyValidationCacheEXT(pool, device, validationCache, pAllocator);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkMergeValidationCachesEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT dstCache,
    uint32_t srcCacheCount,
    const VkValidationCacheEXT* pSrcCaches)
{
    mImpl->vkMergeValidationCachesEXT(pool, input_result, device, dstCache, srcCacheCount, pSrcCaches);
}
#endif
#ifdef VK_EXT_validation_cache
void VkDecoderSnapshot::vkGetValidationCacheDataEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkValidationCacheEXT validationCache,
    size_t* pDataSize,
    void* pData)
{
    mImpl->vkGetValidationCacheDataEXT(pool, input_result, device, validationCache, pDataSize, pData);
}
#endif
#ifdef VK_EXT_external_memory_host
void VkDecoderSnapshot::vkGetMemoryHostPointerPropertiesEXT(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkExternalMemoryHandleTypeFlagBits handleType,
    const void* pHostPointer,
    VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
{
    mImpl->vkGetMemoryHostPointerPropertiesEXT(pool, input_result, device, handleType, pHostPointer, pMemoryHostPointerProperties);
}
#endif
#ifdef VK_AMD_buffer_marker
void VkDecoderSnapshot::vkCmdWriteBufferMarkerAMD(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkPipelineStageFlagBits pipelineStage,
    VkBuffer dstBuffer,
    VkDeviceSize dstOffset,
    uint32_t marker)
{
    mImpl->vkCmdWriteBufferMarkerAMD(pool, commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
}
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void VkDecoderSnapshot::vkCmdSetCheckpointNV(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const void* pCheckpointMarker)
{
    mImpl->vkCmdSetCheckpointNV(pool, commandBuffer, pCheckpointMarker);
}
#endif
#ifdef VK_NV_device_diagnostic_checkpoints
void VkDecoderSnapshot::vkGetQueueCheckpointDataNV(
    android::base::Pool* pool,
    VkQueue queue,
    uint32_t* pCheckpointDataCount,
    VkCheckpointDataNV* pCheckpointData)
{
    mImpl->vkGetQueueCheckpointDataNV(pool, queue, pCheckpointDataCount, pCheckpointData);
}
#endif
#ifdef VK_GOOGLE_address_space
void VkDecoderSnapshot::vkMapMemoryIntoAddressSpaceGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkDeviceMemory memory,
    uint64_t* pAddress)
{
    mImpl->vkMapMemoryIntoAddressSpaceGOOGLE(pool, input_result, device, memory, pAddress);
}
#endif
#ifdef VK_GOOGLE_color_buffer
void VkDecoderSnapshot::vkRegisterImageColorBufferGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkImage image,
    uint32_t colorBuffer)
{
    mImpl->vkRegisterImageColorBufferGOOGLE(pool, input_result, device, image, colorBuffer);
}
#endif
#ifdef VK_GOOGLE_color_buffer
void VkDecoderSnapshot::vkRegisterBufferColorBufferGOOGLE(
    android::base::Pool* pool,
    VkResult input_result,
    VkDevice device,
    VkBuffer buffer,
    uint32_t colorBuffer)
{
    mImpl->vkRegisterBufferColorBufferGOOGLE(pool, input_result, device, buffer, colorBuffer);
}
#endif
#ifdef VK_GOOGLE_sized_descriptor_update_template
void VkDecoderSnapshot::vkUpdateDescriptorSetWithTemplateSizedGOOGLE(
    android::base::Pool* pool,
    VkDevice device,
    VkDescriptorSet descriptorSet,
    VkDescriptorUpdateTemplate descriptorUpdateTemplate,
    uint32_t imageInfoCount,
    uint32_t bufferInfoCount,
    uint32_t bufferViewCount,
    const uint32_t* pImageInfoEntryIndices,
    const uint32_t* pBufferInfoEntryIndices,
    const uint32_t* pBufferViewEntryIndices,
    const VkDescriptorImageInfo* pImageInfos,
    const VkDescriptorBufferInfo* pBufferInfos,
    const VkBufferView* pBufferViews)
{
    mImpl->vkUpdateDescriptorSetWithTemplateSizedGOOGLE(pool, device, descriptorSet, descriptorUpdateTemplate, imageInfoCount, bufferInfoCount, bufferViewCount, pImageInfoEntryIndices, pBufferInfoEntryIndices, pBufferViewEntryIndices, pImageInfos, pBufferInfos, pBufferViews);
}
#endif
#ifdef VK_GOOGLE_async_command_buffers
void VkDecoderSnapshot::vkBeginCommandBufferAsyncGOOGLE(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    const VkCommandBufferBeginInfo* pBeginInfo)
{
    mImpl->vkBeginCommandBufferAsyncGOOGLE(pool, commandBuffer, pBeginInfo);
}
#endif
#ifdef VK_GOOGLE_async_command_buffers
void VkDecoderSnapshot::vkEndCommandBufferAsyncGOOGLE(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer)
{
    mImpl->vkEndCommandBufferAsyncGOOGLE(pool, commandBuffer);
}
#endif
#ifdef VK_GOOGLE_async_command_buffers
void VkDecoderSnapshot::vkResetCommandBufferAsyncGOOGLE(
    android::base::Pool* pool,
    VkCommandBuffer commandBuffer,
    VkCommandBufferResetFlags flags)
{
    mImpl->vkResetCommandBufferAsyncGOOGLE(pool, commandBuffer, flags);
}
#endif


