syntax = "proto2";

package offworld;

enum ModuleName {
  UNKNOWN = 0;
  SNAPSHOT = 1;
  AR_TESTING = 2;  // TODO(jwmcglynn): rename it as you like
}

message GuestSend {
  message ModuleSnapshot {
    message CreateCheckpoint {
      optional string snapshot_name = 1;
    }
    message GotoCheckpoint {
      enum ShareMode {
        UNKNOWN = 0;
        UNCHANGED = 1;
        WRITABLE = 2;
        READ_ONLY = 3;
      };
      optional string snapshot_name = 1;
      optional bytes metadata = 2;
      optional ShareMode share_mode = 3;
    }
    message ForkReadOnlyInstances {
      optional int32 num_instances = 1;
    }
    message DoneInstance {
    }
    oneof function {
      CreateCheckpoint create_checkpoint_param = 1;
      GotoCheckpoint goto_checkpoint_param = 2;
      ForkReadOnlyInstances fork_read_only_instances_param = 3;
      DoneInstance done_instance_param = 4;
    }
  }
  message ModuleArTesting {  // TODO(jwmcglynn)
  }
  optional int32 version = 1;
  oneof module {
    ModuleSnapshot snapshot = 2;
    ModuleArTesting ar_testing = 3;
  }
}

// Most of the time we don't use GuestRecv. Instead we directly use the
// function parameter messages because the function knows what is supposed
// to be returned from the pipe.

message GuestRecv {
  message ModuleSnapshot {
    message CreateCheckpoint {
      optional bytes metadata = 1;
    }
    message GotoCheckpoint {
    }
    message ForkReadOnlyInstances {
      optional int32 instance_id = 1;
    }
    message DoneInstance {
    }
    oneof function {
      CreateCheckpoint create_checkpoint_param = 1;
      GotoCheckpoint goto_checkpoint_param = 2;
      ForkReadOnlyInstances fork_read_only_instances_param = 3;
      DoneInstance done_instance_param = 4;
    }
  }
  message ModuleArTesting {  // TODO(jwmcglynn)
  }
  optional int32 version = 1;
  oneof module {
    ModuleSnapshot snapshot = 2;
    ModuleArTesting arTesting = 3;
  }
}
