From b818c6b38db2bb35e4595ce89d4336cec2637d3b Mon Sep 17 00:00:00 2001
From: Lingfeng Yang <lfy@google.com>
Date: Thu, 28 Feb 2019 23:34:52 -0800
Subject: [PATCH] Fix external semaphore/memory stuff

- Add base extension

- Backport fix from Liam Middlebrook (NVIDIA) to unflake semaphore opaque fd
tests:

Fix dup tests to not free in-use semaphores/fences
The dup{,2,3} tests were subject to a race condition in which a
semaphore may be deleted before a VkQueue which was dependent on it had
completed execution.

This change moves the vkQueueWaitIdle call into the same scope as the
semaphores/fences that the queue is dependent on.

VK-GL-CTS issue: 1538

Components: Vulkan

Change-Id: Ie422d24d2f6f28c4e728c7de08b77eac5d88c7ac
Affects: dEQP-VK.api.external.{fence,semaphore}.opaque_fd.dup*
---
 .../vulkan/api/vktApiExternalMemoryTests.cpp  | 52 ++++++++++++++++---
 1 file changed, 44 insertions(+), 8 deletions(-)

diff --git a/external/vulkancts/modules/vulkan/api/vktApiExternalMemoryTests.cpp b/external/vulkancts/modules/vulkan/api/vktApiExternalMemoryTests.cpp
index b7821dd..3863ef9 100755
--- a/external/vulkancts/modules/vulkan/api/vktApiExternalMemoryTests.cpp
+++ b/external/vulkancts/modules/vulkan/api/vktApiExternalMemoryTests.cpp
@@ -239,6 +239,9 @@ vk::Move<vk::VkDevice> createDevice (const deUint32									apiVersion,
 									 deUint32										queueFamilyIndex,
 									 bool											useDedicatedAllocs = false)
 {
+	bool	useExternalSemaphore = false;
+	bool	useExternalFence = false;
+	bool	useExternalMemory = false;
 	std::vector<const char*>	deviceExtensions;
 
 	if ((externalSemaphoreTypes
@@ -246,6 +249,7 @@ vk::Move<vk::VkDevice> createDevice (const deUint32									apiVersion,
 				| vk::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT)) != 0)
 	{
 		deviceExtensions.push_back("VK_KHR_external_semaphore_fd");
+		useExternalSemaphore = true;
 	}
 
 	if ((externalFenceTypes
@@ -253,6 +257,7 @@ vk::Move<vk::VkDevice> createDevice (const deUint32									apiVersion,
 				| vk::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT)) != 0)
 	{
 		deviceExtensions.push_back("VK_KHR_external_fence_fd");
+		useExternalFence = true;
 	}
 
 	if (useDedicatedAllocs)
@@ -267,6 +272,7 @@ vk::Move<vk::VkDevice> createDevice (const deUint32									apiVersion,
 			& vk::VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT) != 0)
 	{
 		deviceExtensions.push_back("VK_KHR_external_memory_fd");
+		useExternalMemory = true;
 	}
 
 	if ((externalSemaphoreTypes
@@ -274,6 +280,7 @@ vk::Move<vk::VkDevice> createDevice (const deUint32									apiVersion,
 				| vk::VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT)) != 0)
 	{
 		deviceExtensions.push_back("VK_KHR_external_semaphore_win32");
+		useExternalMemory = true;
 	}
 
 	if ((externalFenceTypes
@@ -281,6 +288,7 @@ vk::Move<vk::VkDevice> createDevice (const deUint32									apiVersion,
 				| vk::VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT)) != 0)
 	{
 		deviceExtensions.push_back("VK_KHR_external_fence_win32");
+		useExternalFence = true;
 	}
 
 	if ((externalMemoryTypes
@@ -292,12 +300,32 @@ vk::Move<vk::VkDevice> createDevice (const deUint32									apiVersion,
 			   | vk::VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT)) != 0)
 	{
 		deviceExtensions.push_back("VK_KHR_external_memory_win32");
+		useExternalMemory = true;
 	}
 
 	if ((externalMemoryTypes
 			& vk::VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID) != 0)
 	{
 		deviceExtensions.push_back("VK_ANDROID_external_memory_android_hardware_buffer");
+		useExternalMemory = true;
+	}
+
+	if (useExternalSemaphore)
+	{
+		if (!vk::isCoreDeviceExtension(apiVersion, "VK_KHR_external_semaphore"))
+			deviceExtensions.push_back("VK_KHR_external_semaphore");
+	}
+
+	if (useExternalFence)
+	{
+		if (!vk::isCoreDeviceExtension(apiVersion, "VK_KHR_external_fence"))
+			deviceExtensions.push_back("VK_KHR_external_fence");
+	}
+
+	if (useExternalMemory)
+	{
+		if (!vk::isCoreDeviceExtension(apiVersion, "VK_KHR_external_memory"))
+			deviceExtensions.push_back("VK_KHR_external_memory");
 	}
 
 	const float								priority				= 0.5f;
@@ -1293,6 +1321,8 @@ tcu::TestStatus testSemaphoreTransference (Context&						context,
 			}
 			else
 				DE_FATAL("Unknown permanence.");
+
+			VK_CHECK(vkd.queueWaitIdle(queue));
 		}
 
 		return tcu::TestStatus::pass("Pass");
@@ -1348,11 +1378,11 @@ tcu::TestStatus testSemaphoreFdDup (Context&					context,
 				}
 				else
 					DE_FATAL("Unknown permanence.");
+
+				VK_CHECK(vkd.queueWaitIdle(queue));
 			}
 		}
 
-		VK_CHECK(vkd.queueWaitIdle(queue));
-
 		return tcu::TestStatus::pass("Pass");
 	}
 #else
@@ -1418,11 +1448,11 @@ tcu::TestStatus testSemaphoreFdDup2 (Context&					context,
 				}
 				else
 					DE_FATAL("Unknown permanence.");
+
+				VK_CHECK(vkd.queueWaitIdle(queue));
 			}
 		}
 
-		VK_CHECK(vkd.queueWaitIdle(queue));
-
 		return tcu::TestStatus::pass("Pass");
 	}
 #else
@@ -1488,11 +1518,11 @@ tcu::TestStatus testSemaphoreFdDup3 (Context&					context,
 				}
 				else
 					DE_FATAL("Unknown permanence.");
+
+				VK_CHECK(vkd.queueWaitIdle(queue));
 			}
 		}
 
-		VK_CHECK(vkd.queueWaitIdle(queue));
-
 		return tcu::TestStatus::pass("Pass");
 	}
 #else
@@ -2307,6 +2337,8 @@ tcu::TestStatus testFenceTransference (Context&					context,
 			}
 			else
 				DE_FATAL("Unknown permanence.");
+
+			VK_CHECK(vkd.queueWaitIdle(queue));
 		}
 
 		return tcu::TestStatus::pass("Pass");
@@ -2362,6 +2394,8 @@ tcu::TestStatus testFenceFdDup (Context&				context,
 				}
 				else
 					DE_FATAL("Unknown permanence.");
+
+				VK_CHECK(vkd.queueWaitIdle(queue));
 			}
 		}
 
@@ -2432,6 +2466,8 @@ tcu::TestStatus testFenceFdDup2 (Context&				context,
 				}
 				else
 					DE_FATAL("Unknown permanence.");
+
+				VK_CHECK(vkd.queueWaitIdle(queue));
 			}
 		}
 
@@ -2502,11 +2538,11 @@ tcu::TestStatus testFenceFdDup3 (Context&				context,
 				}
 				else
 					DE_FATAL("Unknown permanence.");
+
+				VK_CHECK(vkd.queueWaitIdle(queue));
 			}
 		}
 
-		VK_CHECK(vkd.queueWaitIdle(queue));
-
 		return tcu::TestStatus::pass("Pass");
 	}
 #else
-- 
2.21.0.352.gf09ad66450-goog

