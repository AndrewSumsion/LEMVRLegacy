/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.android.emulator;

import io.grpc.ManagedChannel;
import io.grpc.ManagedChannelBuilder;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;


public class EmulatorGrpc {

    private static class IntClosure {
        public int value = 0;
    }

    /**
     * Start & extract grpc on a random available port.
     *
     * @return The grpc port or -1 if we couldn't start/get it.
     * @throws InterruptedException
     * @throws IOException
     */
    private static int startGrpc() throws InterruptedException, IOException {
        IntClosure port = new IntClosure();
        ProcessBuilder builder = new ProcessBuilder();
        builder.command("adb", "emu", "grpc", "0");
        Process process = builder.start();
        Runnable r = () -> {
            BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));
            br.lines().forEach(x -> {
                // Super have to extract:
                // OK: gRPC endpoint available at port 12345
                String[] parts = x.split(" ");
                if (parts.length == 7 && parts[5].equals("port")) {
                    port.value = Integer.parseInt((parts[6]));
                }
            });
        };
        Thread thread = new Thread(r);
        thread.start();
        int exitCode = process.waitFor();
        if (exitCode != 0)
            return -1;

        thread.join();
        return port.value;
    }

    public static SnapshotServiceGrpc.SnapshotServiceBlockingStub getSnapshotServiceStub() throws IOException, InterruptedException {
        int grpcPort = startGrpc();
        System.out.println("Grpc at port: " + grpcPort);
        return getSnapshotServiceStub(grpcPort);
    }

    public static SnapshotServiceGrpc.SnapshotServiceBlockingStub getSnapshotServiceStub(int port) throws IOException, InterruptedException {

        ManagedChannel channel = ManagedChannelBuilder.forAddress("localhost", port)
                // Channels are secure by default (via SSL/TLS). For the example we disable TLS to avoid
                // needing certificates. Note, emulator has the certs in ~/.android if its using them.
                .usePlaintext()
                .build();
        return SnapshotServiceGrpc.newBlockingStub(channel);
    }
}

