/* eslint-disable */
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
goog.object.extend(proto, google_protobuf_empty_pb);
goog.exportSymbol('proto.android.emulation.control.BatteryState', null, global);
goog.exportSymbol('proto.android.emulation.control.BatteryState.BatteryCharger', null, global);
goog.exportSymbol('proto.android.emulation.control.BatteryState.BatteryHealth', null, global);
goog.exportSymbol('proto.android.emulation.control.BatteryState.BatteryStatus', null, global);
goog.exportSymbol('proto.android.emulation.control.GpsState', null, global);
goog.exportSymbol('proto.android.emulation.control.Image', null, global);
goog.exportSymbol('proto.android.emulation.control.ImageFormat', null, global);
goog.exportSymbol('proto.android.emulation.control.ImageFormat.ImgFormat', null, global);
goog.exportSymbol('proto.android.emulation.control.ImageStream', null, global);
goog.exportSymbol('proto.android.emulation.control.KeyEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.MouseEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.RotaryEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.Rotation', null, global);
goog.exportSymbol('proto.android.emulation.control.Rotation.SkinRotation', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneOperation', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneOperation.Operation', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneResponse', null, global);
goog.exportSymbol('proto.android.emulation.control.TelephoneResponse.Response', null, global);
goog.exportSymbol('proto.android.emulation.control.TouchEvent', null, global);
goog.exportSymbol('proto.android.emulation.control.VmConfiguration', null, global);
goog.exportSymbol('proto.android.emulation.control.VmConfiguration.VmHypervisorType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.VmConfiguration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.VmConfiguration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.VmConfiguration.displayName = 'proto.android.emulation.control.VmConfiguration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.VmConfiguration.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.VmConfiguration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.VmConfiguration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.VmConfiguration.toObject = function(includeInstance, msg) {
  var f, obj = {
    hypervisortype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    numberofcpucores: jspb.Message.getFieldWithDefault(msg, 2, 0),
    ramsizebytes: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.VmConfiguration}
 */
proto.android.emulation.control.VmConfiguration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.VmConfiguration;
  return proto.android.emulation.control.VmConfiguration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.VmConfiguration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.VmConfiguration}
 */
proto.android.emulation.control.VmConfiguration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.android.emulation.control.VmConfiguration.VmHypervisorType} */ (reader.readEnum());
      msg.setHypervisortype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setNumberofcpucores(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRamsizebytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.VmConfiguration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.VmConfiguration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.VmConfiguration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.VmConfiguration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHypervisortype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNumberofcpucores();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getRamsizebytes();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.android.emulation.control.VmConfiguration.VmHypervisorType = {
  HV_UNKNOWN: 0,
  HV_NONE: 1,
  HV_KVM: 2,
  HV_HAXM: 3,
  HV_HVF: 4,
  HV_WHPX: 5
};

/**
 * optional VmHypervisorType hypervisorType = 1;
 * @return {!proto.android.emulation.control.VmConfiguration.VmHypervisorType}
 */
proto.android.emulation.control.VmConfiguration.prototype.getHypervisortype = function() {
  return /** @type {!proto.android.emulation.control.VmConfiguration.VmHypervisorType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.android.emulation.control.VmConfiguration.VmHypervisorType} value */
proto.android.emulation.control.VmConfiguration.prototype.setHypervisortype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional int32 numberOfCpuCores = 2;
 * @return {number}
 */
proto.android.emulation.control.VmConfiguration.prototype.getNumberofcpucores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.android.emulation.control.VmConfiguration.prototype.setNumberofcpucores = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 ramSizeBytes = 3;
 * @return {number}
 */
proto.android.emulation.control.VmConfiguration.prototype.getRamsizebytes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.android.emulation.control.VmConfiguration.prototype.setRamsizebytes = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.RotaryEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.RotaryEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.RotaryEvent.displayName = 'proto.android.emulation.control.RotaryEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.RotaryEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.RotaryEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.RotaryEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.RotaryEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    delta: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.RotaryEvent}
 */
proto.android.emulation.control.RotaryEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.RotaryEvent;
  return proto.android.emulation.control.RotaryEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.RotaryEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.RotaryEvent}
 */
proto.android.emulation.control.RotaryEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.RotaryEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.RotaryEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.RotaryEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.RotaryEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDelta();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 delta = 1;
 * @return {number}
 */
proto.android.emulation.control.RotaryEvent.prototype.getDelta = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.android.emulation.control.RotaryEvent.prototype.setDelta = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.MouseEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.MouseEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.MouseEvent.displayName = 'proto.android.emulation.control.MouseEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.MouseEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.MouseEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.MouseEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.MouseEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: jspb.Message.getFieldWithDefault(msg, 1, 0),
    y: jspb.Message.getFieldWithDefault(msg, 2, 0),
    buttons: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.MouseEvent}
 */
proto.android.emulation.control.MouseEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.MouseEvent;
  return proto.android.emulation.control.MouseEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.MouseEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.MouseEvent}
 */
proto.android.emulation.control.MouseEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setButtons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.MouseEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.MouseEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.MouseEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.MouseEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getButtons();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 x = 1;
 * @return {number}
 */
proto.android.emulation.control.MouseEvent.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.android.emulation.control.MouseEvent.prototype.setX = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 y = 2;
 * @return {number}
 */
proto.android.emulation.control.MouseEvent.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.android.emulation.control.MouseEvent.prototype.setY = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 buttons = 3;
 * @return {number}
 */
proto.android.emulation.control.MouseEvent.prototype.getButtons = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.android.emulation.control.MouseEvent.prototype.setButtons = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.KeyEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.KeyEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.KeyEvent.displayName = 'proto.android.emulation.control.KeyEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.KeyEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.KeyEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.KeyEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.KeyEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getFieldWithDefault(msg, 1, 0),
    text: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.KeyEvent}
 */
proto.android.emulation.control.KeyEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.KeyEvent;
  return proto.android.emulation.control.KeyEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.KeyEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.KeyEvent}
 */
proto.android.emulation.control.KeyEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.KeyEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.KeyEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.KeyEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.KeyEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getText();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional uint32 key = 1;
 * @return {number}
 */
proto.android.emulation.control.KeyEvent.prototype.getKey = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.android.emulation.control.KeyEvent.prototype.setKey = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string text = 2;
 * @return {string}
 */
proto.android.emulation.control.KeyEvent.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.android.emulation.control.KeyEvent.prototype.setText = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.TouchEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.TouchEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.TouchEvent.displayName = 'proto.android.emulation.control.TouchEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.TouchEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.TouchEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.TouchEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TouchEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    istouching: jspb.Message.getFieldWithDefault(msg, 1, false),
    touchid: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.TouchEvent}
 */
proto.android.emulation.control.TouchEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.TouchEvent;
  return proto.android.emulation.control.TouchEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.TouchEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.TouchEvent}
 */
proto.android.emulation.control.TouchEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIstouching(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTouchid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.TouchEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.TouchEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.TouchEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TouchEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIstouching();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getTouchid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bool isTouching = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.android.emulation.control.TouchEvent.prototype.getIstouching = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.android.emulation.control.TouchEvent.prototype.setIstouching = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional int32 touchId = 2;
 * @return {number}
 */
proto.android.emulation.control.TouchEvent.prototype.getTouchid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.android.emulation.control.TouchEvent.prototype.setTouchid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.GpsState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.GpsState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.GpsState.displayName = 'proto.android.emulation.control.GpsState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.GpsState.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.GpsState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.GpsState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.GpsState.toObject = function(includeInstance, msg) {
  var f, obj = {
    passiveupdate: jspb.Message.getFieldWithDefault(msg, 1, false),
    latitude: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    longitude: +jspb.Message.getFieldWithDefault(msg, 3, 0.0),
    speed: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    heading: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    elevation: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    satellites: jspb.Message.getFieldWithDefault(msg, 7, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.GpsState}
 */
proto.android.emulation.control.GpsState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.GpsState;
  return proto.android.emulation.control.GpsState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.GpsState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.GpsState}
 */
proto.android.emulation.control.GpsState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassiveupdate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSpeed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHeading(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setElevation(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSatellites(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.GpsState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.GpsState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.GpsState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.GpsState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPassiveupdate();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getLatitude();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLongitude();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getHeading();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getElevation();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getSatellites();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
};


/**
 * optional bool passiveUpdate = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.android.emulation.control.GpsState.prototype.getPassiveupdate = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.android.emulation.control.GpsState.prototype.setPassiveupdate = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional double latitude = 2;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.android.emulation.control.GpsState.prototype.setLatitude = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double longitude = 3;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 3, 0.0));
};


/** @param {number} value */
proto.android.emulation.control.GpsState.prototype.setLongitude = function(value) {
  jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double speed = 4;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getSpeed = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.android.emulation.control.GpsState.prototype.setSpeed = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double heading = 5;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getHeading = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.android.emulation.control.GpsState.prototype.setHeading = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional double elevation = 6;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getElevation = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.android.emulation.control.GpsState.prototype.setElevation = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 satellites = 7;
 * @return {number}
 */
proto.android.emulation.control.GpsState.prototype.getSatellites = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.android.emulation.control.GpsState.prototype.setSatellites = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.BatteryState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.BatteryState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.BatteryState.displayName = 'proto.android.emulation.control.BatteryState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.BatteryState.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.BatteryState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.BatteryState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.BatteryState.toObject = function(includeInstance, msg) {
  var f, obj = {
    hasbattery: jspb.Message.getFieldWithDefault(msg, 1, false),
    ispresent: jspb.Message.getFieldWithDefault(msg, 2, false),
    charger: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chargelevel: jspb.Message.getFieldWithDefault(msg, 4, 0),
    health: jspb.Message.getFieldWithDefault(msg, 5, 0),
    status: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.BatteryState}
 */
proto.android.emulation.control.BatteryState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.BatteryState;
  return proto.android.emulation.control.BatteryState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.BatteryState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.BatteryState}
 */
proto.android.emulation.control.BatteryState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setHasbattery(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIspresent(value);
      break;
    case 3:
      var value = /** @type {!proto.android.emulation.control.BatteryState.BatteryCharger} */ (reader.readEnum());
      msg.setCharger(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChargelevel(value);
      break;
    case 5:
      var value = /** @type {!proto.android.emulation.control.BatteryState.BatteryHealth} */ (reader.readEnum());
      msg.setHealth(value);
      break;
    case 6:
      var value = /** @type {!proto.android.emulation.control.BatteryState.BatteryStatus} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.BatteryState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.BatteryState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.BatteryState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.BatteryState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHasbattery();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getIspresent();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getCharger();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getChargelevel();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getHealth();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.android.emulation.control.BatteryState.BatteryStatus = {
  BATTERY_STATUS_UNKNOWN: 0,
  BATTERY_STATUS_CHARGING: 1,
  BATTERY_STATUS_DISCHARGING: 2,
  BATTERY_STATUS_NOT_CHARGING: 3,
  BATTERY_STATUS_FULL: 4
};

/**
 * @enum {number}
 */
proto.android.emulation.control.BatteryState.BatteryCharger = {
  BATTERY_CHARGER_NONE: 0,
  BATTERY_CHARGER_AC: 1,
  BATTERY_CHARGER_USB: 2,
  BATTERY_CHARGER_WIRELESS: 3
};

/**
 * @enum {number}
 */
proto.android.emulation.control.BatteryState.BatteryHealth = {
  BATTERY_HEALTH_GOOD: 0,
  BATTERY_HEALTH_FAILED: 1,
  BATTERY_HEALTH_DEAD: 2,
  BATTERY_HEALTH_OVERVOLTAGE: 3,
  BATTERY_HEALTH_OVERHEATED: 4
};

/**
 * optional bool hasBattery = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.android.emulation.control.BatteryState.prototype.getHasbattery = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.android.emulation.control.BatteryState.prototype.setHasbattery = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool isPresent = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.android.emulation.control.BatteryState.prototype.getIspresent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.android.emulation.control.BatteryState.prototype.setIspresent = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional BatteryCharger charger = 3;
 * @return {!proto.android.emulation.control.BatteryState.BatteryCharger}
 */
proto.android.emulation.control.BatteryState.prototype.getCharger = function() {
  return /** @type {!proto.android.emulation.control.BatteryState.BatteryCharger} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.android.emulation.control.BatteryState.BatteryCharger} value */
proto.android.emulation.control.BatteryState.prototype.setCharger = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 chargeLevel = 4;
 * @return {number}
 */
proto.android.emulation.control.BatteryState.prototype.getChargelevel = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.android.emulation.control.BatteryState.prototype.setChargelevel = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional BatteryHealth health = 5;
 * @return {!proto.android.emulation.control.BatteryState.BatteryHealth}
 */
proto.android.emulation.control.BatteryState.prototype.getHealth = function() {
  return /** @type {!proto.android.emulation.control.BatteryState.BatteryHealth} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.android.emulation.control.BatteryState.BatteryHealth} value */
proto.android.emulation.control.BatteryState.prototype.setHealth = function(value) {
  jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional BatteryStatus status = 6;
 * @return {!proto.android.emulation.control.BatteryState.BatteryStatus}
 */
proto.android.emulation.control.BatteryState.prototype.getStatus = function() {
  return /** @type {!proto.android.emulation.control.BatteryState.BatteryStatus} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {!proto.android.emulation.control.BatteryState.BatteryStatus} value */
proto.android.emulation.control.BatteryState.prototype.setStatus = function(value) {
  jspb.Message.setProto3EnumField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.ImageStream = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.ImageStream, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.ImageStream.displayName = 'proto.android.emulation.control.ImageStream';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.ImageStream.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.ImageStream.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.ImageStream} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.ImageStream.toObject = function(includeInstance, msg) {
  var f, obj = {
    framerate: jspb.Message.getFieldWithDefault(msg, 1, 0),
    format: (f = msg.getFormat()) && proto.android.emulation.control.ImageFormat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.ImageStream}
 */
proto.android.emulation.control.ImageStream.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.ImageStream;
  return proto.android.emulation.control.ImageStream.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.ImageStream} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.ImageStream}
 */
proto.android.emulation.control.ImageStream.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFramerate(value);
      break;
    case 2:
      var value = new proto.android.emulation.control.ImageFormat;
      reader.readMessage(value,proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader);
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.ImageStream.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.ImageStream.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.ImageStream} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.ImageStream.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFramerate();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getFormat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.android.emulation.control.ImageFormat.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 framerate = 1;
 * @return {number}
 */
proto.android.emulation.control.ImageStream.prototype.getFramerate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.android.emulation.control.ImageStream.prototype.setFramerate = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional ImageFormat format = 2;
 * @return {?proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.ImageStream.prototype.getFormat = function() {
  return /** @type{?proto.android.emulation.control.ImageFormat} */ (
    jspb.Message.getWrapperField(this, proto.android.emulation.control.ImageFormat, 2));
};


/** @param {?proto.android.emulation.control.ImageFormat|undefined} value */
proto.android.emulation.control.ImageStream.prototype.setFormat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.android.emulation.control.ImageStream.prototype.clearFormat = function() {
  this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.android.emulation.control.ImageStream.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.ImageFormat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.ImageFormat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.ImageFormat.displayName = 'proto.android.emulation.control.ImageFormat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.ImageFormat.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.ImageFormat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.ImageFormat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.ImageFormat.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: jspb.Message.getFieldWithDefault(msg, 1, 0),
    rotation: (f = msg.getRotation()) && proto.android.emulation.control.Rotation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.ImageFormat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.ImageFormat;
  return proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.ImageFormat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.android.emulation.control.ImageFormat.ImgFormat} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    case 2:
      var value = new proto.android.emulation.control.Rotation;
      reader.readMessage(value,proto.android.emulation.control.Rotation.deserializeBinaryFromReader);
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.ImageFormat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.ImageFormat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.ImageFormat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.ImageFormat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getRotation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.android.emulation.control.Rotation.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.android.emulation.control.ImageFormat.ImgFormat = {
  PNG: 0,
  RAW: 1,
  RGB888: 2,
  RGBA8888: 3
};

/**
 * optional ImgFormat format = 1;
 * @return {!proto.android.emulation.control.ImageFormat.ImgFormat}
 */
proto.android.emulation.control.ImageFormat.prototype.getFormat = function() {
  return /** @type {!proto.android.emulation.control.ImageFormat.ImgFormat} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.android.emulation.control.ImageFormat.ImgFormat} value */
proto.android.emulation.control.ImageFormat.prototype.setFormat = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional Rotation rotation = 2;
 * @return {?proto.android.emulation.control.Rotation}
 */
proto.android.emulation.control.ImageFormat.prototype.getRotation = function() {
  return /** @type{?proto.android.emulation.control.Rotation} */ (
    jspb.Message.getWrapperField(this, proto.android.emulation.control.Rotation, 2));
};


/** @param {?proto.android.emulation.control.Rotation|undefined} value */
proto.android.emulation.control.ImageFormat.prototype.setRotation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.android.emulation.control.ImageFormat.prototype.clearRotation = function() {
  this.setRotation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.android.emulation.control.ImageFormat.prototype.hasRotation = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.Image = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.Image, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.Image.displayName = 'proto.android.emulation.control.Image';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.Image.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.Image.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.Image} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Image.toObject = function(includeInstance, msg) {
  var f, obj = {
    format: (f = msg.getFormat()) && proto.android.emulation.control.ImageFormat.toObject(includeInstance, f),
    width: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    image: msg.getImage_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.Image}
 */
proto.android.emulation.control.Image.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.Image;
  return proto.android.emulation.control.Image.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.Image} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.Image}
 */
proto.android.emulation.control.Image.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.android.emulation.control.ImageFormat;
      reader.readMessage(value,proto.android.emulation.control.ImageFormat.deserializeBinaryFromReader);
      msg.setFormat(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setImage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Image.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.Image.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.Image} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Image.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFormat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.android.emulation.control.ImageFormat.serializeBinaryToWriter
    );
  }
  f = message.getWidth();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getImage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional ImageFormat format = 1;
 * @return {?proto.android.emulation.control.ImageFormat}
 */
proto.android.emulation.control.Image.prototype.getFormat = function() {
  return /** @type{?proto.android.emulation.control.ImageFormat} */ (
    jspb.Message.getWrapperField(this, proto.android.emulation.control.ImageFormat, 1));
};


/** @param {?proto.android.emulation.control.ImageFormat|undefined} value */
proto.android.emulation.control.Image.prototype.setFormat = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.android.emulation.control.Image.prototype.clearFormat = function() {
  this.setFormat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.android.emulation.control.Image.prototype.hasFormat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 width = 2;
 * @return {number}
 */
proto.android.emulation.control.Image.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.android.emulation.control.Image.prototype.setWidth = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 height = 3;
 * @return {number}
 */
proto.android.emulation.control.Image.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.android.emulation.control.Image.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes image = 4;
 * @return {string}
 */
proto.android.emulation.control.Image.prototype.getImage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes image = 4;
 * This is a type-conversion wrapper around `getImage()`
 * @return {string}
 */
proto.android.emulation.control.Image.prototype.getImage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getImage()));
};


/**
 * optional bytes image = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getImage()`
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Image.prototype.getImage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getImage()));
};


/** @param {!(string|Uint8Array)} value */
proto.android.emulation.control.Image.prototype.setImage = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.Rotation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.Rotation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.Rotation.displayName = 'proto.android.emulation.control.Rotation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.Rotation.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.Rotation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.Rotation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Rotation.toObject = function(includeInstance, msg) {
  var f, obj = {
    rotation: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.Rotation}
 */
proto.android.emulation.control.Rotation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.Rotation;
  return proto.android.emulation.control.Rotation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.Rotation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.Rotation}
 */
proto.android.emulation.control.Rotation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.android.emulation.control.Rotation.SkinRotation} */ (reader.readEnum());
      msg.setRotation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.Rotation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.Rotation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.Rotation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.Rotation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRotation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.android.emulation.control.Rotation.SkinRotation = {
  SKIN_ROTATION_0: 0,
  SKIN_ROTATION_90: 1,
  SKIN_ROTATION_180: 2,
  SKIN_ROTATION_270: 3
};

/**
 * optional SkinRotation rotation = 1;
 * @return {!proto.android.emulation.control.Rotation.SkinRotation}
 */
proto.android.emulation.control.Rotation.prototype.getRotation = function() {
  return /** @type {!proto.android.emulation.control.Rotation.SkinRotation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.android.emulation.control.Rotation.SkinRotation} value */
proto.android.emulation.control.Rotation.prototype.setRotation = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.TelephoneOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.TelephoneOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.TelephoneOperation.displayName = 'proto.android.emulation.control.TelephoneOperation';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.TelephoneOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.TelephoneOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.TelephoneOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TelephoneOperation.toObject = function(includeInstance, msg) {
  var f, obj = {
    operation: jspb.Message.getFieldWithDefault(msg, 1, 0),
    number: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.TelephoneOperation}
 */
proto.android.emulation.control.TelephoneOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.TelephoneOperation;
  return proto.android.emulation.control.TelephoneOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.TelephoneOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.TelephoneOperation}
 */
proto.android.emulation.control.TelephoneOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.android.emulation.control.TelephoneOperation.Operation} */ (reader.readEnum());
      msg.setOperation(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.TelephoneOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.TelephoneOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.TelephoneOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TelephoneOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getOperation();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getNumber();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.android.emulation.control.TelephoneOperation.Operation = {
  INITCALL: 0,
  ACCEPTCALL: 1,
  REJECTCALLEXPLICIT: 2,
  REJECTCALLBUSY: 3,
  DISCONNECTCALL: 4,
  PLACECALLONHOLD: 5,
  TAKECALLOFFHOLD: 6
};

/**
 * optional Operation operation = 1;
 * @return {!proto.android.emulation.control.TelephoneOperation.Operation}
 */
proto.android.emulation.control.TelephoneOperation.prototype.getOperation = function() {
  return /** @type {!proto.android.emulation.control.TelephoneOperation.Operation} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.android.emulation.control.TelephoneOperation.Operation} value */
proto.android.emulation.control.TelephoneOperation.prototype.setOperation = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string number = 2;
 * @return {string}
 */
proto.android.emulation.control.TelephoneOperation.prototype.getNumber = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.android.emulation.control.TelephoneOperation.prototype.setNumber = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.android.emulation.control.TelephoneResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.android.emulation.control.TelephoneResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.android.emulation.control.TelephoneResponse.displayName = 'proto.android.emulation.control.TelephoneResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.android.emulation.control.TelephoneResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.android.emulation.control.TelephoneResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.android.emulation.control.TelephoneResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TelephoneResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    response: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.android.emulation.control.TelephoneResponse}
 */
proto.android.emulation.control.TelephoneResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.android.emulation.control.TelephoneResponse;
  return proto.android.emulation.control.TelephoneResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.android.emulation.control.TelephoneResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.android.emulation.control.TelephoneResponse}
 */
proto.android.emulation.control.TelephoneResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.android.emulation.control.TelephoneResponse.Response} */ (reader.readEnum());
      msg.setResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.android.emulation.control.TelephoneResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.android.emulation.control.TelephoneResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.android.emulation.control.TelephoneResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.android.emulation.control.TelephoneResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResponse();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.android.emulation.control.TelephoneResponse.Response = {
  OK: 0,
  BADOPERATION: 1,
  BADNUMBER: 2,
  INVALIDACTION: 3,
  ACTIONFAILED: 4,
  RADIOOFF: 5
};

/**
 * optional Response response = 1;
 * @return {!proto.android.emulation.control.TelephoneResponse.Response}
 */
proto.android.emulation.control.TelephoneResponse.prototype.getResponse = function() {
  return /** @type {!proto.android.emulation.control.TelephoneResponse.Response} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.android.emulation.control.TelephoneResponse.Response} value */
proto.android.emulation.control.TelephoneResponse.prototype.setResponse = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


goog.object.extend(exports, proto.android.emulation.control);
